// node_modules/preact/dist/preact.module.js
var n;
var l;
var t;
var u;
var i;
var r;
var o;
var e;
var f;
var c;
var s;
var a;
var h;
var p = {};
var v = [];
var y = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
var d = Array.isArray;
function w(n3, l5) {
  for (var t4 in l5) n3[t4] = l5[t4];
  return n3;
}
function g(n3) {
  n3 && n3.parentNode && n3.parentNode.removeChild(n3);
}
function _(l5, t4, u5) {
  var i5, r4, o4, e4 = {};
  for (o4 in t4) "key" == o4 ? i5 = t4[o4] : "ref" == o4 ? r4 = t4[o4] : e4[o4] = t4[o4];
  if (arguments.length > 2 && (e4.children = arguments.length > 3 ? n.call(arguments, 2) : u5), "function" == typeof l5 && null != l5.defaultProps) for (o4 in l5.defaultProps) void 0 === e4[o4] && (e4[o4] = l5.defaultProps[o4]);
  return m(l5, e4, i5, r4, null);
}
function m(n3, u5, i5, r4, o4) {
  var e4 = { type: n3, props: u5, key: i5, ref: r4, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o4 ? ++t : o4, __i: -1, __u: 0 };
  return null == o4 && null != l.vnode && l.vnode(e4), e4;
}
function k(n3) {
  return n3.children;
}
function x(n3, l5) {
  this.props = n3, this.context = l5;
}
function S(n3, l5) {
  if (null == l5) return n3.__ ? S(n3.__, n3.__i + 1) : null;
  for (var t4; l5 < n3.__k.length; l5++) if (null != (t4 = n3.__k[l5]) && null != t4.__e) return t4.__e;
  return "function" == typeof n3.type ? S(n3) : null;
}
function C(n3) {
  var l5, t4;
  if (null != (n3 = n3.__) && null != n3.__c) {
    for (n3.__e = n3.__c.base = null, l5 = 0; l5 < n3.__k.length; l5++) if (null != (t4 = n3.__k[l5]) && null != t4.__e) {
      n3.__e = n3.__c.base = t4.__e;
      break;
    }
    return C(n3);
  }
}
function M(n3) {
  (!n3.__d && (n3.__d = true) && i.push(n3) && !$.__r++ || r !== l.debounceRendering) && ((r = l.debounceRendering) || o)($);
}
function $() {
  for (var n3, t4, u5, r4, o4, f5, c4, s5 = 1; i.length; ) i.length > s5 && i.sort(e), n3 = i.shift(), s5 = i.length, n3.__d && (u5 = void 0, o4 = (r4 = (t4 = n3).__v).__e, f5 = [], c4 = [], t4.__P && ((u5 = w({}, r4)).__v = r4.__v + 1, l.vnode && l.vnode(u5), O(t4.__P, u5, r4, t4.__n, t4.__P.namespaceURI, 32 & r4.__u ? [o4] : null, f5, null == o4 ? S(r4) : o4, !!(32 & r4.__u), c4), u5.__v = r4.__v, u5.__.__k[u5.__i] = u5, z(f5, u5, c4), u5.__e != o4 && C(u5)));
  $.__r = 0;
}
function I(n3, l5, t4, u5, i5, r4, o4, e4, f5, c4, s5) {
  var a4, h5, y4, d5, w4, g5, _4 = u5 && u5.__k || v, m3 = l5.length;
  for (f5 = P(t4, l5, _4, f5, m3), a4 = 0; a4 < m3; a4++) null != (y4 = t4.__k[a4]) && (h5 = -1 === y4.__i ? p : _4[y4.__i] || p, y4.__i = a4, g5 = O(n3, y4, h5, i5, r4, o4, e4, f5, c4, s5), d5 = y4.__e, y4.ref && h5.ref != y4.ref && (h5.ref && q(h5.ref, null, y4), s5.push(y4.ref, y4.__c || d5, y4)), null == w4 && null != d5 && (w4 = d5), 4 & y4.__u || h5.__k === y4.__k ? f5 = A(y4, f5, n3) : "function" == typeof y4.type && void 0 !== g5 ? f5 = g5 : d5 && (f5 = d5.nextSibling), y4.__u &= -7);
  return t4.__e = w4, f5;
}
function P(n3, l5, t4, u5, i5) {
  var r4, o4, e4, f5, c4, s5 = t4.length, a4 = s5, h5 = 0;
  for (n3.__k = new Array(i5), r4 = 0; r4 < i5; r4++) null != (o4 = l5[r4]) && "boolean" != typeof o4 && "function" != typeof o4 ? (f5 = r4 + h5, (o4 = n3.__k[r4] = "string" == typeof o4 || "number" == typeof o4 || "bigint" == typeof o4 || o4.constructor == String ? m(null, o4, null, null, null) : d(o4) ? m(k, { children: o4 }, null, null, null) : void 0 === o4.constructor && o4.__b > 0 ? m(o4.type, o4.props, o4.key, o4.ref ? o4.ref : null, o4.__v) : o4).__ = n3, o4.__b = n3.__b + 1, e4 = null, -1 !== (c4 = o4.__i = L(o4, t4, f5, a4)) && (a4--, (e4 = t4[c4]) && (e4.__u |= 2)), null == e4 || null === e4.__v ? (-1 == c4 && (i5 > s5 ? h5-- : i5 < s5 && h5++), "function" != typeof o4.type && (o4.__u |= 4)) : c4 != f5 && (c4 == f5 - 1 ? h5-- : c4 == f5 + 1 ? h5++ : (c4 > f5 ? h5-- : h5++, o4.__u |= 4))) : n3.__k[r4] = null;
  if (a4) for (r4 = 0; r4 < s5; r4++) null != (e4 = t4[r4]) && 0 == (2 & e4.__u) && (e4.__e == u5 && (u5 = S(e4)), B(e4, e4));
  return u5;
}
function A(n3, l5, t4) {
  var u5, i5;
  if ("function" == typeof n3.type) {
    for (u5 = n3.__k, i5 = 0; u5 && i5 < u5.length; i5++) u5[i5] && (u5[i5].__ = n3, l5 = A(u5[i5], l5, t4));
    return l5;
  }
  n3.__e != l5 && (l5 && n3.type && !t4.contains(l5) && (l5 = S(n3)), t4.insertBefore(n3.__e, l5 || null), l5 = n3.__e);
  do {
    l5 = l5 && l5.nextSibling;
  } while (null != l5 && 8 == l5.nodeType);
  return l5;
}
function H(n3, l5) {
  return l5 = l5 || [], null == n3 || "boolean" == typeof n3 || (d(n3) ? n3.some(function(n4) {
    H(n4, l5);
  }) : l5.push(n3)), l5;
}
function L(n3, l5, t4, u5) {
  var i5, r4, o4 = n3.key, e4 = n3.type, f5 = l5[t4];
  if (null === f5 && null == n3.key || f5 && o4 == f5.key && e4 === f5.type && 0 == (2 & f5.__u)) return t4;
  if (u5 > (null != f5 && 0 == (2 & f5.__u) ? 1 : 0)) for (i5 = t4 - 1, r4 = t4 + 1; i5 >= 0 || r4 < l5.length; ) {
    if (i5 >= 0) {
      if ((f5 = l5[i5]) && 0 == (2 & f5.__u) && o4 == f5.key && e4 === f5.type) return i5;
      i5--;
    }
    if (r4 < l5.length) {
      if ((f5 = l5[r4]) && 0 == (2 & f5.__u) && o4 == f5.key && e4 === f5.type) return r4;
      r4++;
    }
  }
  return -1;
}
function T(n3, l5, t4) {
  "-" == l5[0] ? n3.setProperty(l5, null == t4 ? "" : t4) : n3[l5] = null == t4 ? "" : "number" != typeof t4 || y.test(l5) ? t4 : t4 + "px";
}
function j(n3, l5, t4, u5, i5) {
  var r4;
  n: if ("style" == l5) if ("string" == typeof t4) n3.style.cssText = t4;
  else {
    if ("string" == typeof u5 && (n3.style.cssText = u5 = ""), u5) for (l5 in u5) t4 && l5 in t4 || T(n3.style, l5, "");
    if (t4) for (l5 in t4) u5 && t4[l5] === u5[l5] || T(n3.style, l5, t4[l5]);
  }
  else if ("o" == l5[0] && "n" == l5[1]) r4 = l5 != (l5 = l5.replace(f, "$1")), l5 = l5.toLowerCase() in n3 || "onFocusOut" == l5 || "onFocusIn" == l5 ? l5.toLowerCase().slice(2) : l5.slice(2), n3.l || (n3.l = {}), n3.l[l5 + r4] = t4, t4 ? u5 ? t4.t = u5.t : (t4.t = c, n3.addEventListener(l5, r4 ? a : s, r4)) : n3.removeEventListener(l5, r4 ? a : s, r4);
  else {
    if ("http://www.w3.org/2000/svg" == i5) l5 = l5.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
    else if ("width" != l5 && "height" != l5 && "href" != l5 && "list" != l5 && "form" != l5 && "tabIndex" != l5 && "download" != l5 && "rowSpan" != l5 && "colSpan" != l5 && "role" != l5 && "popover" != l5 && l5 in n3) try {
      n3[l5] = null == t4 ? "" : t4;
      break n;
    } catch (n4) {
    }
    "function" == typeof t4 || (null == t4 || false === t4 && "-" != l5[4] ? n3.removeAttribute(l5) : n3.setAttribute(l5, "popover" == l5 && 1 == t4 ? "" : t4));
  }
}
function F(n3) {
  return function(t4) {
    if (this.l) {
      var u5 = this.l[t4.type + n3];
      if (null == t4.u) t4.u = c++;
      else if (t4.u < u5.t) return;
      return u5(l.event ? l.event(t4) : t4);
    }
  };
}
function O(n3, t4, u5, i5, r4, o4, e4, f5, c4, s5) {
  var a4, h5, p5, v5, y4, _4, m3, b3, S2, C3, M2, $3, P4, A4, H3, L2, T4, j4 = t4.type;
  if (void 0 !== t4.constructor) return null;
  128 & u5.__u && (c4 = !!(32 & u5.__u), o4 = [f5 = t4.__e = u5.__e]), (a4 = l.__b) && a4(t4);
  n: if ("function" == typeof j4) try {
    if (b3 = t4.props, S2 = "prototype" in j4 && j4.prototype.render, C3 = (a4 = j4.contextType) && i5[a4.__c], M2 = a4 ? C3 ? C3.props.value : a4.__ : i5, u5.__c ? m3 = (h5 = t4.__c = u5.__c).__ = h5.__E : (S2 ? t4.__c = h5 = new j4(b3, M2) : (t4.__c = h5 = new x(b3, M2), h5.constructor = j4, h5.render = D), C3 && C3.sub(h5), h5.props = b3, h5.state || (h5.state = {}), h5.context = M2, h5.__n = i5, p5 = h5.__d = true, h5.__h = [], h5._sb = []), S2 && null == h5.__s && (h5.__s = h5.state), S2 && null != j4.getDerivedStateFromProps && (h5.__s == h5.state && (h5.__s = w({}, h5.__s)), w(h5.__s, j4.getDerivedStateFromProps(b3, h5.__s))), v5 = h5.props, y4 = h5.state, h5.__v = t4, p5) S2 && null == j4.getDerivedStateFromProps && null != h5.componentWillMount && h5.componentWillMount(), S2 && null != h5.componentDidMount && h5.__h.push(h5.componentDidMount);
    else {
      if (S2 && null == j4.getDerivedStateFromProps && b3 !== v5 && null != h5.componentWillReceiveProps && h5.componentWillReceiveProps(b3, M2), !h5.__e && (null != h5.shouldComponentUpdate && false === h5.shouldComponentUpdate(b3, h5.__s, M2) || t4.__v == u5.__v)) {
        for (t4.__v != u5.__v && (h5.props = b3, h5.state = h5.__s, h5.__d = false), t4.__e = u5.__e, t4.__k = u5.__k, t4.__k.some(function(n4) {
          n4 && (n4.__ = t4);
        }), $3 = 0; $3 < h5._sb.length; $3++) h5.__h.push(h5._sb[$3]);
        h5._sb = [], h5.__h.length && e4.push(h5);
        break n;
      }
      null != h5.componentWillUpdate && h5.componentWillUpdate(b3, h5.__s, M2), S2 && null != h5.componentDidUpdate && h5.__h.push(function() {
        h5.componentDidUpdate(v5, y4, _4);
      });
    }
    if (h5.context = M2, h5.props = b3, h5.__P = n3, h5.__e = false, P4 = l.__r, A4 = 0, S2) {
      for (h5.state = h5.__s, h5.__d = false, P4 && P4(t4), a4 = h5.render(h5.props, h5.state, h5.context), H3 = 0; H3 < h5._sb.length; H3++) h5.__h.push(h5._sb[H3]);
      h5._sb = [];
    } else do {
      h5.__d = false, P4 && P4(t4), a4 = h5.render(h5.props, h5.state, h5.context), h5.state = h5.__s;
    } while (h5.__d && ++A4 < 25);
    h5.state = h5.__s, null != h5.getChildContext && (i5 = w(w({}, i5), h5.getChildContext())), S2 && !p5 && null != h5.getSnapshotBeforeUpdate && (_4 = h5.getSnapshotBeforeUpdate(v5, y4)), L2 = a4, null != a4 && a4.type === k && null == a4.key && (L2 = N(a4.props.children)), f5 = I(n3, d(L2) ? L2 : [L2], t4, u5, i5, r4, o4, e4, f5, c4, s5), h5.base = t4.__e, t4.__u &= -161, h5.__h.length && e4.push(h5), m3 && (h5.__E = h5.__ = null);
  } catch (n4) {
    if (t4.__v = null, c4 || null != o4) if (n4.then) {
      for (t4.__u |= c4 ? 160 : 128; f5 && 8 == f5.nodeType && f5.nextSibling; ) f5 = f5.nextSibling;
      o4[o4.indexOf(f5)] = null, t4.__e = f5;
    } else for (T4 = o4.length; T4--; ) g(o4[T4]);
    else t4.__e = u5.__e, t4.__k = u5.__k;
    l.__e(n4, t4, u5);
  }
  else null == o4 && t4.__v == u5.__v ? (t4.__k = u5.__k, t4.__e = u5.__e) : f5 = t4.__e = V(u5.__e, t4, u5, i5, r4, o4, e4, c4, s5);
  return (a4 = l.diffed) && a4(t4), 128 & t4.__u ? void 0 : f5;
}
function z(n3, t4, u5) {
  for (var i5 = 0; i5 < u5.length; i5++) q(u5[i5], u5[++i5], u5[++i5]);
  l.__c && l.__c(t4, n3), n3.some(function(t5) {
    try {
      n3 = t5.__h, t5.__h = [], n3.some(function(n4) {
        n4.call(t5);
      });
    } catch (n4) {
      l.__e(n4, t5.__v);
    }
  });
}
function N(n3) {
  return "object" != typeof n3 || null == n3 ? n3 : d(n3) ? n3.map(N) : w({}, n3);
}
function V(t4, u5, i5, r4, o4, e4, f5, c4, s5) {
  var a4, h5, v5, y4, w4, _4, m3, b3 = i5.props, k3 = u5.props, x3 = u5.type;
  if ("svg" == x3 ? o4 = "http://www.w3.org/2000/svg" : "math" == x3 ? o4 = "http://www.w3.org/1998/Math/MathML" : o4 || (o4 = "http://www.w3.org/1999/xhtml"), null != e4) {
    for (a4 = 0; a4 < e4.length; a4++) if ((w4 = e4[a4]) && "setAttribute" in w4 == !!x3 && (x3 ? w4.localName == x3 : 3 == w4.nodeType)) {
      t4 = w4, e4[a4] = null;
      break;
    }
  }
  if (null == t4) {
    if (null == x3) return document.createTextNode(k3);
    t4 = document.createElementNS(o4, x3, k3.is && k3), c4 && (l.__m && l.__m(u5, e4), c4 = false), e4 = null;
  }
  if (null === x3) b3 === k3 || c4 && t4.data === k3 || (t4.data = k3);
  else {
    if (e4 = e4 && n.call(t4.childNodes), b3 = i5.props || p, !c4 && null != e4) for (b3 = {}, a4 = 0; a4 < t4.attributes.length; a4++) b3[(w4 = t4.attributes[a4]).name] = w4.value;
    for (a4 in b3) if (w4 = b3[a4], "children" == a4) ;
    else if ("dangerouslySetInnerHTML" == a4) v5 = w4;
    else if (!(a4 in k3)) {
      if ("value" == a4 && "defaultValue" in k3 || "checked" == a4 && "defaultChecked" in k3) continue;
      j(t4, a4, null, w4, o4);
    }
    for (a4 in k3) w4 = k3[a4], "children" == a4 ? y4 = w4 : "dangerouslySetInnerHTML" == a4 ? h5 = w4 : "value" == a4 ? _4 = w4 : "checked" == a4 ? m3 = w4 : c4 && "function" != typeof w4 || b3[a4] === w4 || j(t4, a4, w4, b3[a4], o4);
    if (h5) c4 || v5 && (h5.__html === v5.__html || h5.__html === t4.innerHTML) || (t4.innerHTML = h5.__html), u5.__k = [];
    else if (v5 && (t4.innerHTML = ""), I("template" === u5.type ? t4.content : t4, d(y4) ? y4 : [y4], u5, i5, r4, "foreignObject" == x3 ? "http://www.w3.org/1999/xhtml" : o4, e4, f5, e4 ? e4[0] : i5.__k && S(i5, 0), c4, s5), null != e4) for (a4 = e4.length; a4--; ) g(e4[a4]);
    c4 || (a4 = "value", "progress" == x3 && null == _4 ? t4.removeAttribute("value") : void 0 !== _4 && (_4 !== t4[a4] || "progress" == x3 && !_4 || "option" == x3 && _4 !== b3[a4]) && j(t4, a4, _4, b3[a4], o4), a4 = "checked", void 0 !== m3 && m3 !== t4[a4] && j(t4, a4, m3, b3[a4], o4));
  }
  return t4;
}
function q(n3, t4, u5) {
  try {
    if ("function" == typeof n3) {
      var i5 = "function" == typeof n3.__u;
      i5 && n3.__u(), i5 && null == t4 || (n3.__u = n3(t4));
    } else n3.current = t4;
  } catch (n4) {
    l.__e(n4, u5);
  }
}
function B(n3, t4, u5) {
  var i5, r4;
  if (l.unmount && l.unmount(n3), (i5 = n3.ref) && (i5.current && i5.current !== n3.__e || q(i5, null, t4)), null != (i5 = n3.__c)) {
    if (i5.componentWillUnmount) try {
      i5.componentWillUnmount();
    } catch (n4) {
      l.__e(n4, t4);
    }
    i5.base = i5.__P = null;
  }
  if (i5 = n3.__k) for (r4 = 0; r4 < i5.length; r4++) i5[r4] && B(i5[r4], t4, u5 || "function" != typeof n3.type);
  u5 || g(n3.__e), n3.__c = n3.__ = n3.__e = void 0;
}
function D(n3, l5, t4) {
  return this.constructor(n3, t4);
}
function E(t4, u5, i5) {
  var r4, o4, e4, f5;
  u5 == document && (u5 = document.documentElement), l.__ && l.__(t4, u5), o4 = (r4 = "function" == typeof i5) ? null : i5 && i5.__k || u5.__k, e4 = [], f5 = [], O(u5, t4 = (!r4 && i5 || u5).__k = _(k, null, [t4]), o4 || p, p, u5.namespaceURI, !r4 && i5 ? [i5] : o4 ? null : u5.firstChild ? n.call(u5.childNodes) : null, e4, !r4 && i5 ? i5 : o4 ? o4.__e : u5.firstChild, r4, f5), z(e4, t4, f5);
}
function K(n3) {
  function l5(n4) {
    var t4, u5;
    return this.getChildContext || (t4 = /* @__PURE__ */ new Set(), (u5 = {})[l5.__c] = this, this.getChildContext = function() {
      return u5;
    }, this.componentWillUnmount = function() {
      t4 = null;
    }, this.shouldComponentUpdate = function(n5) {
      this.props.value !== n5.value && t4.forEach(function(n6) {
        n6.__e = true, M(n6);
      });
    }, this.sub = function(n5) {
      t4.add(n5);
      var l6 = n5.componentWillUnmount;
      n5.componentWillUnmount = function() {
        t4 && t4.delete(n5), l6 && l6.call(n5);
      };
    }), n4.children;
  }
  return l5.__c = "__cC" + h++, l5.__ = n3, l5.Provider = l5.__l = (l5.Consumer = function(n4, l6) {
    return n4.children(l6);
  }).contextType = l5, l5;
}
n = v.slice, l = { __e: function(n3, l5, t4, u5) {
  for (var i5, r4, o4; l5 = l5.__; ) if ((i5 = l5.__c) && !i5.__) try {
    if ((r4 = i5.constructor) && null != r4.getDerivedStateFromError && (i5.setState(r4.getDerivedStateFromError(n3)), o4 = i5.__d), null != i5.componentDidCatch && (i5.componentDidCatch(n3, u5 || {}), o4 = i5.__d), o4) return i5.__E = i5;
  } catch (l6) {
    n3 = l6;
  }
  throw n3;
} }, t = 0, u = function(n3) {
  return null != n3 && null == n3.constructor;
}, x.prototype.setState = function(n3, l5) {
  var t4;
  t4 = null != this.__s && this.__s !== this.state ? this.__s : this.__s = w({}, this.state), "function" == typeof n3 && (n3 = n3(w({}, t4), this.props)), n3 && w(t4, n3), null != n3 && this.__v && (l5 && this._sb.push(l5), M(this));
}, x.prototype.forceUpdate = function(n3) {
  this.__v && (this.__e = true, n3 && this.__h.push(n3), M(this));
}, x.prototype.render = k, i = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e = function(n3, l5) {
  return n3.__v.__b - l5.__v.__b;
}, $.__r = 0, f = /(PointerCapture)$|Capture$/i, c = 0, s = F(false), a = F(true), h = 0;

// node_modules/preact/jsx-runtime/dist/jsxRuntime.module.js
var f2 = 0;
var i2 = Array.isArray;
function u2(e4, t4, n3, o4, i5, u5) {
  t4 || (t4 = {});
  var a4, c4, p5 = t4;
  if ("ref" in p5) for (c4 in p5 = {}, t4) "ref" == c4 ? a4 = t4[c4] : p5[c4] = t4[c4];
  var l5 = { type: e4, props: p5, key: n3, ref: a4, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: --f2, __i: -1, __u: 0, __source: i5, __self: u5 };
  if ("function" == typeof e4 && (a4 = e4.defaultProps)) for (c4 in a4) void 0 === p5[c4] && (p5[c4] = a4[c4]);
  return l.vnode && l.vnode(l5), l5;
}

// node_modules/preact/hooks/dist/hooks.module.js
var t2;
var r2;
var u3;
var i3;
var o2 = 0;
var f3 = [];
var c2 = l;
var e2 = c2.__b;
var a2 = c2.__r;
var v2 = c2.diffed;
var l2 = c2.__c;
var m2 = c2.unmount;
var s2 = c2.__;
function p2(n3, t4) {
  c2.__h && c2.__h(r2, n3, o2 || t4), o2 = 0;
  var u5 = r2.__H || (r2.__H = { __: [], __h: [] });
  return n3 >= u5.__.length && u5.__.push({}), u5.__[n3];
}
function d2(n3) {
  return o2 = 1, h2(D2, n3);
}
function h2(n3, u5, i5) {
  var o4 = p2(t2++, 2);
  if (o4.t = n3, !o4.__c && (o4.__ = [i5 ? i5(u5) : D2(void 0, u5), function(n4) {
    var t4 = o4.__N ? o4.__N[0] : o4.__[0], r4 = o4.t(t4, n4);
    t4 !== r4 && (o4.__N = [r4, o4.__[1]], o4.__c.setState({}));
  }], o4.__c = r2, !r2.__f)) {
    var f5 = function(n4, t4, r4) {
      if (!o4.__c.__H) return true;
      var u6 = o4.__c.__H.__.filter(function(n5) {
        return !!n5.__c;
      });
      if (u6.every(function(n5) {
        return !n5.__N;
      })) return !c4 || c4.call(this, n4, t4, r4);
      var i6 = o4.__c.props !== n4;
      return u6.forEach(function(n5) {
        if (n5.__N) {
          var t5 = n5.__[0];
          n5.__ = n5.__N, n5.__N = void 0, t5 !== n5.__[0] && (i6 = true);
        }
      }), c4 && c4.call(this, n4, t4, r4) || i6;
    };
    r2.__f = true;
    var c4 = r2.shouldComponentUpdate, e4 = r2.componentWillUpdate;
    r2.componentWillUpdate = function(n4, t4, r4) {
      if (this.__e) {
        var u6 = c4;
        c4 = void 0, f5(n4, t4, r4), c4 = u6;
      }
      e4 && e4.call(this, n4, t4, r4);
    }, r2.shouldComponentUpdate = f5;
  }
  return o4.__N || o4.__;
}
function y2(n3, u5) {
  var i5 = p2(t2++, 3);
  !c2.__s && C2(i5.__H, u5) && (i5.__ = n3, i5.u = u5, r2.__H.__h.push(i5));
}
function A2(n3) {
  return o2 = 5, T2(function() {
    return { current: n3 };
  }, []);
}
function T2(n3, r4) {
  var u5 = p2(t2++, 7);
  return C2(u5.__H, r4) && (u5.__ = n3(), u5.__H = r4, u5.__h = n3), u5.__;
}
function x2(n3) {
  var u5 = r2.context[n3.__c], i5 = p2(t2++, 9);
  return i5.c = n3, u5 ? (null == i5.__ && (i5.__ = true, u5.sub(r2)), u5.props.value) : n3.__;
}
function j2() {
  for (var n3; n3 = f3.shift(); ) if (n3.__P && n3.__H) try {
    n3.__H.__h.forEach(z2), n3.__H.__h.forEach(B2), n3.__H.__h = [];
  } catch (t4) {
    n3.__H.__h = [], c2.__e(t4, n3.__v);
  }
}
c2.__b = function(n3) {
  r2 = null, e2 && e2(n3);
}, c2.__ = function(n3, t4) {
  n3 && t4.__k && t4.__k.__m && (n3.__m = t4.__k.__m), s2 && s2(n3, t4);
}, c2.__r = function(n3) {
  a2 && a2(n3), t2 = 0;
  var i5 = (r2 = n3.__c).__H;
  i5 && (u3 === r2 ? (i5.__h = [], r2.__h = [], i5.__.forEach(function(n4) {
    n4.__N && (n4.__ = n4.__N), n4.u = n4.__N = void 0;
  })) : (i5.__h.forEach(z2), i5.__h.forEach(B2), i5.__h = [], t2 = 0)), u3 = r2;
}, c2.diffed = function(n3) {
  v2 && v2(n3);
  var t4 = n3.__c;
  t4 && t4.__H && (t4.__H.__h.length && (1 !== f3.push(t4) && i3 === c2.requestAnimationFrame || ((i3 = c2.requestAnimationFrame) || w2)(j2)), t4.__H.__.forEach(function(n4) {
    n4.u && (n4.__H = n4.u), n4.u = void 0;
  })), u3 = r2 = null;
}, c2.__c = function(n3, t4) {
  t4.some(function(n4) {
    try {
      n4.__h.forEach(z2), n4.__h = n4.__h.filter(function(n5) {
        return !n5.__ || B2(n5);
      });
    } catch (r4) {
      t4.some(function(n5) {
        n5.__h && (n5.__h = []);
      }), t4 = [], c2.__e(r4, n4.__v);
    }
  }), l2 && l2(n3, t4);
}, c2.unmount = function(n3) {
  m2 && m2(n3);
  var t4, r4 = n3.__c;
  r4 && r4.__H && (r4.__H.__.forEach(function(n4) {
    try {
      z2(n4);
    } catch (n5) {
      t4 = n5;
    }
  }), r4.__H = void 0, t4 && c2.__e(t4, r4.__v));
};
var k2 = "function" == typeof requestAnimationFrame;
function w2(n3) {
  var t4, r4 = function() {
    clearTimeout(u5), k2 && cancelAnimationFrame(t4), setTimeout(n3);
  }, u5 = setTimeout(r4, 100);
  k2 && (t4 = requestAnimationFrame(r4));
}
function z2(n3) {
  var t4 = r2, u5 = n3.__c;
  "function" == typeof u5 && (n3.__c = void 0, u5()), r2 = t4;
}
function B2(n3) {
  var t4 = r2;
  n3.__c = n3.__(), r2 = t4;
}
function C2(n3, t4) {
  return !n3 || n3.length !== t4.length || t4.some(function(t5, r4) {
    return t5 !== n3[r4];
  });
}
function D2(n3, t4) {
  return "function" == typeof t4 ? t4(n3) : t4;
}

// node_modules/preact/compat/dist/compat.module.js
function g3(n3, t4) {
  for (var e4 in t4) n3[e4] = t4[e4];
  return n3;
}
function E2(n3, t4) {
  for (var e4 in n3) if ("__source" !== e4 && !(e4 in t4)) return true;
  for (var r4 in t4) if ("__source" !== r4 && n3[r4] !== t4[r4]) return true;
  return false;
}
function N2(n3, t4) {
  this.props = n3, this.context = t4;
}
(N2.prototype = new x()).isPureReactComponent = true, N2.prototype.shouldComponentUpdate = function(n3, t4) {
  return E2(this.props, n3) || E2(this.state, t4);
};
var T3 = l.__b;
l.__b = function(n3) {
  n3.type && n3.type.__f && n3.ref && (n3.props.ref = n3.ref, n3.ref = null), T3 && T3(n3);
};
var A3 = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.forward_ref") || 3911;
var F3 = l.__e;
l.__e = function(n3, t4, e4, r4) {
  if (n3.then) {
    for (var u5, o4 = t4; o4 = o4.__; ) if ((u5 = o4.__c) && u5.__c) return null == t4.__e && (t4.__e = e4.__e, t4.__k = e4.__k), u5.__c(n3, t4);
  }
  F3(n3, t4, e4, r4);
};
var U = l.unmount;
function V2(n3, t4, e4) {
  return n3 && (n3.__c && n3.__c.__H && (n3.__c.__H.__.forEach(function(n4) {
    "function" == typeof n4.__c && n4.__c();
  }), n3.__c.__H = null), null != (n3 = g3({}, n3)).__c && (n3.__c.__P === e4 && (n3.__c.__P = t4), n3.__c = null), n3.__k = n3.__k && n3.__k.map(function(n4) {
    return V2(n4, t4, e4);
  })), n3;
}
function W(n3, t4, e4) {
  return n3 && e4 && (n3.__v = null, n3.__k = n3.__k && n3.__k.map(function(n4) {
    return W(n4, t4, e4);
  }), n3.__c && n3.__c.__P === t4 && (n3.__e && e4.appendChild(n3.__e), n3.__c.__e = true, n3.__c.__P = e4)), n3;
}
function P3() {
  this.__u = 0, this.o = null, this.__b = null;
}
function j3(n3) {
  var t4 = n3.__.__c;
  return t4 && t4.__a && t4.__a(n3);
}
function B3() {
  this.i = null, this.l = null;
}
l.unmount = function(n3) {
  var t4 = n3.__c;
  t4 && t4.__R && t4.__R(), t4 && 32 & n3.__u && (n3.type = null), U && U(n3);
}, (P3.prototype = new x()).__c = function(n3, t4) {
  var e4 = t4.__c, r4 = this;
  null == r4.o && (r4.o = []), r4.o.push(e4);
  var u5 = j3(r4.__v), o4 = false, i5 = function() {
    o4 || (o4 = true, e4.__R = null, u5 ? u5(c4) : c4());
  };
  e4.__R = i5;
  var c4 = function() {
    if (!--r4.__u) {
      if (r4.state.__a) {
        var n4 = r4.state.__a;
        r4.__v.__k[0] = W(n4, n4.__c.__P, n4.__c.__O);
      }
      var t5;
      for (r4.setState({ __a: r4.__b = null }); t5 = r4.o.pop(); ) t5.forceUpdate();
    }
  };
  r4.__u++ || 32 & t4.__u || r4.setState({ __a: r4.__b = r4.__v.__k[0] }), n3.then(i5, i5);
}, P3.prototype.componentWillUnmount = function() {
  this.o = [];
}, P3.prototype.render = function(n3, e4) {
  if (this.__b) {
    if (this.__v.__k) {
      var r4 = document.createElement("div"), o4 = this.__v.__k[0].__c;
      this.__v.__k[0] = V2(this.__b, r4, o4.__O = o4.__P);
    }
    this.__b = null;
  }
  var i5 = e4.__a && _(k, null, n3.fallback);
  return i5 && (i5.__u &= -33), [_(k, null, e4.__a ? null : n3.children), i5];
};
var H2 = function(n3, t4, e4) {
  if (++e4[1] === e4[0] && n3.l.delete(t4), n3.props.revealOrder && ("t" !== n3.props.revealOrder[0] || !n3.l.size)) for (e4 = n3.i; e4; ) {
    for (; e4.length > 3; ) e4.pop()();
    if (e4[1] < e4[0]) break;
    n3.i = e4 = e4[2];
  }
};
function Z(n3) {
  return this.getChildContext = function() {
    return n3.context;
  }, n3.children;
}
function Y(n3) {
  var e4 = this, r4 = n3.h;
  e4.componentWillUnmount = function() {
    E(null, e4.v), e4.v = null, e4.h = null;
  }, e4.h && e4.h !== r4 && e4.componentWillUnmount(), e4.v || (e4.h = r4, e4.v = { nodeType: 1, parentNode: r4, childNodes: [], contains: function() {
    return true;
  }, appendChild: function(n4) {
    this.childNodes.push(n4), e4.h.appendChild(n4);
  }, insertBefore: function(n4, t4) {
    this.childNodes.push(n4), e4.h.insertBefore(n4, t4);
  }, removeChild: function(n4) {
    this.childNodes.splice(this.childNodes.indexOf(n4) >>> 1, 1), e4.h.removeChild(n4);
  } }), E(_(Z, { context: e4.context }, n3.__v), e4.v);
}
function $2(n3, e4) {
  var r4 = _(Y, { __v: n3, h: e4 });
  return r4.containerInfo = e4, r4;
}
(B3.prototype = new x()).__a = function(n3) {
  var t4 = this, e4 = j3(t4.__v), r4 = t4.l.get(n3);
  return r4[0]++, function(u5) {
    var o4 = function() {
      t4.props.revealOrder ? (r4.push(u5), H2(t4, n3, r4)) : u5();
    };
    e4 ? e4(o4) : o4();
  };
}, B3.prototype.render = function(n3) {
  this.i = null, this.l = /* @__PURE__ */ new Map();
  var t4 = H(n3.children);
  n3.revealOrder && "b" === n3.revealOrder[0] && t4.reverse();
  for (var e4 = t4.length; e4--; ) this.l.set(t4[e4], this.i = [1, 0, this.i]);
  return n3.children;
}, B3.prototype.componentDidUpdate = B3.prototype.componentDidMount = function() {
  var n3 = this;
  this.l.forEach(function(t4, e4) {
    H2(n3, e4, t4);
  });
};
var q3 = "undefined" != typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103;
var G2 = /^(?:accent|alignment|arabic|baseline|cap|clip(?!PathU)|color|dominant|fill|flood|font|glyph(?!R)|horiz|image(!S)|letter|lighting|marker(?!H|W|U)|overline|paint|pointer|shape|stop|strikethrough|stroke|text(?!L)|transform|underline|unicode|units|v|vector|vert|word|writing|x(?!C))[A-Z]/;
var J2 = /^on(Ani|Tra|Tou|BeforeInp|Compo)/;
var K2 = /[A-Z0-9]/g;
var Q = "undefined" != typeof document;
var X = function(n3) {
  return ("undefined" != typeof Symbol && "symbol" == typeof Symbol() ? /fil|che|rad/ : /fil|che|ra/).test(n3);
};
x.prototype.isReactComponent = {}, ["componentWillMount", "componentWillReceiveProps", "componentWillUpdate"].forEach(function(t4) {
  Object.defineProperty(x.prototype, t4, { configurable: true, get: function() {
    return this["UNSAFE_" + t4];
  }, set: function(n3) {
    Object.defineProperty(this, t4, { configurable: true, writable: true, value: n3 });
  } });
});
var en = l.event;
function rn() {
}
function un() {
  return this.cancelBubble;
}
function on() {
  return this.defaultPrevented;
}
l.event = function(n3) {
  return en && (n3 = en(n3)), n3.persist = rn, n3.isPropagationStopped = un, n3.isDefaultPrevented = on, n3.nativeEvent = n3;
};
var cn;
var ln = { enumerable: false, configurable: true, get: function() {
  return this.class;
} };
var fn = l.vnode;
l.vnode = function(n3) {
  "string" == typeof n3.type && function(n4) {
    var t4 = n4.props, e4 = n4.type, u5 = {}, o4 = -1 === e4.indexOf("-");
    for (var i5 in t4) {
      var c4 = t4[i5];
      if (!("value" === i5 && "defaultValue" in t4 && null == c4 || Q && "children" === i5 && "noscript" === e4 || "class" === i5 || "className" === i5)) {
        var l5 = i5.toLowerCase();
        "defaultValue" === i5 && "value" in t4 && null == t4.value ? i5 = "value" : "download" === i5 && true === c4 ? c4 = "" : "translate" === l5 && "no" === c4 ? c4 = false : "o" === l5[0] && "n" === l5[1] ? "ondoubleclick" === l5 ? i5 = "ondblclick" : "onchange" !== l5 || "input" !== e4 && "textarea" !== e4 || X(t4.type) ? "onfocus" === l5 ? i5 = "onfocusin" : "onblur" === l5 ? i5 = "onfocusout" : J2.test(i5) && (i5 = l5) : l5 = i5 = "oninput" : o4 && G2.test(i5) ? i5 = i5.replace(K2, "-$&").toLowerCase() : null === c4 && (c4 = void 0), "oninput" === l5 && u5[i5 = l5] && (i5 = "oninputCapture"), u5[i5] = c4;
      }
    }
    "select" == e4 && u5.multiple && Array.isArray(u5.value) && (u5.value = H(t4.children).forEach(function(n5) {
      n5.props.selected = -1 != u5.value.indexOf(n5.props.value);
    })), "select" == e4 && null != u5.defaultValue && (u5.value = H(t4.children).forEach(function(n5) {
      n5.props.selected = u5.multiple ? -1 != u5.defaultValue.indexOf(n5.props.value) : u5.defaultValue == n5.props.value;
    })), t4.class && !t4.className ? (u5.class = t4.class, Object.defineProperty(u5, "className", ln)) : (t4.className && !t4.class || t4.class && t4.className) && (u5.class = u5.className = t4.className), n4.props = u5;
  }(n3), n3.$$typeof = q3, fn && fn(n3);
};
var an = l.__r;
l.__r = function(n3) {
  an && an(n3), cn = n3.__c;
};
var sn = l.diffed;
l.diffed = function(n3) {
  sn && sn(n3);
  var t4 = n3.props, e4 = n3.__e;
  null != e4 && "textarea" === n3.type && "value" in t4 && t4.value !== e4.value && (e4.value = null == t4.value ? "" : t4.value), cn = null;
};

// node_modules/@preact/signals-core/dist/signals-core.module.js
var i4 = Symbol.for("preact-signals");
function t3() {
  if (!(s3 > 1)) {
    var i5, t4 = false;
    while (void 0 !== h3) {
      var r4 = h3;
      h3 = void 0;
      f4++;
      while (void 0 !== r4) {
        var o4 = r4.o;
        r4.o = void 0;
        r4.f &= -3;
        if (!(8 & r4.f) && c3(r4)) try {
          r4.c();
        } catch (r5) {
          if (!t4) {
            i5 = r5;
            t4 = true;
          }
        }
        r4 = o4;
      }
    }
    f4 = 0;
    s3--;
    if (t4) throw i5;
  } else s3--;
}
function r3(i5) {
  if (s3 > 0) return i5();
  s3++;
  try {
    return i5();
  } finally {
    t3();
  }
}
var o3 = void 0;
var h3 = void 0;
var s3 = 0;
var f4 = 0;
var v3 = 0;
function e3(i5) {
  if (void 0 !== o3) {
    var t4 = i5.n;
    if (void 0 === t4 || t4.t !== o3) {
      t4 = { i: 0, S: i5, p: o3.s, n: void 0, t: o3, e: void 0, x: void 0, r: t4 };
      if (void 0 !== o3.s) o3.s.n = t4;
      o3.s = t4;
      i5.n = t4;
      if (32 & o3.f) i5.S(t4);
      return t4;
    } else if (-1 === t4.i) {
      t4.i = 0;
      if (void 0 !== t4.n) {
        t4.n.p = t4.p;
        if (void 0 !== t4.p) t4.p.n = t4.n;
        t4.p = o3.s;
        t4.n = void 0;
        o3.s.n = t4;
        o3.s = t4;
      }
      return t4;
    }
  }
}
function u4(i5) {
  this.v = i5;
  this.i = 0;
  this.n = void 0;
  this.t = void 0;
}
u4.prototype.brand = i4;
u4.prototype.h = function() {
  return true;
};
u4.prototype.S = function(i5) {
  if (this.t !== i5 && void 0 === i5.e) {
    i5.x = this.t;
    if (void 0 !== this.t) this.t.e = i5;
    this.t = i5;
  }
};
u4.prototype.U = function(i5) {
  if (void 0 !== this.t) {
    var t4 = i5.e, r4 = i5.x;
    if (void 0 !== t4) {
      t4.x = r4;
      i5.e = void 0;
    }
    if (void 0 !== r4) {
      r4.e = t4;
      i5.x = void 0;
    }
    if (i5 === this.t) this.t = r4;
  }
};
u4.prototype.subscribe = function(i5) {
  var t4 = this;
  return E3(function() {
    var r4 = t4.value, n3 = o3;
    o3 = void 0;
    try {
      i5(r4);
    } finally {
      o3 = n3;
    }
  });
};
u4.prototype.valueOf = function() {
  return this.value;
};
u4.prototype.toString = function() {
  return this.value + "";
};
u4.prototype.toJSON = function() {
  return this.value;
};
u4.prototype.peek = function() {
  var i5 = o3;
  o3 = void 0;
  try {
    return this.value;
  } finally {
    o3 = i5;
  }
};
Object.defineProperty(u4.prototype, "value", { get: function() {
  var i5 = e3(this);
  if (void 0 !== i5) i5.i = this.i;
  return this.v;
}, set: function(i5) {
  if (i5 !== this.v) {
    if (f4 > 100) throw new Error("Cycle detected");
    this.v = i5;
    this.i++;
    v3++;
    s3++;
    try {
      for (var r4 = this.t; void 0 !== r4; r4 = r4.x) r4.t.N();
    } finally {
      t3();
    }
  }
} });
function d3(i5) {
  return new u4(i5);
}
function c3(i5) {
  for (var t4 = i5.s; void 0 !== t4; t4 = t4.n) if (t4.S.i !== t4.i || !t4.S.h() || t4.S.i !== t4.i) return true;
  return false;
}
function a3(i5) {
  for (var t4 = i5.s; void 0 !== t4; t4 = t4.n) {
    var r4 = t4.S.n;
    if (void 0 !== r4) t4.r = r4;
    t4.S.n = t4;
    t4.i = -1;
    if (void 0 === t4.n) {
      i5.s = t4;
      break;
    }
  }
}
function l3(i5) {
  var t4 = i5.s, r4 = void 0;
  while (void 0 !== t4) {
    var o4 = t4.p;
    if (-1 === t4.i) {
      t4.S.U(t4);
      if (void 0 !== o4) o4.n = t4.n;
      if (void 0 !== t4.n) t4.n.p = o4;
    } else r4 = t4;
    t4.S.n = t4.r;
    if (void 0 !== t4.r) t4.r = void 0;
    t4 = o4;
  }
  i5.s = r4;
}
function y3(i5) {
  u4.call(this, void 0);
  this.x = i5;
  this.s = void 0;
  this.g = v3 - 1;
  this.f = 4;
}
(y3.prototype = new u4()).h = function() {
  this.f &= -3;
  if (1 & this.f) return false;
  if (32 == (36 & this.f)) return true;
  this.f &= -5;
  if (this.g === v3) return true;
  this.g = v3;
  this.f |= 1;
  if (this.i > 0 && !c3(this)) {
    this.f &= -2;
    return true;
  }
  var i5 = o3;
  try {
    a3(this);
    o3 = this;
    var t4 = this.x();
    if (16 & this.f || this.v !== t4 || 0 === this.i) {
      this.v = t4;
      this.f &= -17;
      this.i++;
    }
  } catch (i6) {
    this.v = i6;
    this.f |= 16;
    this.i++;
  }
  o3 = i5;
  l3(this);
  this.f &= -2;
  return true;
};
y3.prototype.S = function(i5) {
  if (void 0 === this.t) {
    this.f |= 36;
    for (var t4 = this.s; void 0 !== t4; t4 = t4.n) t4.S.S(t4);
  }
  u4.prototype.S.call(this, i5);
};
y3.prototype.U = function(i5) {
  if (void 0 !== this.t) {
    u4.prototype.U.call(this, i5);
    if (void 0 === this.t) {
      this.f &= -33;
      for (var t4 = this.s; void 0 !== t4; t4 = t4.n) t4.S.U(t4);
    }
  }
};
y3.prototype.N = function() {
  if (!(2 & this.f)) {
    this.f |= 6;
    for (var i5 = this.t; void 0 !== i5; i5 = i5.x) i5.t.N();
  }
};
Object.defineProperty(y3.prototype, "value", { get: function() {
  if (1 & this.f) throw new Error("Cycle detected");
  var i5 = e3(this);
  this.h();
  if (void 0 !== i5) i5.i = this.i;
  if (16 & this.f) throw this.v;
  return this.v;
} });
function w3(i5) {
  return new y3(i5);
}
function _3(i5) {
  var r4 = i5.u;
  i5.u = void 0;
  if ("function" == typeof r4) {
    s3++;
    var n3 = o3;
    o3 = void 0;
    try {
      r4();
    } catch (t4) {
      i5.f &= -2;
      i5.f |= 8;
      g4(i5);
      throw t4;
    } finally {
      o3 = n3;
      t3();
    }
  }
}
function g4(i5) {
  for (var t4 = i5.s; void 0 !== t4; t4 = t4.n) t4.S.U(t4);
  i5.x = void 0;
  i5.s = void 0;
  _3(i5);
}
function p3(i5) {
  if (o3 !== this) throw new Error("Out-of-order effect");
  l3(this);
  o3 = i5;
  this.f &= -2;
  if (8 & this.f) g4(this);
  t3();
}
function b2(i5) {
  this.x = i5;
  this.u = void 0;
  this.s = void 0;
  this.o = void 0;
  this.f = 32;
}
b2.prototype.c = function() {
  var i5 = this.S();
  try {
    if (8 & this.f) return;
    if (void 0 === this.x) return;
    var t4 = this.x();
    if ("function" == typeof t4) this.u = t4;
  } finally {
    i5();
  }
};
b2.prototype.S = function() {
  if (1 & this.f) throw new Error("Cycle detected");
  this.f |= 1;
  this.f &= -9;
  _3(this);
  a3(this);
  s3++;
  var i5 = o3;
  o3 = this;
  return p3.bind(this, i5);
};
b2.prototype.N = function() {
  if (!(2 & this.f)) {
    this.f |= 2;
    this.o = h3;
    h3 = this;
  }
};
b2.prototype.d = function() {
  this.f |= 8;
  if (!(1 & this.f)) g4(this);
};
function E3(i5) {
  var t4 = new b2(i5);
  try {
    t4.c();
  } catch (i6) {
    t4.d();
    throw i6;
  }
  return t4.d.bind(t4);
}

// node_modules/@preact/signals/dist/signals.module.js
var v4;
var s4;
function l4(i5, n3) {
  l[i5] = n3.bind(null, l[i5] || function() {
  });
}
function d4(i5) {
  if (s4) s4();
  s4 = i5 && i5.S();
}
function h4(i5) {
  var r4 = this, f5 = i5.data, o4 = useSignal(f5);
  o4.value = f5;
  var e4 = T2(function() {
    var i6 = r4.__v;
    while (i6 = i6.__) if (i6.__c) {
      i6.__c.__$f |= 4;
      break;
    }
    r4.__$u.c = function() {
      var i7, t4 = r4.__$u.S(), f6 = e4.value;
      t4();
      if (u(f6) || 3 !== (null == (i7 = r4.base) ? void 0 : i7.nodeType)) {
        r4.__$f |= 1;
        r4.setState({});
      } else r4.base.data = f6;
    };
    return w3(function() {
      var i7 = o4.value.value;
      return 0 === i7 ? 0 : true === i7 ? "" : i7 || "";
    });
  }, []);
  return e4.value;
}
h4.displayName = "_st";
Object.defineProperties(u4.prototype, { constructor: { configurable: true, value: void 0 }, type: { configurable: true, value: h4 }, props: { configurable: true, get: function() {
  return { data: this };
} }, __b: { configurable: true, value: 1 } });
l4("__b", function(i5, r4) {
  if ("string" == typeof r4.type) {
    var n3, t4 = r4.props;
    for (var f5 in t4) if ("children" !== f5) {
      var o4 = t4[f5];
      if (o4 instanceof u4) {
        if (!n3) r4.__np = n3 = {};
        n3[f5] = o4;
        t4[f5] = o4.peek();
      }
    }
  }
  i5(r4);
});
l4("__r", function(i5, r4) {
  d4();
  var n3, t4 = r4.__c;
  if (t4) {
    t4.__$f &= -2;
    if (void 0 === (n3 = t4.__$u)) t4.__$u = n3 = function(i6) {
      var r5;
      E3(function() {
        r5 = this;
      });
      r5.c = function() {
        t4.__$f |= 1;
        t4.setState({});
      };
      return r5;
    }();
  }
  v4 = t4;
  d4(n3);
  i5(r4);
});
l4("__e", function(i5, r4, n3, t4) {
  d4();
  v4 = void 0;
  i5(r4, n3, t4);
});
l4("diffed", function(i5, r4) {
  d4();
  v4 = void 0;
  var n3;
  if ("string" == typeof r4.type && (n3 = r4.__e)) {
    var t4 = r4.__np, f5 = r4.props;
    if (t4) {
      var o4 = n3.U;
      if (o4) for (var e4 in o4) {
        var u5 = o4[e4];
        if (void 0 !== u5 && !(e4 in t4)) {
          u5.d();
          o4[e4] = void 0;
        }
      }
      else n3.U = o4 = {};
      for (var a4 in t4) {
        var c4 = o4[a4], s5 = t4[a4];
        if (void 0 === c4) {
          c4 = p4(n3, a4, s5, f5);
          o4[a4] = c4;
        } else c4.o(s5, f5);
      }
    }
  }
  i5(r4);
});
function p4(i5, r4, n3, t4) {
  var f5 = r4 in i5 && void 0 === i5.ownerSVGElement, o4 = d3(n3);
  return { o: function(i6, r5) {
    o4.value = i6;
    t4 = r5;
  }, d: E3(function() {
    var n4 = o4.value.value;
    if (t4[r4] !== n4) {
      t4[r4] = n4;
      if (f5) i5[r4] = n4;
      else if (n4) i5.setAttribute(r4, n4);
      else i5.removeAttribute(r4);
    }
  }) };
}
l4("unmount", function(i5, r4) {
  if ("string" == typeof r4.type) {
    var n3 = r4.__e;
    if (n3) {
      var t4 = n3.U;
      if (t4) {
        n3.U = void 0;
        for (var f5 in t4) {
          var o4 = t4[f5];
          if (o4) o4.d();
        }
      }
    }
  } else {
    var e4 = r4.__c;
    if (e4) {
      var u5 = e4.__$u;
      if (u5) {
        e4.__$u = void 0;
        u5.d();
      }
    }
  }
  i5(r4);
});
l4("__h", function(i5, r4, n3, t4) {
  if (t4 < 3 || 9 === t4) r4.__$f |= 2;
  i5(r4, n3, t4);
});
x.prototype.shouldComponentUpdate = function(i5, r4) {
  var n3 = this.__$u, t4 = n3 && void 0 !== n3.s;
  for (var f5 in r4) return true;
  if (this.__f || "boolean" == typeof this.u && true === this.u) {
    if (!(t4 || 2 & this.__$f || 4 & this.__$f)) return true;
    if (1 & this.__$f) return true;
  } else {
    if (!(t4 || 4 & this.__$f)) return true;
    if (3 & this.__$f) return true;
  }
  for (var o4 in i5) if ("__source" !== o4 && i5[o4] !== this.props[o4]) return true;
  for (var e4 in this.props) if (!(e4 in i5)) return true;
  return false;
};
function useSignal(i5) {
  return T2(function() {
    return d3(i5);
  }, []);
}
function useSignalEffect(i5) {
  var r4 = A2(i5);
  r4.current = i5;
  y2(function() {
    return E3(function() {
      return r4.current();
    });
  }, []);
}

// node_modules/@schedule-x/calendar/dist/core.js
var AppContext$1 = K({});
var DateFormats = {
  DATE_STRING: /^\d{4}-\d{2}-\d{2}$/,
  DATE_TIME_STRING: /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}$/
};
var InvalidDateTimeError = class extends Error {
  constructor(dateTimeSpecification) {
    super(`Invalid date time specification: ${dateTimeSpecification}`);
  }
};
var toJSDate = (dateTimeSpecification) => {
  if (!DateFormats.DATE_TIME_STRING.test(dateTimeSpecification) && !DateFormats.DATE_STRING.test(dateTimeSpecification))
    throw new InvalidDateTimeError(dateTimeSpecification);
  return new Date(
    Number(dateTimeSpecification.slice(0, 4)),
    Number(dateTimeSpecification.slice(5, 7)) - 1,
    Number(dateTimeSpecification.slice(8, 10)),
    Number(dateTimeSpecification.slice(11, 13)),
    // for date strings this will be 0
    Number(dateTimeSpecification.slice(14, 16))
    // for date strings this will be 0
  );
};
var toIntegers = (dateTimeSpecification) => {
  const hours = dateTimeSpecification.slice(11, 13), minutes = dateTimeSpecification.slice(14, 16);
  return {
    year: Number(dateTimeSpecification.slice(0, 4)),
    month: Number(dateTimeSpecification.slice(5, 7)) - 1,
    date: Number(dateTimeSpecification.slice(8, 10)),
    hours: hours !== "" ? Number(hours) : void 0,
    minutes: minutes !== "" ? Number(minutes) : void 0
  };
};
var toLocalizedMonth = (date, locale) => {
  return date.toLocaleString(locale, { month: "long" });
};
var toLocalizedDateString = (date, locale) => {
  return date.toLocaleString(locale, {
    month: "numeric",
    day: "numeric",
    year: "numeric"
  });
};
var getOneLetterDayNames = (week, locale) => {
  return week.map((date) => {
    return date.toLocaleString(locale, { weekday: "short" }).charAt(0);
  });
};
var getDayNameShort = (date, locale) => date.toLocaleString(locale, { weekday: "short" });
var getDayNamesShort = (week, locale) => {
  return week.map((date) => getDayNameShort(date, locale));
};
var getOneLetterOrShortDayNames = (week, locale) => {
  if (["zh-cn", "zh-tw", "ca-es"].includes(locale.toLowerCase())) {
    return getDayNamesShort(week, locale);
  }
  return getOneLetterDayNames(week, locale);
};
var img = "data:image/svg+xml,%3c%3fxml version='1.0' encoding='utf-8'%3f%3e%3c!-- Uploaded to: SVG Repo%2c www.svgrepo.com%2c Generator: SVG Repo Mixer Tools --%3e%3csvg width='800px' height='800px' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M6 9L12 15L18 9' stroke='%23DED8E1' stroke-width='4' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e";
var randomStringId = () => "s" + Math.random().toString(36).substring(2, 11);
var isKeyEnterOrSpace = (keyboardEvent) => keyboardEvent.key === "Enter" || keyboardEvent.key === " ";
function AppInput() {
  const datePickerInputId = randomStringId();
  const datePickerLabelId = randomStringId();
  const inputWrapperId = randomStringId();
  const $app = x2(AppContext$1);
  const getLocalizedDate2 = (dateString) => {
    if (dateString === "")
      return $app.translate("MM/DD/YYYY");
    return toLocalizedDateString(toJSDate(dateString), $app.config.locale.value);
  };
  y2(() => {
    $app.datePickerState.inputDisplayedValue.value = getLocalizedDate2($app.datePickerState.selectedDate.value);
  }, [$app.datePickerState.selectedDate.value, $app.config.locale.value]);
  const [wrapperClasses, setWrapperClasses] = d2([]);
  const setInputElement = () => {
    const inputWrapperEl = document.getElementById(inputWrapperId);
    $app.datePickerState.inputWrapperElement.value = inputWrapperEl instanceof HTMLDivElement ? inputWrapperEl : void 0;
  };
  y2(() => {
    if ($app.config.teleportTo)
      setInputElement();
    const newClasses = ["sx__date-input-wrapper"];
    if ($app.datePickerState.isOpen.value)
      newClasses.push("sx__date-input--active");
    setWrapperClasses(newClasses);
  }, [$app.datePickerState.isOpen.value]);
  const handleKeyUp = (event) => {
    if (event.key === "Enter")
      handleInputValue(event);
  };
  const handleInputValue = (event) => {
    event.stopPropagation();
    try {
      $app.datePickerState.inputDisplayedValue.value = event.target.value;
      $app.datePickerState.close();
    } catch (e4) {
      console.log("Error setting input value:" + e4);
    }
  };
  y2(() => {
    const inputElement = document.getElementById(datePickerInputId);
    if (inputElement === null)
      return;
    inputElement.addEventListener("change", handleInputValue);
    return () => inputElement.removeEventListener("change", handleInputValue);
  });
  const handleClick = (event) => {
    handleInputValue(event);
    $app.datePickerState.open();
  };
  const handleButtonKeyDown = (keyboardEvent) => {
    if (isKeyEnterOrSpace(keyboardEvent)) {
      keyboardEvent.preventDefault();
      $app.datePickerState.open();
      setTimeout(() => {
        const element = document.querySelector('[data-focus="true"]');
        if (element instanceof HTMLElement)
          element.focus();
      }, 50);
    }
  };
  return u2(k, { children: u2("div", { className: wrapperClasses.join(" "), id: inputWrapperId, children: [u2("label", { for: datePickerInputId, id: datePickerLabelId, className: "sx__date-input-label", children: $app.config.label || $app.translate("Date") }), u2("input", { id: datePickerInputId, tabIndex: $app.datePickerState.isDisabled.value ? -1 : 0, name: $app.config.name || "date", "aria-describedby": datePickerLabelId, value: $app.datePickerState.inputDisplayedValue.value, "data-testid": "date-picker-input", className: "sx__date-input", onClick: handleClick, onKeyUp: handleKeyUp, type: "text" }), u2("button", { type: "button", tabIndex: $app.datePickerState.isDisabled.value ? -1 : 0, "aria-label": $app.translate("Choose Date"), onKeyDown: handleButtonKeyDown, onClick: () => $app.datePickerState.open(), className: "sx__date-input-chevron-wrapper", children: u2("img", { className: "sx__date-input-chevron", src: img, alt: "" }) })] }) });
}
var DatePickerView;
(function(DatePickerView2) {
  DatePickerView2["MONTH_DAYS"] = "month-days";
  DatePickerView2["YEARS"] = "years";
})(DatePickerView || (DatePickerView = {}));
var YEARS_VIEW = "years-view";
var MONTH_VIEW = "months-view";
var DATE_PICKER_WEEK = "date-picker-week";
var NumberRangeError = class extends Error {
  constructor(min, max) {
    super(`Number must be between ${min} and ${max}.`);
    Object.defineProperty(this, "min", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: min
    });
    Object.defineProperty(this, "max", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: max
    });
  }
};
var doubleDigit = (number) => {
  if (number < 0 || number > 99)
    throw new NumberRangeError(0, 99);
  return String(number).padStart(2, "0");
};
var toDateString$1 = (date) => {
  return `${date.getFullYear()}-${doubleDigit(date.getMonth() + 1)}-${doubleDigit(date.getDate())}`;
};
var toTimeString = (date) => {
  return `${doubleDigit(date.getHours())}:${doubleDigit(date.getMinutes())}`;
};
var toDateTimeString = (date) => {
  return `${toDateString$1(date)} ${toTimeString(date)}`;
};
var addMonths = (to, nMonths) => {
  const { year, month, date, hours, minutes } = toIntegers(to);
  const isDateTimeString = hours !== void 0 && minutes !== void 0;
  const jsDate = new Date(year, month, date, hours !== null && hours !== void 0 ? hours : 0, minutes !== null && minutes !== void 0 ? minutes : 0);
  let expectedMonth = (jsDate.getMonth() + nMonths) % 12;
  if (expectedMonth < 0)
    expectedMonth += 12;
  jsDate.setMonth(jsDate.getMonth() + nMonths);
  if (jsDate.getMonth() > expectedMonth) {
    jsDate.setDate(0);
  } else if (jsDate.getMonth() < expectedMonth) {
    jsDate.setMonth(jsDate.getMonth() + 1);
    jsDate.setDate(0);
  }
  if (isDateTimeString) {
    return toDateTimeString(jsDate);
  }
  return toDateString$1(jsDate);
};
var addDays = (to, nDays) => {
  const { year, month, date, hours, minutes } = toIntegers(to);
  const isDateTimeString = hours !== void 0 && minutes !== void 0;
  const jsDate = new Date(year, month, date, hours !== null && hours !== void 0 ? hours : 0, minutes !== null && minutes !== void 0 ? minutes : 0);
  jsDate.setDate(jsDate.getDate() + nDays);
  if (isDateTimeString) {
    return toDateTimeString(jsDate);
  }
  return toDateString$1(jsDate);
};
var dateFromDateTime = (dateTime) => {
  return dateTime.slice(0, 10);
};
var timeFromDateTime = (dateTime) => {
  return dateTime.slice(11);
};
var setDateOfMonth = (dateString, date) => {
  dateString = dateString.slice(0, 8) + doubleDigit(date) + dateString.slice(10);
  return dateString;
};
var getFirstDayOPreviousMonth = (dateString) => {
  dateString = addMonths(dateString, -1);
  return setDateOfMonth(dateString, 1);
};
var getFirstDayOfNextMonth = (dateString) => {
  dateString = addMonths(dateString, 1);
  return setDateOfMonth(dateString, 1);
};
var setTimeInDateTimeString = (dateTimeString, newTime) => {
  const dateCache = toDateString$1(toJSDate(dateTimeString));
  return `${dateCache} ${newTime}`;
};
function Chevron({ direction, onClick, buttonText, disabled = false }) {
  const handleKeyDown = (keyboardEvent) => {
    if (isKeyEnterOrSpace(keyboardEvent))
      onClick();
  };
  return u2("button", { type: "button", disabled, className: "sx__chevron-wrapper sx__ripple", onMouseUp: onClick, onKeyDown: handleKeyDown, tabIndex: 0, children: u2("i", { className: `sx__chevron sx__chevron--${direction}`, children: buttonText }) });
}
function MonthViewHeader({ setYearsView }) {
  const $app = x2(AppContext$1);
  const dateStringToLocalizedMonthName = (selectedDate) => {
    const selectedDateJS = toJSDate(selectedDate);
    return toLocalizedMonth(selectedDateJS, $app.config.locale.value);
  };
  const getYearFrom = (datePickerDate) => {
    return toIntegers(datePickerDate).year;
  };
  const [selectedDateMonthName, setSelectedDateMonthName] = d2(dateStringToLocalizedMonthName($app.datePickerState.datePickerDate.value));
  const [datePickerYear, setDatePickerYear] = d2(getYearFrom($app.datePickerState.datePickerDate.value));
  const setPreviousMonth = () => {
    $app.datePickerState.datePickerDate.value = getFirstDayOPreviousMonth($app.datePickerState.datePickerDate.value);
  };
  const setNextMonth = () => {
    $app.datePickerState.datePickerDate.value = getFirstDayOfNextMonth($app.datePickerState.datePickerDate.value);
  };
  y2(() => {
    setSelectedDateMonthName(dateStringToLocalizedMonthName($app.datePickerState.datePickerDate.value));
    setDatePickerYear(getYearFrom($app.datePickerState.datePickerDate.value));
  }, [$app.datePickerState.datePickerDate.value]);
  const handleOpenYearsView = (e4) => {
    e4.stopPropagation();
    setYearsView();
  };
  return u2(k, { children: u2("header", { className: "sx__date-picker__month-view-header", children: [u2(Chevron, { direction: "previous", onClick: () => setPreviousMonth(), buttonText: $app.translate("Previous month") }), u2("button", { type: "button", className: "sx__date-picker__month-view-header__month-year", onClick: (event) => handleOpenYearsView(event), children: selectedDateMonthName + " " + datePickerYear }), u2(Chevron, { direction: "next", onClick: () => setNextMonth(), buttonText: $app.translate("Next month") })] }) });
}
function DayNames() {
  const $app = x2(AppContext$1);
  const aWeek = $app.timeUnitsImpl.getWeekFor(toJSDate($app.datePickerState.datePickerDate.value));
  const dayNames = getOneLetterOrShortDayNames(aWeek, $app.config.locale.value);
  return u2("div", { className: "sx__date-picker__day-names", children: dayNames.map((dayName) => u2("span", { "data-testid": "day-name", className: "sx__date-picker__day-name", children: dayName })) });
}
var isToday = (date) => {
  const today = /* @__PURE__ */ new Date();
  return date.getDate() === today.getDate() && date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear();
};
var isSameMonth = (date1, date2) => {
  return date1.getMonth() === date2.getMonth() && date1.getFullYear() === date2.getFullYear();
};
function TimeIcon({ strokeColor }) {
  return u2(k, { children: u2("svg", { className: "sx__event-icon", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [u2("g", { id: "SVGRepo_bgCarrier", "stroke-width": "0" }), u2("g", { id: "SVGRepo_tracerCarrier", "stroke-linecap": "round", "stroke-linejoin": "round" }), u2("g", { id: "SVGRepo_iconCarrier", children: [u2("path", { d: "M12 8V12L15 15", stroke: strokeColor, "stroke-width": "2", "stroke-linecap": "round" }), u2("circle", { cx: "12", cy: "12", r: "9", stroke: strokeColor, "stroke-width": "2" })] })] }) });
}
function UserIcon({ strokeColor }) {
  return u2(k, { children: u2("svg", { className: "sx__event-icon", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [u2("g", { id: "SVGRepo_bgCarrier", "stroke-width": "0" }), u2("g", { id: "SVGRepo_tracerCarrier", "stroke-linecap": "round", "stroke-linejoin": "round" }), u2("g", { id: "SVGRepo_iconCarrier", children: [u2("path", { d: "M15 7C15 8.65685 13.6569 10 12 10C10.3431 10 9 8.65685 9 7C9 5.34315 10.3431 4 12 4C13.6569 4 15 5.34315 15 7Z", stroke: strokeColor, "stroke-width": "2" }), u2("path", { d: "M5 19.5C5 15.9101 7.91015 13 11.5 13H12.5C16.0899 13 19 15.9101 19 19.5V20C19 20.5523 18.5523 21 18 21H6C5.44772 21 5 20.5523 5 20V19.5Z", stroke: strokeColor, "stroke-width": "2" })] })] }) });
}
function LocationPinIcon({ strokeColor }) {
  return u2(k, { children: u2("svg", { className: "sx__event-icon", viewBox: "0 0 24 24", fill: "none", xmlns: "http://www.w3.org/2000/svg", children: [u2("g", { id: "SVGRepo_bgCarrier", "stroke-width": "0" }), u2("g", { id: "SVGRepo_tracerCarrier", "stroke-linecap": "round", "stroke-linejoin": "round" }), u2("g", { id: "SVGRepo_iconCarrier", children: [u2("g", { "clip-path": "url(#clip0_429_11046)", children: [u2("rect", { x: "12", y: "11", width: "0.01", height: "0.01", stroke: strokeColor, "stroke-width": "2", "stroke-linejoin": "round" }), u2("path", { d: "M12 22L17.5 16.5C20.5376 13.4624 20.5376 8.53757 17.5 5.5C14.4624 2.46244 9.53757 2.46244 6.5 5.5C3.46244 8.53757 3.46244 13.4624 6.5 16.5L12 22Z", stroke: strokeColor, "stroke-width": "2", "stroke-linejoin": "round" })] }), u2("defs", { children: u2("clipPath", { id: "clip0_429_11046", children: u2("rect", { width: "24", height: "24", fill: "white" }) }) })] })] }) });
}
var timeStringRegex = /^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
var dateTimeStringRegex = /^(\d{4})-(\d{2})-(\d{2}) (0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;
var dateStringRegex = /^(\d{4})-(\d{2})-(\d{2})$/;
var InvalidTimeStringError = class extends Error {
  constructor(timeString) {
    super(`Invalid time string: ${timeString}`);
  }
};
var minuteTimePointMultiplier = 1.6666666666666667;
var timePointsFromString = (timeString) => {
  if (!timeStringRegex.test(timeString) && timeString !== "24:00")
    throw new InvalidTimeStringError(timeString);
  const [hoursInt, minutesInt] = timeString.split(":").map((time) => parseInt(time, 10));
  let minutePoints = (minutesInt * minuteTimePointMultiplier).toString();
  if (minutePoints.split(".")[0].length < 2)
    minutePoints = `0${minutePoints}`;
  return Number(hoursInt + minutePoints);
};
var timeStringFromTimePoints = (timePoints) => {
  const hours = Math.floor(timePoints / 100);
  const minutes = Math.round(timePoints % 100 / minuteTimePointMultiplier);
  return `${doubleDigit(hours)}:${doubleDigit(minutes)}`;
};
var addTimePointsToDateTime = (dateTimeString, pointsToAdd) => {
  const minutesToAdd = pointsToAdd / minuteTimePointMultiplier;
  const jsDate = toJSDate(dateTimeString);
  jsDate.setMinutes(jsDate.getMinutes() + minutesToAdd);
  return toDateTimeString(jsDate);
};
var WeekDay;
(function(WeekDay2) {
  WeekDay2[WeekDay2["SUNDAY"] = 0] = "SUNDAY";
  WeekDay2[WeekDay2["MONDAY"] = 1] = "MONDAY";
  WeekDay2[WeekDay2["TUESDAY"] = 2] = "TUESDAY";
  WeekDay2[WeekDay2["WEDNESDAY"] = 3] = "WEDNESDAY";
  WeekDay2[WeekDay2["THURSDAY"] = 4] = "THURSDAY";
  WeekDay2[WeekDay2["FRIDAY"] = 5] = "FRIDAY";
  WeekDay2[WeekDay2["SATURDAY"] = 6] = "SATURDAY";
})(WeekDay || (WeekDay = {}));
var DEFAULT_LOCALE = "en-US";
var DEFAULT_FIRST_DAY_OF_WEEK = WeekDay.MONDAY;
var DEFAULT_EVENT_COLOR_NAME = "primary";
var CalendarEventImpl = class {
  constructor(_config, id, start, end, title, people, location, description, calendarId, _options = void 0, _customContent = {}, _foreignProperties = {}) {
    Object.defineProperty(this, "_config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _config
    });
    Object.defineProperty(this, "id", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: id
    });
    Object.defineProperty(this, "start", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: start
    });
    Object.defineProperty(this, "end", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: end
    });
    Object.defineProperty(this, "title", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: title
    });
    Object.defineProperty(this, "people", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: people
    });
    Object.defineProperty(this, "location", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: location
    });
    Object.defineProperty(this, "description", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: description
    });
    Object.defineProperty(this, "calendarId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: calendarId
    });
    Object.defineProperty(this, "_options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _options
    });
    Object.defineProperty(this, "_customContent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _customContent
    });
    Object.defineProperty(this, "_foreignProperties", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _foreignProperties
    });
    Object.defineProperty(this, "_previousConcurrentEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_totalConcurrentEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_maxConcurrentEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_nDaysInGrid", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_eventFragments", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
  }
  get _isSingleDayTimed() {
    return dateTimeStringRegex.test(this.start) && dateTimeStringRegex.test(this.end) && dateFromDateTime(this.start) === dateFromDateTime(this.end);
  }
  get _isSingleDayFullDay() {
    return dateStringRegex.test(this.start) && dateStringRegex.test(this.end) && this.start === this.end;
  }
  get _isMultiDayTimed() {
    return dateTimeStringRegex.test(this.start) && dateTimeStringRegex.test(this.end) && dateFromDateTime(this.start) !== dateFromDateTime(this.end);
  }
  get _isMultiDayFullDay() {
    return dateStringRegex.test(this.start) && dateStringRegex.test(this.end) && this.start !== this.end;
  }
  get _isSingleHybridDayTimed() {
    if (!this._config.isHybridDay)
      return false;
    if (!dateTimeStringRegex.test(this.start) || !dateTimeStringRegex.test(this.end))
      return false;
    const startDate = dateFromDateTime(this.start);
    const endDate = dateFromDateTime(this.end);
    const endDateMinusOneDay = toDateString$1(new Date(toJSDate(endDate).getTime() - 864e5));
    if (startDate !== endDate && startDate !== endDateMinusOneDay)
      return false;
    const dayBoundaries = this._config.dayBoundaries.value;
    const eventStartTimePoints = timePointsFromString(timeFromDateTime(this.start));
    const eventEndTimePoints = timePointsFromString(timeFromDateTime(this.end));
    return eventStartTimePoints >= dayBoundaries.start && (eventEndTimePoints <= dayBoundaries.end || eventEndTimePoints > eventStartTimePoints) || eventStartTimePoints < dayBoundaries.end && eventEndTimePoints <= dayBoundaries.end;
  }
  get _color() {
    if (this.calendarId && this._config.calendars.value && this.calendarId in this._config.calendars.value) {
      return this._config.calendars.value[this.calendarId].colorName;
    }
    return DEFAULT_EVENT_COLOR_NAME;
  }
  _getForeignProperties() {
    return this._foreignProperties;
  }
  _getExternalEvent() {
    return {
      id: this.id,
      start: this.start,
      end: this.end,
      title: this.title,
      people: this.people,
      location: this.location,
      description: this.description,
      calendarId: this.calendarId,
      _options: this._options,
      ...this._getForeignProperties()
    };
  }
};
var CalendarEventBuilder = class {
  constructor(_config, id, start, end) {
    Object.defineProperty(this, "_config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _config
    });
    Object.defineProperty(this, "id", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: id
    });
    Object.defineProperty(this, "start", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: start
    });
    Object.defineProperty(this, "end", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: end
    });
    Object.defineProperty(this, "people", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "location", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "description", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "title", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "calendarId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_foreignProperties", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "_options", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "_customContent", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
  }
  build() {
    return new CalendarEventImpl(this._config, this.id, this.start, this.end, this.title, this.people, this.location, this.description, this.calendarId, this._options, this._customContent, this._foreignProperties);
  }
  withTitle(title) {
    this.title = title;
    return this;
  }
  withPeople(people) {
    this.people = people;
    return this;
  }
  withLocation(location) {
    this.location = location;
    return this;
  }
  withDescription(description) {
    this.description = description;
    return this;
  }
  withForeignProperties(foreignProperties) {
    this._foreignProperties = foreignProperties;
    return this;
  }
  withCalendarId(calendarId) {
    this.calendarId = calendarId;
    return this;
  }
  withOptions(options) {
    this._options = options;
    return this;
  }
  withCustomContent(customContent) {
    this._customContent = customContent;
    return this;
  }
};
var deepCloneEvent = (calendarEvent, $app) => {
  const calendarEventInternal = new CalendarEventBuilder($app.config, calendarEvent.id, calendarEvent.start, calendarEvent.end).withTitle(calendarEvent.title).withPeople(calendarEvent.people).withCalendarId(calendarEvent.calendarId).withForeignProperties(JSON.parse(JSON.stringify(calendarEvent._getForeignProperties()))).withLocation(calendarEvent.location).withDescription(calendarEvent.description).withOptions(calendarEvent._options).withCustomContent(calendarEvent._customContent).build();
  calendarEventInternal._nDaysInGrid = calendarEvent._nDaysInGrid;
  return calendarEventInternal;
};
var concatenatePeople = (people) => {
  return people.reduce((acc, person, index) => {
    if (index === 0)
      return person;
    if (index === people.length - 1)
      return `${acc} & ${person}`;
    return `${acc}, ${person}`;
  }, "");
};
var dateFn = (dateTimeString, locale) => {
  const { year, month, date } = toIntegers(dateTimeString);
  return new Date(year, month, date).toLocaleDateString(locale, {
    day: "numeric",
    month: "long",
    year: "numeric"
  });
};
var getLocalizedDate = dateFn;
var timeFn = (dateTimeString, locale) => {
  const { year, month, date, hours, minutes } = toIntegers(dateTimeString);
  return new Date(year, month, date, hours, minutes).toLocaleTimeString(locale, {
    hour: "numeric",
    minute: "numeric"
  });
};
var getTimeStamp = (calendarEvent, locale, delimiter = "–") => {
  const eventTime = { start: calendarEvent.start, end: calendarEvent.end };
  if (calendarEvent._isSingleDayFullDay) {
    return dateFn(eventTime.start, locale);
  }
  if (calendarEvent._isMultiDayFullDay) {
    return `${dateFn(eventTime.start, locale)} ${delimiter} ${dateFn(eventTime.end, locale)}`;
  }
  if (calendarEvent._isSingleDayTimed && eventTime.start !== eventTime.end) {
    return `${dateFn(eventTime.start, locale)} <span aria-hidden="true">⋅</span> ${timeFn(eventTime.start, locale)} ${delimiter} ${timeFn(eventTime.end, locale)}`;
  }
  if (calendarEvent._isSingleDayTimed && calendarEvent.start === calendarEvent.end) {
    return `${dateFn(eventTime.start, locale)}, ${timeFn(eventTime.start, locale)}`;
  }
  return `${dateFn(eventTime.start, locale)}, ${timeFn(eventTime.start, locale)} ${delimiter} ${dateFn(eventTime.end, locale)}, ${timeFn(eventTime.end, locale)}`;
};
function MonthViewWeek({ week }) {
  const $app = x2(AppContext$1);
  const weekDays = week.map((day) => {
    const classes = ["sx__date-picker__day"];
    if (isToday(day))
      classes.push("sx__date-picker__day--today");
    if (toDateString$1(day) === $app.datePickerState.selectedDate.value)
      classes.push("sx__date-picker__day--selected");
    if (!isSameMonth(day, toJSDate($app.datePickerState.datePickerDate.value)))
      classes.push("is-leading-or-trailing");
    return {
      day,
      classes
    };
  });
  const isDateSelectable = (date) => {
    const dateString = toDateString$1(date);
    return dateString >= $app.config.min && dateString <= $app.config.max;
  };
  const selectDate = (date) => {
    $app.datePickerState.selectedDate.value = toDateString$1(date);
    $app.datePickerState.close();
  };
  const hasFocus = (weekDay) => toDateString$1(weekDay.day) === $app.datePickerState.datePickerDate.value;
  const handleKeyDown = (event) => {
    if (event.key === "Enter") {
      $app.datePickerState.selectedDate.value = $app.datePickerState.datePickerDate.value;
      $app.datePickerState.close();
      return;
    }
    const keyMapDaysToAdd = /* @__PURE__ */ new Map([
      ["ArrowDown", 7],
      ["ArrowUp", -7],
      ["ArrowLeft", -1],
      ["ArrowRight", 1]
    ]);
    $app.datePickerState.datePickerDate.value = addDays($app.datePickerState.datePickerDate.value, keyMapDaysToAdd.get(event.key) || 0);
  };
  return u2(k, { children: u2("div", { "data-testid": DATE_PICKER_WEEK, className: "sx__date-picker__week", children: weekDays.map((weekDay) => u2("button", { type: "button", tabIndex: hasFocus(weekDay) ? 0 : -1, disabled: !isDateSelectable(weekDay.day), "aria-label": getLocalizedDate($app.datePickerState.datePickerDate.value, $app.config.locale.value), className: weekDay.classes.join(" "), "data-focus": hasFocus(weekDay) ? "true" : void 0, onClick: () => selectDate(weekDay.day), onKeyDown: handleKeyDown, children: weekDay.day.getDate() })) }) });
}
function MonthView({ seatYearsView }) {
  const elementId = randomStringId();
  const $app = x2(AppContext$1);
  const [month, setMonth] = d2([]);
  const renderMonth = () => {
    const newDatePickerDate = toJSDate($app.datePickerState.datePickerDate.value);
    setMonth($app.timeUnitsImpl.getMonthWithTrailingAndLeadingDays(newDatePickerDate.getFullYear(), newDatePickerDate.getMonth()));
  };
  y2(() => {
    renderMonth();
  }, [$app.datePickerState.datePickerDate.value]);
  y2(() => {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        const mutatedElement = mutation.target;
        if (mutatedElement.dataset.focus === "true")
          mutatedElement.focus();
      });
    });
    const monthViewElement = document.getElementById(elementId);
    observer.observe(monthViewElement, {
      childList: true,
      subtree: true,
      attributes: true
    });
    return () => observer.disconnect();
  }, []);
  return u2(k, { children: u2("div", { id: elementId, "data-testid": MONTH_VIEW, className: "sx__date-picker__month-view", children: [u2(MonthViewHeader, { setYearsView: seatYearsView }), u2(DayNames, {}), month.map((week) => u2(MonthViewWeek, { week }))] }) });
}
function YearsViewAccordion({ year, setYearAndMonth, isExpanded, expand }) {
  const $app = x2(AppContext$1);
  const yearWithDates = $app.timeUnitsImpl.getMonthsFor(year);
  const handleClickOnMonth = (event, month) => {
    event.stopPropagation();
    setYearAndMonth(year, month.getMonth());
  };
  return u2(k, { children: u2("li", { className: isExpanded ? "sx__is-expanded" : "", children: [u2("button", { type: "button", className: "sx__date-picker__years-accordion__expand-button sx__ripple--wide", onClick: () => expand(year), children: year }), isExpanded && u2("div", { className: "sx__date-picker__years-view-accordion__panel", children: yearWithDates.map((month) => u2("button", { type: "button", className: "sx__date-picker__years-view-accordion__month", onClick: (event) => handleClickOnMonth(event, month), children: toLocalizedMonth(month, $app.config.locale.value) })) })] }) });
}
function YearsView({ setMonthView }) {
  const $app = x2(AppContext$1);
  const minYear = toJSDate($app.config.min).getFullYear();
  const maxYear = toJSDate($app.config.max).getFullYear();
  const years = Array.from({ length: maxYear - minYear + 1 }, (_4, i5) => minYear + i5);
  const { year: selectedYear } = toIntegers($app.datePickerState.selectedDate.value);
  const [expandedYear, setExpandedYear] = d2(selectedYear);
  const setNewDatePickerDate = (year, month) => {
    $app.datePickerState.datePickerDate.value = toDateString$1(new Date(year, month, 1));
    setMonthView();
  };
  y2(() => {
    var _a;
    const initiallyExpandedYear = (_a = document.querySelector(".sx__date-picker__years-view")) === null || _a === void 0 ? void 0 : _a.querySelector(".sx__is-expanded");
    if (!initiallyExpandedYear)
      return;
    initiallyExpandedYear.scrollIntoView({
      block: "center"
    });
  }, []);
  return u2(k, { children: u2("ul", { className: "sx__date-picker__years-view", "data-testid": YEARS_VIEW, children: years.map((year) => u2(YearsViewAccordion, { year, setYearAndMonth: (year2, month) => setNewDatePickerDate(year2, month), isExpanded: expandedYear === year, expand: (year2) => setExpandedYear(year2) })) }) });
}
var isScrollable = (el) => {
  if (el) {
    const hasScrollableContent = el.scrollHeight > el.clientHeight;
    const overflowYStyle = window.getComputedStyle(el).overflowY;
    const isOverflowHidden = overflowYStyle.indexOf("hidden") !== -1;
    return hasScrollableContent && !isOverflowHidden;
  }
  return true;
};
var getScrollableParents = (el, acc = []) => {
  if (!el || el === document.body || el.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
    acc.push(window);
    return acc;
  }
  if (isScrollable(el)) {
    acc.push(el);
  }
  return getScrollableParents(el.assignedSlot ? el.assignedSlot.parentNode : el.parentNode, acc);
};
var POPUP_CLASS_NAME = "sx__date-picker-popup";
function AppPopup() {
  const $app = x2(AppContext$1);
  const [datePickerView, setDatePickerView] = d2(DatePickerView.MONTH_DAYS);
  const basePopupClasses = [POPUP_CLASS_NAME, $app.config.placement];
  const [classList, setClassList] = d2(basePopupClasses);
  y2(() => {
    setClassList([
      ...basePopupClasses,
      $app.datePickerState.isDark.value ? "is-dark" : "",
      $app.config.teleportTo ? "is-teleported" : ""
    ]);
  }, [$app.datePickerState.isDark.value]);
  const clickOutsideListener = (event) => {
    const target = event.target;
    if (!target.closest(`.${POPUP_CLASS_NAME}`))
      $app.datePickerState.close();
  };
  const escapeKeyListener = (e4) => {
    if (e4.key === "Escape") {
      if ($app.config.listeners.onEscapeKeyDown)
        $app.config.listeners.onEscapeKeyDown($app);
      else
        $app.datePickerState.close();
    }
  };
  y2(() => {
    document.addEventListener("click", clickOutsideListener);
    document.addEventListener("keydown", escapeKeyListener);
    return () => {
      document.removeEventListener("click", clickOutsideListener);
      document.removeEventListener("keydown", escapeKeyListener);
    };
  }, []);
  const remSize = Number(getComputedStyle(document.documentElement).fontSize.split("px")[0]);
  const popupHeight = 362;
  const popupWidth = 332;
  const getFixedPositionStyles = () => {
    const inputWrapperEl = $app.datePickerState.inputWrapperElement.value;
    const inputRect = inputWrapperEl === null || inputWrapperEl === void 0 ? void 0 : inputWrapperEl.getBoundingClientRect();
    if (inputWrapperEl === void 0 || !(inputRect instanceof DOMRect))
      return void 0;
    return {
      top: $app.config.placement.includes("bottom") ? inputRect.height + inputRect.y + 1 : inputRect.y - remSize - popupHeight,
      // subtract remsize to leave room for label text
      left: $app.config.placement.includes("start") ? inputRect.x : inputRect.x + inputRect.width - popupWidth,
      width: popupWidth,
      position: "fixed"
    };
  };
  const [fixedPositionStyle, setFixedPositionStyle] = d2(getFixedPositionStyles());
  y2(() => {
    const inputWrapper = $app.datePickerState.inputWrapperElement.value;
    if (inputWrapper === void 0)
      return;
    const scrollableParents = getScrollableParents(inputWrapper);
    const scrollListener = () => setFixedPositionStyle(getFixedPositionStyles());
    scrollableParents.forEach((parent) => parent.addEventListener("scroll", scrollListener));
    return () => scrollableParents.forEach((parent) => parent.removeEventListener("scroll", scrollListener));
  }, []);
  return u2(k, { children: u2("div", { style: $app.config.teleportTo ? fixedPositionStyle : void 0, "data-testid": "date-picker-popup", className: classList.join(" "), children: datePickerView === DatePickerView.MONTH_DAYS ? u2(MonthView, { seatYearsView: () => setDatePickerView(DatePickerView.YEARS) }) : u2(YearsView, { setMonthView: () => setDatePickerView(DatePickerView.MONTH_DAYS) }) }) });
}
function AppWrapper({ $app }) {
  const initialClassList = ["sx__date-picker-wrapper"];
  const [classList, setClassList] = d2(initialClassList);
  y2(() => {
    var _a;
    const list = [...initialClassList];
    if ($app.datePickerState.isDark.value)
      list.push("is-dark");
    if ((_a = $app.config.style) === null || _a === void 0 ? void 0 : _a.fullWidth)
      list.push("has-full-width");
    if ($app.datePickerState.isDisabled.value)
      list.push("is-disabled");
    setClassList(list);
  }, [$app.datePickerState.isDark.value, $app.datePickerState.isDisabled.value]);
  let appPopupJSX = u2(AppPopup, {});
  if ($app.config.teleportTo)
    appPopupJSX = $2(appPopupJSX, $app.config.teleportTo);
  return u2(k, { children: u2("div", { className: classList.join(" "), children: u2(AppContext$1.Provider, { value: $app, children: [u2(AppInput, {}), $app.datePickerState.isOpen.value && appPopupJSX] }) }) });
}
var AppContext = K({});
var DatePickerAppSingletonImpl = class {
  constructor(datePickerState, config2, timeUnitsImpl, translate2) {
    Object.defineProperty(this, "datePickerState", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: datePickerState
    });
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: config2
    });
    Object.defineProperty(this, "timeUnitsImpl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: timeUnitsImpl
    });
    Object.defineProperty(this, "translate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: translate2
    });
  }
};
var DatePickerAppSingletonBuilder = class {
  constructor() {
    Object.defineProperty(this, "datePickerState", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "timeUnitsImpl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "translate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
  }
  build() {
    return new DatePickerAppSingletonImpl(this.datePickerState, this.config, this.timeUnitsImpl, this.translate);
  }
  withDatePickerState(datePickerState) {
    this.datePickerState = datePickerState;
    return this;
  }
  withConfig(config2) {
    this.config = config2;
    return this;
  }
  withTimeUnitsImpl(timeUnitsImpl) {
    this.timeUnitsImpl = timeUnitsImpl;
    return this;
  }
  withTranslate(translate2) {
    this.translate = translate2;
    return this;
  }
};
var InternalViewName;
(function(InternalViewName2) {
  InternalViewName2["Day"] = "day";
  InternalViewName2["Week"] = "week";
  InternalViewName2["MonthGrid"] = "month-grid";
  InternalViewName2["MonthAgenda"] = "month-agenda";
})(InternalViewName || (InternalViewName = {}));
var getLocaleStringMonthArgs = ($app) => {
  return [$app.config.locale.value, { month: "long" }];
};
var getLocaleStringYearArgs = ($app) => {
  return [$app.config.locale.value, { year: "numeric" }];
};
var getMonthAndYearForDateRange = ($app, rangeStart, rangeEnd) => {
  const startDateMonth = toJSDate(rangeStart).toLocaleString(...getLocaleStringMonthArgs($app));
  const startDateYear = toJSDate(rangeStart).toLocaleString(...getLocaleStringYearArgs($app));
  const endDateMonth = toJSDate(rangeEnd).toLocaleString(...getLocaleStringMonthArgs($app));
  const endDateYear = toJSDate(rangeEnd).toLocaleString(...getLocaleStringYearArgs($app));
  if (startDateMonth === endDateMonth && startDateYear === endDateYear) {
    return `${startDateMonth} ${startDateYear}`;
  } else if (startDateMonth !== endDateMonth && startDateYear === endDateYear) {
    return `${startDateMonth} – ${endDateMonth} ${startDateYear}`;
  }
  return `${startDateMonth} ${startDateYear} – ${endDateMonth} ${endDateYear}`;
};
var getMonthAndYearForSelectedDate = ($app) => {
  const dateMonth = toJSDate($app.datePickerState.selectedDate.value).toLocaleString(...getLocaleStringMonthArgs($app));
  const dateYear = toJSDate($app.datePickerState.selectedDate.value).toLocaleString(...getLocaleStringYearArgs($app));
  return `${dateMonth} ${dateYear}`;
};
function RangeHeading() {
  const $app = x2(AppContext);
  const [currentHeading, setCurrentHeading] = d2("");
  y2(() => {
    if ($app.calendarState.view.value === InternalViewName.Week) {
      setCurrentHeading(getMonthAndYearForDateRange($app, $app.calendarState.range.value.start, $app.calendarState.range.value.end));
    }
    if ($app.calendarState.view.value === InternalViewName.MonthGrid || $app.calendarState.view.value === InternalViewName.Day || $app.calendarState.view.value === InternalViewName.MonthAgenda) {
      setCurrentHeading(getMonthAndYearForSelectedDate($app));
    }
  }, [$app.calendarState.range.value]);
  return u2("span", { className: "sx__range-heading", children: currentHeading });
}
function TodayButton() {
  const $app = x2(AppContext);
  const setToday = () => {
    $app.datePickerState.selectedDate.value = toDateString$1(/* @__PURE__ */ new Date());
  };
  return u2("button", { type: "button", className: "sx__today-button sx__ripple", onClick: setToday, children: $app.translate("Today") });
}
function ViewSelection() {
  const $app = x2(AppContext);
  const [availableViews, setAvailableViews] = d2([]);
  useSignalEffect(() => {
    if ($app.calendarState.isCalendarSmall.value) {
      setAvailableViews($app.config.views.value.filter((view) => view.hasSmallScreenCompat));
    } else {
      setAvailableViews($app.config.views.value.filter((view) => view.hasWideScreenCompat));
    }
  });
  const [selectedViewLabel, setSelectedViewLabel] = d2("");
  useSignalEffect(() => {
    const selectedView = $app.config.views.value.find((view) => view.name === $app.calendarState.view.value);
    if (!selectedView)
      return;
    setSelectedViewLabel($app.translate(selectedView.label));
  });
  const [isOpen, setIsOpen] = d2(false);
  const clickOutsideListener = (event) => {
    const target = event.target;
    if (target instanceof HTMLElement && !target.closest(".sx__view-selection")) {
      setIsOpen(false);
    }
  };
  y2(() => {
    document.addEventListener("click", clickOutsideListener);
    return () => document.removeEventListener("click", clickOutsideListener);
  }, []);
  const handleClickOnSelectionItem = (viewName) => {
    setIsOpen(false);
    $app.calendarState.setView(viewName, $app.datePickerState.selectedDate.value);
  };
  const [viewSelectionItems, setViewSelectionItems] = d2();
  const [focusedViewIndex, setFocusedViewIndex] = d2(0);
  const handleSelectedViewKeyDown = (keyboardEvent) => {
    if (isKeyEnterOrSpace(keyboardEvent)) {
      setIsOpen(!isOpen);
    }
    setTimeout(() => {
      var _a;
      const allOptions = (_a = $app.elements.calendarWrapper) === null || _a === void 0 ? void 0 : _a.querySelectorAll(".sx__view-selection-item");
      if (!allOptions)
        return;
      setViewSelectionItems(allOptions);
      const firstOption = allOptions[0];
      if (firstOption instanceof HTMLElement) {
        setFocusedViewIndex(0);
        firstOption.focus();
      }
    }, 50);
  };
  const navigateUpOrDown = (keyboardEvent, viewName) => {
    if (!viewSelectionItems)
      return;
    if (keyboardEvent.key === "ArrowDown") {
      const nextOption = viewSelectionItems[focusedViewIndex + 1];
      if (nextOption instanceof HTMLElement) {
        setFocusedViewIndex(focusedViewIndex + 1);
        nextOption.focus();
      }
    } else if (keyboardEvent.key === "ArrowUp") {
      const prevOption = viewSelectionItems[focusedViewIndex - 1];
      if (prevOption instanceof HTMLElement) {
        setFocusedViewIndex(focusedViewIndex - 1);
        prevOption.focus();
      }
    } else if (isKeyEnterOrSpace(keyboardEvent)) {
      handleClickOnSelectionItem(viewName);
    }
  };
  return u2("div", { className: "sx__view-selection", children: [u2("div", { tabIndex: 0, role: "button", "aria-label": $app.translate("Select View"), className: "sx__view-selection-selected-item sx__ripple", onClick: () => setIsOpen(!isOpen), onKeyDown: handleSelectedViewKeyDown, children: selectedViewLabel }), isOpen && u2("ul", { "data-testid": "view-selection-items", className: "sx__view-selection-items", children: availableViews.map((view) => u2("li", { "aria-label": $app.translate("Select View") + " " + $app.translate(view.label), tabIndex: -1, role: "button", onKeyDown: (keyboardEvent) => navigateUpOrDown(keyboardEvent, view.name), onClick: () => handleClickOnSelectionItem(view.name), className: "sx__view-selection-item" + (view.name === $app.calendarState.view.value ? " is-selected" : ""), children: $app.translate(view.label) })) })] });
}
function ForwardBackwardNavigation() {
  const $app = x2(AppContext);
  const navigate = (direction) => {
    const currentView = $app.config.views.value.find((view) => view.name === $app.calendarState.view.value);
    if (!currentView)
      return;
    $app.datePickerState.selectedDate.value = currentView.backwardForwardFn($app.datePickerState.selectedDate.value, direction === "forwards" ? currentView.backwardForwardUnits : -currentView.backwardForwardUnits);
  };
  const [localizedRange, setLocalizedRange] = d2("");
  useSignalEffect(() => {
    setLocalizedRange(`${getLocalizedDate($app.calendarState.range.value.start, $app.config.locale.value)} ${$app.translate("to")} ${getLocalizedDate($app.calendarState.range.value.end, $app.config.locale.value)}`);
  });
  const [rangeEndMinusOneRange, setRangeEndMinusOneRange] = d2("");
  const [rangeStartPlusOneRange, setRangeStartPlusOneRange] = d2("");
  y2(() => {
    const selectedView = $app.config.views.value.find((view) => view.name === $app.calendarState.view.value);
    if (!selectedView)
      return;
    setRangeEndMinusOneRange(selectedView.setDateRange({
      range: $app.calendarState.range,
      calendarConfig: $app.config,
      timeUnitsImpl: $app.timeUnitsImpl,
      date: selectedView.backwardForwardFn($app.datePickerState.selectedDate.value, -selectedView.backwardForwardUnits)
    }).end);
    setRangeStartPlusOneRange(selectedView.setDateRange({
      range: $app.calendarState.range,
      calendarConfig: $app.config,
      timeUnitsImpl: $app.timeUnitsImpl,
      date: selectedView.backwardForwardFn($app.datePickerState.selectedDate.value, selectedView.backwardForwardUnits)
    }).start);
  }, [$app.datePickerState.selectedDate.value, $app.calendarState.view.value]);
  return u2(k, { children: u2("div", { className: "sx__forward-backward-navigation", "aria-label": localizedRange, "aria-live": "polite", children: [u2(Chevron, { disabled: !!($app.config.minDate.value && dateFromDateTime(rangeEndMinusOneRange) < $app.config.minDate.value), onClick: () => navigate("backwards"), direction: "previous", buttonText: $app.translate("Previous period") }), u2(Chevron, { disabled: !!($app.config.maxDate.value && dateFromDateTime(rangeStartPlusOneRange) > $app.config.maxDate.value), onClick: () => navigate("forwards"), direction: "next", buttonText: $app.translate("Next period") })] }) });
}
var getElementByCCID = (customComponentId) => document.querySelector(`[data-ccid="${customComponentId}"]`);
var PreactView = class {
  constructor(config2) {
    Object.defineProperty(this, "randomId", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: randomStringId()
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "label", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "Component", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "setDateRange", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "hasSmallScreenCompat", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "hasWideScreenCompat", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "backwardForwardFn", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "backwardForwardUnits", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.name = config2.name;
    this.label = config2.label;
    this.Component = config2.Component;
    this.setDateRange = config2.setDateRange;
    this.hasSmallScreenCompat = config2.hasSmallScreenCompat;
    this.hasWideScreenCompat = config2.hasWideScreenCompat;
    this.backwardForwardFn = config2.backwardForwardFn;
    this.backwardForwardUnits = config2.backwardForwardUnits;
  }
  render(onElement, $app) {
    E(_(this.Component, { $app, id: this.randomId }), onElement);
  }
  destroy() {
    const el = document.getElementById(this.randomId);
    if (el) {
      el.remove();
    }
  }
};
var createPreactView = (config2) => {
  return new PreactView(config2);
};
var timePointToPercentage = (timePointsInDay, dayBoundaries, timePoint) => {
  if (timePoint < dayBoundaries.start) {
    const firstDayTimePoints = 2400 - dayBoundaries.start;
    return (timePoint + firstDayTimePoints) / timePointsInDay * 100;
  }
  return (timePoint - dayBoundaries.start) / timePointsInDay * 100;
};
var getEventHeight = (start, end, dayBoundaries, pointsPerDay) => {
  if (start === end) {
    return timePointToPercentage(pointsPerDay, dayBoundaries, timePointsFromString(timeFromDateTime(addTimePointsToDateTime(end, 50)))) - timePointToPercentage(pointsPerDay, dayBoundaries, timePointsFromString(timeFromDateTime(start)));
  }
  return timePointToPercentage(pointsPerDay, dayBoundaries, timePointsFromString(timeFromDateTime(end))) - timePointToPercentage(pointsPerDay, dayBoundaries, timePointsFromString(timeFromDateTime(start)));
};
var getLeftRule = (calendarEvent, eventWidth) => {
  if (!calendarEvent._totalConcurrentEvents || !calendarEvent._previousConcurrentEvents)
    return 0;
  return (calendarEvent._previousConcurrentEvents || 0) / (calendarEvent._totalConcurrentEvents || 0) * eventWidth;
};
var getWidthRule = (leftRule, eventWidth, maxConcurrentEvents, eventOverlap) => {
  if (eventOverlap || !maxConcurrentEvents)
    return eventWidth - leftRule;
  return eventWidth / maxConcurrentEvents;
};
var getBorderRule = (calendarEvent) => {
  if (!calendarEvent._previousConcurrentEvents)
    return 0;
  return "1px solid #fff";
};
var getTimeGridEventCopyElementId = (id) => {
  return "time-grid-event-copy-" + id;
};
var isUIEventTouchEvent = (event) => {
  return "touches" in event && typeof event.touches === "object";
};
function useEventInteractions($app) {
  const [eventCopy, setEventCopy] = d2();
  const updateCopy = (newCopy) => {
    if (!newCopy)
      return setEventCopy(void 0);
    setEventCopy(deepCloneEvent(newCopy, $app));
  };
  const [dragStartTimeout, setDragStartTimeout] = d2();
  const createDragStartTimeout = (callback, uiEvent) => {
    setDragStartTimeout(setTimeout(() => callback(uiEvent), 150));
  };
  const setClickedEvent = (uiEvent, calendarEvent) => {
    if (isUIEventTouchEvent(uiEvent) && uiEvent.touches.length === 0)
      return;
    if (!$app.config.plugins.eventModal)
      return;
    const eventTarget = uiEvent.target;
    if (!(eventTarget instanceof HTMLElement))
      return;
    const calendarEventElement = eventTarget.classList.contains("sx__event") ? eventTarget : eventTarget.closest(".sx__event");
    if (calendarEventElement instanceof HTMLElement) {
      $app.config.plugins.eventModal.calendarEventElement.value = calendarEventElement;
      $app.config.plugins.eventModal.setCalendarEvent(calendarEvent, calendarEventElement.getBoundingClientRect());
    }
  };
  const setClickedEventIfNotDragging = (calendarEvent, uiEvent) => {
    if (dragStartTimeout) {
      clearTimeout(dragStartTimeout);
      setClickedEvent(uiEvent, calendarEvent);
    }
    setDragStartTimeout(void 0);
  };
  return {
    eventCopy,
    updateCopy,
    createDragStartTimeout,
    setClickedEventIfNotDragging,
    setClickedEvent
  };
}
var getCCID = (customComponent, isCopy) => {
  let customComponentId = customComponent ? "custom-time-grid-event-" + randomStringId() : void 0;
  if (customComponentId && isCopy)
    customComponentId += "-copy";
  return customComponentId;
};
var invokeOnEventClickCallback = ($app, calendarEvent, e4) => {
  if ($app.config.callbacks.onEventClick) {
    $app.config.callbacks.onEventClick(calendarEvent._getExternalEvent(), e4);
  }
};
var invokeOnEventDoubleClickCallback = ($app, calendarEvent, e4) => {
  if ($app.config.callbacks.onDoubleClickEvent) {
    $app.config.callbacks.onDoubleClickEvent(calendarEvent._getExternalEvent(), e4);
  }
};
var getEventCoordinates = (uiEvent) => {
  const actualEvent = isUIEventTouchEvent(uiEvent) ? uiEvent.touches[0] : uiEvent;
  return {
    clientX: actualEvent.clientX,
    clientY: actualEvent.clientY
  };
};
var getYCoordinateInTimeGrid = (dateTimeString, dayBoundaries, pointsPerDay) => {
  return timePointToPercentage(pointsPerDay, dayBoundaries, timePointsFromString(timeFromDateTime(dateTimeString)));
};
var nextTick = (cb) => {
  setTimeout(() => {
    cb();
  });
};
var focusModal = ($app) => {
  const calendarWrapper = $app.elements.calendarWrapper;
  if (!(calendarWrapper instanceof HTMLElement))
    return;
  const eventModal = calendarWrapper.querySelector(".sx__event-modal");
  if (!(eventModal instanceof HTMLElement))
    return;
  setTimeout(() => {
    eventModal.focus();
  }, 100);
};
function TimeGridEvent({ calendarEvent, dayBoundariesDateTime, isCopy, setMouseDown }) {
  var _a, _b, _c, _d;
  const $app = x2(AppContext);
  const { eventCopy, updateCopy, createDragStartTimeout, setClickedEventIfNotDragging, setClickedEvent } = useEventInteractions($app);
  const localizeArgs = [
    $app.config.locale.value,
    { hour: "numeric", minute: "numeric" }
  ];
  const getEventTime = (start, end) => {
    const localizedStartTime = toJSDate(start).toLocaleTimeString(...localizeArgs);
    if (start === end) {
      return localizedStartTime;
    }
    const localizedEndTime = toJSDate(end).toLocaleTimeString(...localizeArgs);
    return `${localizedStartTime} – ${localizedEndTime}`;
  };
  const eventCSSVariables = {
    borderLeft: `4px solid var(--sx-color-${calendarEvent._color})`,
    textColor: `var(--sx-color-on-${calendarEvent._color}-container)`,
    backgroundColor: `var(--sx-color-${calendarEvent._color}-container)`,
    iconStroke: `var(--sx-color-on-${calendarEvent._color}-container)`
  };
  const leftRule = getLeftRule(calendarEvent, $app.config.weekOptions.value.eventWidth);
  const handleStartDrag = (uiEvent) => {
    var _a2;
    if (isUIEventTouchEvent(uiEvent))
      uiEvent.preventDefault();
    if (isCopy)
      return;
    if (!uiEvent.target)
      return;
    if (!$app.config.plugins.dragAndDrop)
      return;
    if ((_a2 = calendarEvent._options) === null || _a2 === void 0 ? void 0 : _a2.disableDND)
      return;
    if (realStartIsBeforeDayBoundaryStart)
      return;
    const newEventCopy = deepCloneEvent(calendarEvent, $app);
    updateCopy(newEventCopy);
    $app.config.plugins.dragAndDrop.createTimeGridDragHandler({
      $app,
      eventCoordinates: getEventCoordinates(uiEvent),
      updateCopy,
      eventCopy: newEventCopy
    }, dayBoundariesDateTime);
  };
  const customComponent = $app.config._customComponentFns.timeGridEvent;
  const customComponentId = getCCID(customComponent, isCopy);
  y2(() => {
    if (!customComponent)
      return;
    customComponent(getElementByCCID(customComponentId), {
      calendarEvent: calendarEvent._getExternalEvent()
    });
  }, [calendarEvent, eventCopy]);
  const handleOnClick = (e4) => {
    e4.stopPropagation();
    invokeOnEventClickCallback($app, calendarEvent, e4);
  };
  const handleOnDoubleClick = (e4) => {
    e4.stopPropagation();
    invokeOnEventDoubleClickCallback($app, calendarEvent, e4);
  };
  const handleKeyDown = (e4) => {
    if (e4.key === "Enter" || e4.key === " ") {
      e4.stopPropagation();
      setClickedEvent(e4, calendarEvent);
      invokeOnEventClickCallback($app, calendarEvent, e4);
      nextTick(() => {
        focusModal($app);
      });
    }
  };
  const startResize = (e4) => {
    setMouseDown(true);
    e4.stopPropagation();
    if (isCopy)
      return;
    if ($app.config.plugins.resize) {
      const eventCopy2 = deepCloneEvent(calendarEvent, $app);
      updateCopy(eventCopy2);
      $app.config.plugins.resize.createTimeGridEventResizer(eventCopy2, updateCopy, e4, dayBoundariesDateTime);
    }
  };
  const borderRule = getBorderRule(calendarEvent);
  const classNames = ["sx__time-grid-event", "sx__event"];
  if (isCopy)
    classNames.push("is-event-copy");
  if (!$app.config.weekOptions.value.eventOverlap && calendarEvent._maxConcurrentEvents && calendarEvent._maxConcurrentEvents > 1)
    classNames.push("is-event-overlap");
  if ((_a = calendarEvent._options) === null || _a === void 0 ? void 0 : _a.additionalClasses)
    classNames.push(...calendarEvent._options.additionalClasses);
  const handlePointerDown = (e4) => {
    setMouseDown(true);
    createDragStartTimeout(handleStartDrag, e4);
  };
  const handlePointerUp = (e4) => {
    nextTick(() => setMouseDown(false));
    setClickedEventIfNotDragging(calendarEvent, e4);
  };
  const hasCustomContent = (_b = calendarEvent._customContent) === null || _b === void 0 ? void 0 : _b.timeGrid;
  const realStartIsBeforeDayBoundaryStart = dayBoundariesDateTime && calendarEvent.start < dayBoundariesDateTime.start && calendarEvent.end >= dayBoundariesDateTime.start;
  const relativeStartWithinDayBoundary = realStartIsBeforeDayBoundaryStart ? dayBoundariesDateTime === null || dayBoundariesDateTime === void 0 ? void 0 : dayBoundariesDateTime.start : calendarEvent.start;
  return u2(k, { children: [u2("div", { id: isCopy ? getTimeGridEventCopyElementId(calendarEvent.id) : void 0, "data-event-id": calendarEvent.id, onClick: handleOnClick, onDblClick: handleOnDoubleClick, onKeyDown: handleKeyDown, onMouseDown: handlePointerDown, onMouseUp: handlePointerUp, onTouchStart: handlePointerDown, onTouchEnd: handlePointerUp, className: classNames.join(" "), tabIndex: 0, role: "button", style: {
    top: `${getYCoordinateInTimeGrid(relativeStartWithinDayBoundary, $app.config.dayBoundaries.value, $app.config.timePointsPerDay)}%`,
    height: `${getEventHeight(relativeStartWithinDayBoundary, calendarEvent.end, $app.config.dayBoundaries.value, $app.config.timePointsPerDay)}%`,
    left: `${leftRule}%`,
    width: `${getWidthRule(leftRule, isCopy ? 100 : $app.config.weekOptions.value.eventWidth, calendarEvent._maxConcurrentEvents, $app.config.weekOptions.value.eventOverlap)}%`,
    backgroundColor: customComponent ? void 0 : eventCSSVariables.backgroundColor,
    color: customComponent ? void 0 : eventCSSVariables.textColor,
    borderTop: borderRule,
    borderRight: borderRule,
    borderBottom: borderRule,
    borderLeft: customComponent ? void 0 : eventCSSVariables.borderLeft,
    padding: customComponent ? "0" : void 0
  }, children: u2("div", { "data-ccid": customComponentId, className: "sx__time-grid-event-inner", children: [!customComponent && !hasCustomContent && u2(k, { children: [calendarEvent.title && u2("div", { className: "sx__time-grid-event-title", children: calendarEvent.title }), u2("div", { className: "sx__time-grid-event-time", children: [u2(TimeIcon, { strokeColor: eventCSSVariables.iconStroke }), getEventTime(calendarEvent.start, calendarEvent.end)] }), calendarEvent.people && calendarEvent.people.length > 0 && u2("div", { className: "sx__time-grid-event-people", children: [u2(UserIcon, { strokeColor: eventCSSVariables.iconStroke }), concatenatePeople(calendarEvent.people)] }), calendarEvent.location && u2("div", { className: "sx__time-grid-event-location", children: [u2(LocationPinIcon, { strokeColor: eventCSSVariables.iconStroke }), calendarEvent.location] })] }), hasCustomContent && u2("div", { dangerouslySetInnerHTML: {
    __html: ((_c = calendarEvent._customContent) === null || _c === void 0 ? void 0 : _c.timeGrid) || ""
  } }), $app.config.plugins.resize && !((_d = calendarEvent._options) === null || _d === void 0 ? void 0 : _d.disableResize) && u2("div", { className: "sx__time-grid-event-resize-handle", onMouseDown: startResize })] }) }), eventCopy && u2(TimeGridEvent, { calendarEvent: eventCopy, isCopy: true, setMouseDown, dayBoundariesDateTime })] });
}
var sortEventsByStartAndEnd = (a4, b3) => {
  if (a4.start === b3.start) {
    if (a4.end < b3.end)
      return 1;
    if (a4.end > b3.end)
      return -1;
    return 0;
  }
  if (a4.start < b3.start)
    return -1;
  if (a4.start > b3.start)
    return 1;
  return 0;
};
var sortEventsForMonthGrid = (a4, b3) => {
  const aStartDate = dateFromDateTime(a4.start);
  const bStartDate = dateFromDateTime(b3.start);
  const aEndDate = dateFromDateTime(a4.end);
  const bEndDate = dateFromDateTime(b3.end);
  if (aStartDate === bStartDate && aEndDate === bEndDate) {
    if (a4.start < b3.start)
      return -1;
  }
  if (aStartDate === bStartDate) {
    if (aEndDate < bEndDate)
      return 1;
    if (aEndDate > bEndDate)
      return -1;
    return 0;
  }
  if (aStartDate < bStartDate)
    return -1;
  if (aStartDate > bStartDate)
    return 1;
  return 0;
};
var handleEventConcurrency = (sortedEvents, concurrentEventsCache = [], currentIndex = 0) => {
  for (let i5 = currentIndex; i5 < sortedEvents.length; i5++) {
    const event = sortedEvents[i5];
    const nextEvent = sortedEvents[i5 + 1];
    if (concurrentEventsCache.length && (!nextEvent || concurrentEventsCache.every((e4) => e4.end <= nextEvent.start))) {
      concurrentEventsCache.push(event);
      for (let ii = 0; ii < concurrentEventsCache.length; ii++) {
        const currentEvent = concurrentEventsCache[ii];
        const NpreviousConcurrentEvents = concurrentEventsCache.filter((cachedEvent, index) => {
          if (cachedEvent === currentEvent || index > ii)
            return false;
          return cachedEvent.start <= currentEvent.start && cachedEvent.end > currentEvent.start;
        }).length;
        const NupcomingConcurrentEvents = concurrentEventsCache.filter((cachedEvent, index) => {
          if (cachedEvent === currentEvent || index < ii)
            return false;
          return cachedEvent.start < currentEvent.end && cachedEvent.end >= currentEvent.start;
        }).length;
        currentEvent._totalConcurrentEvents = NpreviousConcurrentEvents + NupcomingConcurrentEvents + 1;
        currentEvent._previousConcurrentEvents = NpreviousConcurrentEvents;
        let maxOverlappingEvents = 0;
        const timePoints = [];
        concurrentEventsCache.forEach((cachedEvent) => {
          if (cachedEvent.end > currentEvent.start && cachedEvent.start < currentEvent.end) {
            timePoints.push({ time: cachedEvent.start, type: "start" });
            timePoints.push({ time: cachedEvent.end, type: "end" });
          }
        });
        timePoints.sort((a4, b3) => a4.time.localeCompare(b3.time) || (a4.type === "end" ? -1 : 1));
        let currentOverlap = 0;
        timePoints.forEach((point) => {
          if (point.type === "start") {
            currentOverlap++;
            maxOverlappingEvents = Math.max(maxOverlappingEvents, currentOverlap);
          } else {
            currentOverlap--;
          }
        });
        currentEvent._maxConcurrentEvents = maxOverlappingEvents;
      }
      concurrentEventsCache = [];
      return handleEventConcurrency(sortedEvents, concurrentEventsCache, i5 + 1);
    }
    if (nextEvent && event.end > nextEvent.start || concurrentEventsCache.some((e4) => e4.end > event.start)) {
      concurrentEventsCache.push(event);
      return handleEventConcurrency(sortedEvents, concurrentEventsCache, i5 + 1);
    }
    event._totalConcurrentEvents = 1;
    event._previousConcurrentEvents = 0;
    event._maxConcurrentEvents = 1;
  }
  return sortedEvents;
};
var getClickDateTime = (e4, $app, dayStartDateTime) => {
  if (!(e4.target instanceof HTMLElement))
    return;
  const DAY_GRID_CLASS_NAME = "sx__time-grid-day";
  const dayGridElement = e4.target.classList.contains(DAY_GRID_CLASS_NAME) ? e4.target : e4.target.closest("." + DAY_GRID_CLASS_NAME);
  const clientY = e4.clientY - dayGridElement.getBoundingClientRect().top;
  const clickPercentageOfDay = clientY / dayGridElement.getBoundingClientRect().height * 100;
  const clickTimePointsIntoDay = Math.round($app.config.timePointsPerDay / 100 * clickPercentageOfDay);
  return addTimePointsToDateTime(dayStartDateTime, clickTimePointsIntoDay);
};
var getClassNameForWeekday = (weekday) => {
  switch (weekday) {
    case 0:
      return "sx__sunday";
    case 1:
      return "sx__monday";
    case 2:
      return "sx__tuesday";
    case 3:
      return "sx__wednesday";
    case 4:
      return "sx__thursday";
    case 5:
      return "sx__friday";
    case 6:
      return "sx__saturday";
    default:
      throw new Error("Invalid weekday");
  }
};
function TimeGridBackgroundEvent({ backgroundEvent, date }) {
  const $app = x2(AppContext);
  let start = backgroundEvent.start;
  let end = backgroundEvent.end;
  if (dateStringRegex.test(start))
    start += " 00:00";
  if (dateStringRegex.test(end))
    end += " 23:59";
  if (dateFromDateTime(start) !== date)
    start = date + " " + start.split(" ")[1];
  if (dateFromDateTime(end) !== date)
    end = date + " " + end.split(" ")[1];
  const startTimePoints = timePointsFromString(start.split(" ")[1]);
  if (startTimePoints < $app.config.dayBoundaries.value.start) {
    start = date + " " + timeStringFromTimePoints($app.config.dayBoundaries.value.start);
  }
  if (start === end) {
    return null;
  }
  return u2(k, { children: u2("div", { class: "sx__time-grid-background-event", title: backgroundEvent.title, style: {
    ...backgroundEvent.style,
    position: "absolute",
    zIndex: 0,
    top: `${getYCoordinateInTimeGrid(start, $app.config.dayBoundaries.value, $app.config.timePointsPerDay)}%`,
    height: `${getEventHeight(start, end, $app.config.dayBoundaries.value, $app.config.timePointsPerDay)}%`,
    width: "100%"
  } }) });
}
function TimeGridDay({ calendarEvents, date, backgroundEvents }) {
  const [mouseDownOnChild, setMouseDownOnChild] = d2(false);
  const $app = x2(AppContext);
  const timeStringFromDayBoundary = timeStringFromTimePoints($app.config.dayBoundaries.value.start);
  const timeStringFromDayBoundaryEnd = timeStringFromTimePoints($app.config.dayBoundaries.value.end);
  const dayStartDateTime = setTimeInDateTimeString(date, timeStringFromDayBoundary);
  const dayEndDateTime = $app.config.isHybridDay ? addDays(setTimeInDateTimeString(date, timeStringFromDayBoundaryEnd), 1) : setTimeInDateTimeString(date, timeStringFromDayBoundaryEnd);
  const dayBoundariesDateTime = {
    start: dayStartDateTime,
    end: dayEndDateTime
  };
  const sortedEvents = calendarEvents.sort(sortEventsByStartAndEnd);
  const [eventsWithConcurrency, setEventsWithConcurrency] = d2([]);
  y2(() => {
    setEventsWithConcurrency(handleEventConcurrency(sortedEvents));
  }, [calendarEvents]);
  const handleOnClick = (e4, callback) => {
    if (!callback || mouseDownOnChild)
      return;
    const clickDateTime = getClickDateTime(e4, $app, dayStartDateTime);
    if (clickDateTime) {
      callback(clickDateTime);
    }
  };
  const handleMouseDown = (e4) => {
    const callback = $app.config.callbacks.onMouseDownDateTime;
    if (!callback || mouseDownOnChild)
      return;
    const clickDateTime = getClickDateTime(e4, $app, dayStartDateTime);
    if (clickDateTime) {
      callback(clickDateTime, e4);
    }
  };
  const handlePointerUp = () => {
    const msWaitToEnsureThatClickEventWasDispatched = 10;
    setTimeout(() => {
      setMouseDownOnChild(false);
    }, msWaitToEnsureThatClickEventWasDispatched);
  };
  const baseClasses = [
    "sx__time-grid-day",
    getClassNameForWeekday(toJSDate(date).getDay())
  ];
  const [classNames, setClassNames] = d2(baseClasses);
  useSignalEffect(() => {
    const newClassNames = [...baseClasses];
    if ($app.datePickerState.selectedDate.value === date)
      newClassNames.push("is-selected");
    setClassNames(newClassNames);
  });
  return u2("div", { className: classNames.join(" "), "data-time-grid-date": date, onClick: (e4) => handleOnClick(e4, $app.config.callbacks.onClickDateTime), onDblClick: (e4) => handleOnClick(e4, $app.config.callbacks.onDoubleClickDateTime), "aria-label": getLocalizedDate(date, $app.config.locale.value), onMouseLeave: () => setMouseDownOnChild(false), onMouseUp: handlePointerUp, onTouchEnd: handlePointerUp, onMouseDown: handleMouseDown, children: [backgroundEvents.map((event) => u2(k, { children: u2(TimeGridBackgroundEvent, { backgroundEvent: event, date }) })), eventsWithConcurrency.map((event) => u2(TimeGridEvent, { calendarEvent: event, dayBoundariesDateTime, setMouseDown: setMouseDownOnChild }, event.id))] });
}
var getTimeAxisHours = ({ start, end }, isHybridDay) => {
  const hours = [];
  let hour = Math.floor(start / 100);
  if (isHybridDay) {
    while (hour < 24) {
      hours.push(hour);
      hour += 1;
    }
    hour = 0;
  }
  const lastHour = end === 0 ? 24 : Math.ceil(end / 100);
  while (hour < lastHour) {
    hours.push(hour);
    hour += 1;
  }
  return hours;
};
function TimeAxis() {
  const $app = x2(AppContext);
  const [hours, setHours] = d2([]);
  useSignalEffect(() => {
    setHours(getTimeAxisHours($app.config.dayBoundaries.value, $app.config.isHybridDay));
    const hoursPerDay = $app.config.timePointsPerDay / 100;
    const pixelsPerHour = $app.config.weekOptions.value.gridHeight / hoursPerDay;
    document.documentElement.style.setProperty("--sx-week-grid-hour-height", `${pixelsPerHour}px`);
  });
  const formatter = new Intl.DateTimeFormat($app.config.locale.value, $app.config.weekOptions.value.timeAxisFormatOptions);
  const hourCustomComponentFn = $app.config._customComponentFns.weekGridHour;
  const hourCCIDs = T2(() => {
    if (!hourCustomComponentFn)
      return [];
    return hours.map(() => `custom-week-grid-hour-${randomStringId()}`);
  }, [hours]);
  y2(() => {
    if (hourCustomComponentFn && hourCCIDs.length) {
      hours.forEach((hour, idx) => {
        const el = document.querySelector(`[data-ccid="${hourCCIDs[idx]}"]`);
        if (!(el instanceof HTMLElement)) {
          return console.warn("Could not find element for custom component weekGridHour");
        }
        hourCustomComponentFn(el, { hour });
      });
    }
  }, [hours, hourCCIDs]);
  return u2(k, { children: u2("div", { className: "sx__week-grid__time-axis", children: hours.map((hour, index) => u2("div", { className: "sx__week-grid__hour", children: [hourCustomComponentFn && hourCCIDs.length && u2("div", { "data-ccid": hourCCIDs[index] }), !hourCustomComponentFn && u2("span", { className: "sx__week-grid__hour-text", children: formatter.format(new Date(0, 0, 0, hour)) })] })) }) });
}
function DateAxis({ week }) {
  const $app = x2(AppContext);
  const getClassNames = (date) => {
    const classNames = [
      "sx__week-grid__date",
      getClassNameForWeekday(date.getDay())
    ];
    if (isToday(date)) {
      classNames.push("sx__week-grid__date--is-today");
    }
    return classNames.join(" ");
  };
  const weekGridDateCustomComponentFn = $app.config._customComponentFns.weekGridDate;
  const weekGridDateCCIDs = d2(() => Array.from({ length: 7 }, () => `custom-week-grid-date-${randomStringId()}`));
  y2(() => {
    if (weekGridDateCustomComponentFn) {
      week.forEach((date, idx) => {
        const el = document.querySelector(`[data-ccid="${weekGridDateCCIDs[0][idx]}"]`);
        if (!(el instanceof HTMLElement)) {
          return console.warn("Could not find element for custom component weekGridDate");
        }
        weekGridDateCustomComponentFn(el, {
          date: toDateString$1(date)
        });
      });
    }
  }, [week]);
  return u2(k, { children: u2("div", { className: "sx__week-grid__date-axis", children: week.map((date, idx) => u2("div", { className: getClassNames(date), "data-date": toDateString$1(date), children: [weekGridDateCustomComponentFn && u2("div", { "data-ccid": weekGridDateCCIDs[0][idx] }), !weekGridDateCustomComponentFn && u2(k, { children: [u2("div", { className: "sx__week-grid__day-name", children: getDayNameShort(date, $app.config.locale.value) }), u2("div", { className: "sx__week-grid__date-number", children: date.getDate() })] })] })) }) });
}
var sortEventsForWeekView = (allCalendarEvents) => {
  const dateGridEvents = [];
  const timeGridEvents = [];
  for (const event of allCalendarEvents) {
    if (event._isSingleDayTimed || event._isSingleHybridDayTimed) {
      timeGridEvents.push(event);
      continue;
    }
    if (event._isSingleDayFullDay || event._isMultiDayFullDay || event._isMultiDayTimed) {
      dateGridEvents.push(event);
    }
  }
  return { timeGridEvents, dateGridEvents };
};
var createOneDay = (week, date) => {
  const dateString = toDateString$1(date);
  week[dateString] = {
    date: dateString,
    timeGridEvents: [],
    dateGridEvents: {},
    backgroundEvents: []
  };
  return week;
};
var createWeek = ($app) => {
  if ($app.calendarState.view.value === InternalViewName.Day)
    return createOneDay({}, toJSDate($app.calendarState.range.value.start));
  return $app.timeUnitsImpl.getWeekFor(toJSDate($app.datePickerState.selectedDate.value)).slice(0, $app.config.weekOptions.value.nDays).reduce(createOneDay, {});
};
var positionInTimeGrid = (timeGridEvents, week, $app) => {
  var _a;
  for (const event of timeGridEvents) {
    const range = $app.calendarState.range.value;
    if (event.start >= range.start && event.end <= range.end) {
      let date = dateFromDateTime(event.start);
      if ($app.config.isHybridDay) {
        const previousDayStart = `${addDays(date, -1)} ${timeStringFromTimePoints($app.config.dayBoundaries.value.start)}`;
        const previousDayEnd = `${date} ${timeStringFromTimePoints($app.config.dayBoundaries.value.end)}`;
        const actualDayStart = `${date} ${timeStringFromTimePoints($app.config.dayBoundaries.value.start)}`;
        if (event.start > previousDayStart && event.start < previousDayEnd && event.start < actualDayStart) {
          date = addDays(date, -1);
        }
      }
      (_a = week[date]) === null || _a === void 0 ? void 0 : _a.timeGridEvents.push(event);
    }
  }
  return week;
};
InternalViewName.Week;
var DEFAULT_DAY_BOUNDARIES = {
  start: 0,
  end: 2400
};
var DEFAULT_WEEK_GRID_HEIGHT = 1600;
var DATE_GRID_BLOCKER = "blocker";
var positionInDateGrid = (sortedDateGridEvents, week) => {
  const weekDates = Object.keys(week).sort();
  const firstDateOfWeek = weekDates[0];
  const lastDateOfWeek = weekDates[weekDates.length - 1];
  const occupiedLevels = /* @__PURE__ */ new Set();
  for (const event of sortedDateGridEvents) {
    const eventOriginalStartDate = dateFromDateTime(event.start);
    const eventOriginalEndDate = dateFromDateTime(event.end);
    const isEventStartInWeek = !!week[eventOriginalStartDate];
    let isEventInWeek = isEventStartInWeek;
    if (!isEventStartInWeek && eventOriginalStartDate < firstDateOfWeek && eventOriginalEndDate >= firstDateOfWeek) {
      isEventInWeek = true;
    }
    if (!isEventInWeek)
      continue;
    const firstDateOfEvent = isEventStartInWeek ? eventOriginalStartDate : firstDateOfWeek;
    const lastDateOfEvent = eventOriginalEndDate <= lastDateOfWeek ? eventOriginalEndDate : lastDateOfWeek;
    const eventDays = Object.values(week).filter((day) => {
      return day.date >= firstDateOfEvent && day.date <= lastDateOfEvent;
    });
    let levelInWeekForEvent;
    let testLevel = 0;
    while (levelInWeekForEvent === void 0) {
      const isLevelFree = eventDays.every((day) => {
        return !day.dateGridEvents[testLevel];
      });
      if (isLevelFree) {
        levelInWeekForEvent = testLevel;
        occupiedLevels.add(testLevel);
      } else
        testLevel++;
    }
    for (const [eventDayIndex, eventDay] of eventDays.entries()) {
      if (eventDayIndex === 0) {
        event._nDaysInGrid = eventDays.length;
        eventDay.dateGridEvents[levelInWeekForEvent] = event;
      } else {
        eventDay.dateGridEvents[levelInWeekForEvent] = DATE_GRID_BLOCKER;
      }
    }
  }
  for (const level of Array.from(occupiedLevels)) {
    for (const [, day] of Object.entries(week)) {
      if (!day.dateGridEvents[level]) {
        day.dateGridEvents[level] = void 0;
      }
    }
  }
  return week;
};
var getWidthToSubtract = (hasOverflowLeft, hasOverflowRight, enableOverflowSubtraction) => {
  let widthToSubtract = 2;
  const eventOverflowMargin = 10;
  if (hasOverflowLeft && enableOverflowSubtraction)
    widthToSubtract += eventOverflowMargin;
  if (hasOverflowRight && enableOverflowSubtraction)
    widthToSubtract += eventOverflowMargin;
  return widthToSubtract;
};
var getBorderRadius = (hasOverflowLeft, hasOverflowRight, forceZeroRule) => {
  return {
    borderBottomLeftRadius: hasOverflowLeft || forceZeroRule ? 0 : void 0,
    borderTopLeftRadius: hasOverflowLeft || forceZeroRule ? 0 : void 0,
    borderBottomRightRadius: hasOverflowRight || forceZeroRule ? 0 : void 0,
    borderTopRightRadius: hasOverflowRight || forceZeroRule ? 0 : void 0
  };
};
function DateGridEvent({ calendarEvent, gridRow, isCopy }) {
  var _a, _b, _c, _d;
  const $app = x2(AppContext);
  const { eventCopy, updateCopy, createDragStartTimeout, setClickedEventIfNotDragging, setClickedEvent } = useEventInteractions($app);
  const eventCSSVariables = {
    borderLeft: `4px solid var(--sx-color-${calendarEvent._color})`,
    color: `var(--sx-color-on-${calendarEvent._color}-container)`,
    backgroundColor: `var(--sx-color-${calendarEvent._color}-container)`
  };
  const handleStartDrag = (uiEvent) => {
    var _a2;
    if (!$app.config.plugins.dragAndDrop)
      return;
    if ((_a2 = calendarEvent._options) === null || _a2 === void 0 ? void 0 : _a2.disableDND)
      return;
    if (isUIEventTouchEvent(uiEvent))
      uiEvent.preventDefault();
    const newEventCopy = deepCloneEvent(calendarEvent, $app);
    updateCopy(newEventCopy);
    $app.config.plugins.dragAndDrop.createDateGridDragHandler({
      eventCoordinates: getEventCoordinates(uiEvent),
      eventCopy: newEventCopy,
      updateCopy,
      $app
    });
  };
  const hasOverflowLeft = dateFromDateTime(calendarEvent.start) < dateFromDateTime($app.calendarState.range.value.start);
  const hasOverflowRight = dateFromDateTime(calendarEvent.end) > dateFromDateTime($app.calendarState.range.value.end);
  const overflowStyles = { backgroundColor: eventCSSVariables.backgroundColor };
  const customComponent = $app.config._customComponentFns.dateGridEvent;
  let customComponentId = customComponent ? "custom-date-grid-event-" + randomStringId() : void 0;
  if (isCopy && customComponentId)
    customComponentId += "-copy";
  y2(() => {
    if (!customComponent)
      return;
    customComponent(getElementByCCID(customComponentId), {
      calendarEvent: calendarEvent._getExternalEvent()
    });
  }, [calendarEvent, eventCopy]);
  const startResize = (mouseEvent) => {
    mouseEvent.stopPropagation();
    const eventCopy2 = deepCloneEvent(calendarEvent, $app);
    updateCopy(eventCopy2);
    $app.config.plugins.resize.createDateGridEventResizer(eventCopy2, updateCopy, mouseEvent);
  };
  const handleKeyDown = (e4) => {
    if (e4.key === "Enter" || e4.key === " ") {
      e4.stopPropagation();
      setClickedEvent(e4, calendarEvent);
      invokeOnEventClickCallback($app, calendarEvent, e4);
      nextTick(() => {
        focusModal($app);
      });
    }
  };
  const eventClasses = [
    "sx__event",
    "sx__date-grid-event",
    "sx__date-grid-cell"
  ];
  if (isCopy)
    eventClasses.push("sx__date-grid-event--copy");
  if (hasOverflowLeft)
    eventClasses.push("sx__date-grid-event--overflow-left");
  if (hasOverflowRight)
    eventClasses.push("sx__date-grid-event--overflow-right");
  if ((_a = calendarEvent._options) === null || _a === void 0 ? void 0 : _a.additionalClasses)
    eventClasses.push(...calendarEvent._options.additionalClasses);
  const borderLeftNonCustom = hasOverflowLeft ? "none" : eventCSSVariables.borderLeft;
  const hasCustomContent = (_b = calendarEvent._customContent) === null || _b === void 0 ? void 0 : _b.dateGrid;
  return u2(k, { children: [u2("div", { id: isCopy ? getTimeGridEventCopyElementId(calendarEvent.id) : void 0, tabIndex: 0, "aria-label": calendarEvent.title + " " + getTimeStamp(calendarEvent, $app.config.locale.value, $app.translate("to")), role: "button", "data-ccid": customComponentId, "data-event-id": calendarEvent.id, onMouseDown: (e4) => createDragStartTimeout(handleStartDrag, e4), onMouseUp: (e4) => setClickedEventIfNotDragging(calendarEvent, e4), onTouchStart: (e4) => createDragStartTimeout(handleStartDrag, e4), onTouchEnd: (e4) => setClickedEventIfNotDragging(calendarEvent, e4), onClick: (e4) => invokeOnEventClickCallback($app, calendarEvent, e4), onDblClick: (e4) => invokeOnEventDoubleClickCallback($app, calendarEvent, e4), onKeyDown: handleKeyDown, className: eventClasses.join(" "), style: {
    width: `calc(${calendarEvent._nDaysInGrid * 100}% - ${getWidthToSubtract(hasOverflowLeft, hasOverflowRight, !customComponent)}px)`,
    gridRow,
    display: eventCopy ? "none" : "flex",
    padding: customComponent ? "0px" : void 0,
    borderLeft: customComponent ? void 0 : borderLeftNonCustom,
    color: customComponent ? void 0 : eventCSSVariables.color,
    backgroundColor: customComponent ? void 0 : eventCSSVariables.backgroundColor,
    ...getBorderRadius(hasOverflowLeft, hasOverflowRight, !!customComponent)
  }, children: [!customComponent && !hasCustomContent && u2(k, { children: [hasOverflowLeft && u2("div", { className: "sx__date-grid-event--left-overflow", style: overflowStyles }), u2("span", { className: "sx__date-grid-event-text", children: [calendarEvent.title, "  ", dateTimeStringRegex.test(calendarEvent.start) && u2("span", { className: "sx__date-grid-event-time", children: timeFn(calendarEvent.start, $app.config.locale.value) })] }), hasOverflowRight && u2("div", { className: "sx__date-grid-event--right-overflow", style: overflowStyles })] }), hasCustomContent && u2("div", { dangerouslySetInnerHTML: {
    __html: ((_c = calendarEvent._customContent) === null || _c === void 0 ? void 0 : _c.dateGrid) || ""
  } }), $app.config.plugins.resize && !((_d = calendarEvent._options) === null || _d === void 0 ? void 0 : _d.disableResize) && !hasOverflowRight && u2("div", { className: "sx__date-grid-event-resize-handle", onMouseDown: startResize })] }), eventCopy && u2(DateGridEvent, { calendarEvent: eventCopy, gridRow, isCopy: true })] });
}
function DateGridDay({ calendarEvents, date, backgroundEvents }) {
  const $app = x2(AppContext);
  const dateStart = date + " 00:00";
  const dateEnd = date + " 23:59";
  const fullDayBackgroundEvent = backgroundEvents.find((event) => {
    const eventStartWithTime = dateStringRegex.test(event.start) ? event.start + " 00:00" : event.start;
    const eventEndWithTime = dateStringRegex.test(event.end) ? event.end + " 23:59" : event.end;
    return eventStartWithTime <= dateStart && eventEndWithTime >= dateEnd;
  });
  const handleMouseDown = (e4) => {
    const callback = $app.config.callbacks.onMouseDownDateGridDate;
    if (!callback)
      return;
    callback(date, e4);
  };
  return u2("div", { className: "sx__date-grid-day", "data-date-grid-date": date, children: [fullDayBackgroundEvent && u2("div", { className: "sx__date-grid-background-event", title: fullDayBackgroundEvent.title, style: {
    ...fullDayBackgroundEvent.style
  } }), Object.values(calendarEvents).map((event, index) => {
    if (event === DATE_GRID_BLOCKER || !event)
      return u2("div", { className: "sx__date-grid-cell", style: { gridRow: index + 1 }, onMouseDown: handleMouseDown });
    return u2(DateGridEvent, { calendarEvent: event, gridRow: index + 1 });
  }), u2("div", { className: "sx__spacer", onMouseDown: handleMouseDown })] });
}
var filterByRange = (events, range) => {
  return events.filter((event) => {
    let rangeStart = range.start;
    let rangeEnd = range.end;
    if (dateStringRegex.test(rangeStart))
      rangeStart = rangeStart + " 00:00";
    if (dateStringRegex.test(rangeEnd))
      rangeEnd = rangeEnd + " 23:59";
    let eventStart = event.start;
    let eventEnd = event.end;
    if (dateStringRegex.test(eventStart))
      eventStart = eventStart + " 00:00";
    if (dateStringRegex.test(eventEnd))
      eventEnd = eventEnd + " 23:59";
    const eventStartsInRange = eventStart >= rangeStart && eventStart <= rangeEnd;
    const eventEndInRange = eventEnd >= rangeStart && eventEnd <= rangeEnd;
    const eventStartBeforeAndEventEndAfterRange = eventStart < rangeStart && eventEnd > rangeEnd;
    return eventStartsInRange || eventEndInRange || eventStartBeforeAndEventEndAfterRange;
  });
};
var WeekWrapper = ({ $app, id }) => {
  document.documentElement.style.setProperty("--sx-week-grid-height", `${$app.config.weekOptions.value.gridHeight}px`);
  const [week, setWeek] = d2({});
  useSignalEffect(() => {
    var _a, _b;
    const rangeStart = (_a = $app.calendarState.range.value) === null || _a === void 0 ? void 0 : _a.start;
    const rangeEnd = (_b = $app.calendarState.range.value) === null || _b === void 0 ? void 0 : _b.end;
    if (!rangeStart || !rangeEnd)
      return;
    let newWeek = createWeek($app);
    const filteredEvents = $app.calendarEvents.filterPredicate.value ? $app.calendarEvents.list.value.filter($app.calendarEvents.filterPredicate.value) : $app.calendarEvents.list.value;
    const { dateGridEvents, timeGridEvents } = sortEventsForWeekView(filteredEvents);
    newWeek = positionInDateGrid(dateGridEvents.sort(sortEventsByStartAndEnd), newWeek);
    Object.entries(newWeek).forEach(([date, day]) => {
      day.backgroundEvents = filterByRange($app.calendarEvents.backgroundEvents.value, {
        start: date,
        end: date
      });
    });
    newWeek = positionInTimeGrid(timeGridEvents, newWeek, $app);
    setWeek(newWeek);
  });
  return u2(k, { children: u2(AppContext.Provider, { value: $app, children: u2("div", { className: "sx__week-wrapper", id, children: [u2("div", { className: "sx__week-header", children: u2("div", { className: "sx__week-header-content", children: [u2(DateAxis, { week: Object.values(week).map((day) => toJSDate(day.date)) }), u2("div", { className: "sx__date-grid", "aria-label": $app.translate("Full day- and multiple day events"), children: Object.values(week).map((day) => u2(DateGridDay, { date: day.date, calendarEvents: day.dateGridEvents, backgroundEvents: day.backgroundEvents }, day.date)) }), u2("div", { className: "sx__week-header-border" })] }) }), u2("div", { className: "sx__week-grid", children: [u2(TimeAxis, {}), Object.values(week).map((day) => u2(TimeGridDay, { calendarEvents: day.timeGridEvents, backgroundEvents: day.backgroundEvents, date: day.date }, day.date))] })] }) }) });
};
var getRangeStartGivenDayBoundaries = (calendarConfig, date) => {
  return `${toDateString$1(date)} ${timeStringFromTimePoints(calendarConfig.dayBoundaries.value.start)}`;
};
var getRangeEndGivenDayBoundaries = (calendarConfig, date) => {
  let dayEndTimeString = timeStringFromTimePoints(calendarConfig.dayBoundaries.value.end);
  let newRangeEndDate = toDateString$1(date);
  if (calendarConfig.isHybridDay) {
    newRangeEndDate = addDays(newRangeEndDate, 1);
  }
  if (calendarConfig.dayBoundaries.value.end === 2400) {
    dayEndTimeString = "23:59";
  }
  return `${newRangeEndDate} ${dayEndTimeString}`;
};
var setRangeForWeek = (config2) => {
  const weekForDate = config2.timeUnitsImpl.getWeekFor(toJSDate(config2.date)).slice(0, config2.calendarConfig.weekOptions.value.nDays);
  return {
    start: getRangeStartGivenDayBoundaries(config2.calendarConfig, weekForDate[0]),
    end: getRangeEndGivenDayBoundaries(config2.calendarConfig, weekForDate[weekForDate.length - 1])
  };
};
var setRangeForMonth = (config2) => {
  const { year, month } = toIntegers(config2.date);
  const monthForDate = config2.timeUnitsImpl.getMonthWithTrailingAndLeadingDays(year, month);
  const newRangeEndDate = toDateString$1(monthForDate[monthForDate.length - 1][monthForDate[monthForDate.length - 1].length - 1]);
  return {
    start: toDateTimeString(monthForDate[0][0]),
    end: `${newRangeEndDate} 23:59`
  };
};
var setRangeForDay = (config2) => {
  return {
    start: getRangeStartGivenDayBoundaries(config2.calendarConfig, toJSDate(config2.date)),
    end: getRangeEndGivenDayBoundaries(config2.calendarConfig, toJSDate(config2.date))
  };
};
var config$3 = {
  name: InternalViewName.Week,
  label: "Week",
  Component: WeekWrapper,
  setDateRange: setRangeForWeek,
  hasSmallScreenCompat: false,
  hasWideScreenCompat: true,
  backwardForwardFn: addDays,
  backwardForwardUnits: 7
};
var viewWeek = createPreactView(config$3);
var createViewWeek = () => createPreactView(config$3);
var DayWrapper = ({ $app, id }) => {
  return u2(WeekWrapper, { "$app": $app, id });
};
var config$2 = {
  name: InternalViewName.Day,
  label: "Day",
  setDateRange: setRangeForDay,
  hasWideScreenCompat: true,
  hasSmallScreenCompat: true,
  Component: DayWrapper,
  backwardForwardFn: addDays,
  backwardForwardUnits: 1
};
var viewDay = createPreactView(config$2);
var createViewDay = () => createPreactView(config$2);
var getWeekNumber = (d5, firstDayOfWeek) => {
  d5 = new Date(Date.UTC(d5.getFullYear(), d5.getMonth(), d5.getDate()));
  const dayOffset = (d5.getUTCDay() - firstDayOfWeek + 7) % 7;
  d5.setUTCDate(d5.getUTCDate() - dayOffset + 3);
  const yearStart = new Date(Date.UTC(d5.getUTCFullYear(), 0, 1));
  const yearStartOffset = (yearStart.getUTCDay() - firstDayOfWeek + 7) % 7;
  yearStart.setUTCDate(yearStart.getUTCDate() - yearStartOffset);
  const weekNo = Math.ceil(((d5.getTime() - yearStart.getTime()) / 864e5 + 1) / 7);
  const nextYearStart = new Date(Date.UTC(d5.getUTCFullYear() + 1, 0, 1));
  const nextYearStartOffset = (nextYearStart.getUTCDay() - firstDayOfWeek + 7) % 7;
  nextYearStart.setUTCDate(nextYearStart.getUTCDate() - nextYearStartOffset);
  if (d5 >= nextYearStart) {
    return 1;
  }
  return weekNo;
};
function WeekNumber() {
  const $app = x2(AppContext);
  return u2("div", { className: "sx__calendar-header__week-number", children: $app.translate("CW", {
    week: getWeekNumber(toJSDate($app.datePickerState.selectedDate.value), $app.config.firstDayOfWeek.value)
  }) });
}
function CalendarHeader() {
  const $app = x2(AppContext);
  const datePickerAppSingleton = new DatePickerAppSingletonBuilder().withDatePickerState($app.datePickerState).withConfig($app.datePickerConfig).withTranslate($app.translate).withTimeUnitsImpl($app.timeUnitsImpl).build();
  const headerContent = $app.config._customComponentFns.headerContent;
  const headerContentId = d2(headerContent ? randomStringId() : void 0)[0];
  const headerContentLeftPrepend = $app.config._customComponentFns.headerContentLeftPrepend;
  const headerContentLeftPrependId = d2(headerContentLeftPrepend ? randomStringId() : void 0)[0];
  const headerContentLeftAppend = $app.config._customComponentFns.headerContentLeftAppend;
  const headerContentLeftAppendId = d2(headerContentLeftAppend ? randomStringId() : void 0)[0];
  const headerContentRightPrepend = $app.config._customComponentFns.headerContentRightPrepend;
  const headerContentRightPrependId = d2(headerContentRightPrepend ? randomStringId() : void 0)[0];
  const headerContentRightAppend = $app.config._customComponentFns.headerContentRightAppend;
  const headerContentRightAppendId = d2(headerContentRightAppend ? randomStringId() : void 0)[0];
  y2(() => {
    if (headerContent) {
      headerContent(getElementByCCID(headerContentId), { $app });
    }
    if (headerContentLeftPrepend && headerContentLeftPrependId) {
      headerContentLeftPrepend(getElementByCCID(headerContentLeftPrependId), {
        $app
      });
    }
    if (headerContentLeftAppend) {
      headerContentLeftAppend(getElementByCCID(headerContentLeftAppendId), {
        $app
      });
    }
    if (headerContentRightPrepend) {
      headerContentRightPrepend(getElementByCCID(headerContentRightPrependId), {
        $app
      });
    }
    if (headerContentRightAppend) {
      headerContentRightAppend(getElementByCCID(headerContentRightAppendId), {
        $app
      });
    }
  }, []);
  const keyForRerenderingOnLocaleChange = $app.config.locale.value;
  const isDayOrWeekView = T2(() => {
    return [viewWeek.name, viewDay.name].includes($app.calendarState.view.value);
  }, [$app.calendarState.view.value]);
  return u2("header", { className: "sx__calendar-header", "data-ccid": headerContentId, children: !headerContent && u2(k, { children: [u2("div", { className: "sx__calendar-header-content", children: [headerContentLeftPrependId && u2("div", { "data-ccid": headerContentLeftPrependId }), u2(TodayButton, {}), u2(ForwardBackwardNavigation, {}), u2(RangeHeading, {}, $app.config.locale.value), $app.config.showWeekNumbers.value && isDayOrWeekView && u2(WeekNumber, {}), headerContentLeftAppendId && u2("div", { "data-ccid": headerContentLeftAppendId })] }), u2("div", { className: "sx__calendar-header-content", children: [headerContentRightPrependId && u2("div", { "data-ccid": headerContentRightPrependId }), $app.config.views.value.length > 1 && u2(ViewSelection, {}, keyForRerenderingOnLocaleChange + "-view-selection"), u2(AppWrapper, { "$app": datePickerAppSingleton }), headerContentRightAppendId && u2("div", { "data-ccid": headerContentRightAppendId })] })] }) });
}
var setWrapperElement = ($app, calendarId) => {
  $app.elements.calendarWrapper = document.getElementById(calendarId);
};
var setScreenSizeCompatibleView = ($app, isSmall) => {
  const currentView = $app.config.views.value.find((view) => view.name === $app.calendarState.view.value);
  if (isSmall) {
    if (currentView.hasSmallScreenCompat)
      return;
    const smallScreenCompatibleView = $app.config.views.value.find((view) => view.hasSmallScreenCompat);
    if (smallScreenCompatibleView) {
      $app.calendarState.setView(smallScreenCompatibleView.name, $app.datePickerState.selectedDate.value);
    }
  } else {
    if (currentView.hasWideScreenCompat)
      return;
    const wideScreenCompatibleView = $app.config.views.value.find((view) => view.hasWideScreenCompat);
    if (wideScreenCompatibleView) {
      $app.calendarState.setView(wideScreenCompatibleView.name, $app.datePickerState.selectedDate.value);
    }
  }
};
var handleWindowResize = ($app) => {
  const documentRoot = document.documentElement;
  const calendarRoot = $app.elements.calendarWrapper;
  const documentFontSize = +window.getComputedStyle(documentRoot).fontSize.split("p")[0];
  const breakPointFor1RemEquals16px = 700;
  const multiplier = 16 / documentFontSize;
  const smallCalendarBreakpoint = breakPointFor1RemEquals16px / multiplier;
  if (!calendarRoot)
    return;
  const isSmall = $app.config.callbacks.isCalendarSmall ? $app.config.callbacks.isCalendarSmall($app) : calendarRoot.clientWidth < smallCalendarBreakpoint;
  const didIsSmallScreenChange = isSmall !== $app.calendarState.isCalendarSmall.value;
  if (!didIsSmallScreenChange)
    return;
  $app.calendarState.isCalendarSmall.value = isSmall;
  setScreenSizeCompatibleView($app, isSmall);
};
function useWrapperClasses($app) {
  const calendarWrapperClass = "sx__calendar-wrapper";
  const [wrapperClasses, setWrapperClasses] = d2([
    calendarWrapperClass
  ]);
  useSignalEffect(() => {
    const classes = [calendarWrapperClass];
    if ($app.calendarState.isCalendarSmall.value)
      classes.push("sx__is-calendar-small");
    if ($app.calendarState.isDark.value)
      classes.push("is-dark");
    if ($app.config.theme === "shadcn")
      classes.push("is-shadcn");
    setWrapperClasses(classes);
  });
  return wrapperClasses;
}
var initPlugins = ($app) => {
  Object.values($app.config.plugins).forEach((plugin) => {
    if (plugin === null || plugin === void 0 ? void 0 : plugin.onRender) {
      plugin.onRender($app);
    }
  });
};
var destroyPlugins = ($app) => {
  Object.values($app.config.plugins).forEach((plugin) => {
    if (plugin === null || plugin === void 0 ? void 0 : plugin.destroy)
      plugin.destroy();
  });
};
var invokePluginsBeforeRender = ($app) => {
  Object.values($app.config.plugins).forEach((plugin) => {
    if (plugin === null || plugin === void 0 ? void 0 : plugin.beforeRender)
      plugin.beforeRender($app);
  });
};
function CalendarWrapper({ $app }) {
  var _a;
  const calendarId = randomStringId();
  const viewContainerId = randomStringId();
  y2(() => {
    var _a2;
    setWrapperElement($app, calendarId);
    initPlugins($app);
    if ((_a2 = $app.config.callbacks) === null || _a2 === void 0 ? void 0 : _a2.onRender) {
      $app.config.callbacks.onRender($app);
    }
    return () => destroyPlugins($app);
  }, []);
  const onResize = () => {
    handleWindowResize($app);
  };
  y2(() => {
    if ($app.config.isResponsive) {
      onResize();
      window.addEventListener("resize", onResize);
      return () => window.removeEventListener("resize", onResize);
    }
  }, []);
  const wrapperClasses = useWrapperClasses($app);
  const [currentView, setCurrentView] = d2();
  useSignalEffect(() => {
    const newView = $app.config.views.value.find((view) => view.name === $app.calendarState.view.value);
    const viewElement = document.getElementById(viewContainerId);
    if (!newView || !viewElement || newView.name === (currentView === null || currentView === void 0 ? void 0 : currentView.name))
      return;
    if (currentView)
      currentView.destroy();
    setCurrentView(newView);
    newView.render(viewElement, $app);
  });
  const [previousRangeStart, setPreviousRangeStart] = d2("");
  const [transitionClass, setTransitionClass] = d2("");
  useSignalEffect(() => {
    var _a2, _b;
    const newRangeStartIsLaterThanPrevious = (((_a2 = $app.calendarState.range.value) === null || _a2 === void 0 ? void 0 : _a2.start) || "") > previousRangeStart;
    setTransitionClass(newRangeStartIsLaterThanPrevious ? "sx__slide-left" : "sx__slide-right");
    setTimeout(() => {
      setTransitionClass("");
    }, 300);
    setPreviousRangeStart(((_b = $app.calendarState.range.value) === null || _b === void 0 ? void 0 : _b.start) || "");
  });
  useSignalEffect(() => {
    $app.datePickerConfig.locale.value = $app.config.locale.value;
  });
  return u2(k, { children: u2("div", { className: wrapperClasses.join(" "), id: calendarId, children: u2("div", { className: "sx__calendar", children: u2(AppContext.Provider, { value: $app, children: [u2(CalendarHeader, {}), u2("div", { className: ["sx__view-container", transitionClass].join(" "), id: viewContainerId }), $app.config.plugins.eventModal && $app.config.plugins.eventModal.calendarEvent.value && u2($app.config.plugins.eventModal.ComponentFn, { "$app": $app }, (_a = $app.config.plugins.eventModal.calendarEvent.value) === null || _a === void 0 ? void 0 : _a.id)] }) }) }) });
}
var externalEventToInternal = (event, config2) => {
  const { id, start, end, title, description, location, people, _options, ...foreignProperties } = event;
  return new CalendarEventBuilder(config2, id, start, end).withTitle(title).withDescription(description).withLocation(location).withPeople(people).withCalendarId(event.calendarId).withOptions(_options).withForeignProperties(foreignProperties).withCustomContent(event._customContent).build();
};
var EventsFacadeImpl = class {
  constructor($app) {
    Object.defineProperty(this, "$app", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: $app
    });
  }
  set(events) {
    this.$app.calendarEvents.list.value = events.map((event) => externalEventToInternal(event, this.$app.config));
  }
  add(event) {
    const newEvent = externalEventToInternal(event, this.$app.config);
    const copiedEvents = [...this.$app.calendarEvents.list.value];
    copiedEvents.push(newEvent);
    this.$app.calendarEvents.list.value = copiedEvents;
  }
  get(id) {
    var _a;
    return (_a = this.$app.calendarEvents.list.value.find((event) => event.id === id)) === null || _a === void 0 ? void 0 : _a._getExternalEvent();
  }
  getAll() {
    return this.$app.calendarEvents.list.value.map((event) => event._getExternalEvent());
  }
  remove(id) {
    const index = this.$app.calendarEvents.list.value.findIndex((event) => event.id === id);
    const copiedEvents = [...this.$app.calendarEvents.list.value];
    copiedEvents.splice(index, 1);
    this.$app.calendarEvents.list.value = copiedEvents;
  }
  update(event) {
    const index = this.$app.calendarEvents.list.value.findIndex((e4) => e4.id === event.id);
    const copiedEvents = [...this.$app.calendarEvents.list.value];
    copiedEvents.splice(index, 1, externalEventToInternal(event, this.$app.config));
    this.$app.calendarEvents.list.value = copiedEvents;
  }
};
var CalendarApp = class {
  constructor($app) {
    var _a;
    Object.defineProperty(this, "$app", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: $app
    });
    Object.defineProperty(this, "events", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "calendarContainerEl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.events = new EventsFacadeImpl(this.$app);
    invokePluginsBeforeRender(this.$app);
    Object.values(this.$app.config.plugins).forEach((plugin) => {
      if (!(plugin === null || plugin === void 0 ? void 0 : plugin.name))
        return;
      this[plugin.name] = plugin;
    });
    if ((_a = $app.config.callbacks) === null || _a === void 0 ? void 0 : _a.beforeRender) {
      $app.config.callbacks.beforeRender($app);
    }
  }
  render(el) {
    this.calendarContainerEl = el;
    E(_(CalendarWrapper, { $app: this.$app }), el);
  }
  destroy() {
    Object.values(this.$app.config.plugins || {}).forEach((plugin) => {
      if (!plugin || !plugin.destroy)
        return;
      plugin.destroy();
    });
    if (this.calendarContainerEl) {
      E(null, this.calendarContainerEl);
    }
  }
  setTheme(theme) {
    this.$app.calendarState.isDark.value = theme === "dark";
  }
  getTheme() {
    return this.$app.calendarState.isDark.value ? "dark" : "light";
  }
  /**
   * @internal
   * Purpose: To be consumed by framework adapters for custom component rendering.
   * */
  _setCustomComponentFn(fnId, fn2) {
    this.$app.config._customComponentFns[fnId] = fn2;
  }
};
var CalendarAppSingletonImpl = class {
  constructor(config2, timeUnitsImpl, calendarState, datePickerState, translate2, datePickerConfig, calendarEvents, elements = { calendarWrapper: void 0 }) {
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: config2
    });
    Object.defineProperty(this, "timeUnitsImpl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: timeUnitsImpl
    });
    Object.defineProperty(this, "calendarState", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: calendarState
    });
    Object.defineProperty(this, "datePickerState", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: datePickerState
    });
    Object.defineProperty(this, "translate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: translate2
    });
    Object.defineProperty(this, "datePickerConfig", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: datePickerConfig
    });
    Object.defineProperty(this, "calendarEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: calendarEvents
    });
    Object.defineProperty(this, "elements", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: elements
    });
  }
};
var CalendarAppSingletonBuilder = class {
  constructor() {
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "timeUnitsImpl", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "datePickerState", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "calendarState", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "translate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "datePickerConfig", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "calendarEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
  }
  build() {
    return new CalendarAppSingletonImpl(this.config, this.timeUnitsImpl, this.calendarState, this.datePickerState, this.translate, this.datePickerConfig, this.calendarEvents);
  }
  withConfig(config2) {
    this.config = config2;
    return this;
  }
  withTimeUnitsImpl(timeUnitsImpl) {
    this.timeUnitsImpl = timeUnitsImpl;
    return this;
  }
  withDatePickerState(datePickerState) {
    this.datePickerState = datePickerState;
    return this;
  }
  withCalendarState(calendarState) {
    this.calendarState = calendarState;
    return this;
  }
  withTranslate(translate2) {
    this.translate = translate2;
    return this;
  }
  withDatePickerConfig(datePickerConfig) {
    this.datePickerConfig = datePickerConfig;
    return this;
  }
  withCalendarEvents(calendarEvents) {
    this.calendarEvents = calendarEvents;
    return this;
  }
};
var DateFormatDelimiter;
(function(DateFormatDelimiter2) {
  DateFormatDelimiter2["SLASH"] = "/";
  DateFormatDelimiter2["DASH"] = "-";
  DateFormatDelimiter2["PERIOD"] = ".";
})(DateFormatDelimiter || (DateFormatDelimiter = {}));
var DateFormatOrder;
(function(DateFormatOrder2) {
  DateFormatOrder2["DMY"] = "DMY";
  DateFormatOrder2["MDY"] = "MDY";
  DateFormatOrder2["YMD"] = "YMD";
})(DateFormatOrder || (DateFormatOrder = {}));
var formatRules = {
  slashMDY: {
    delimiter: DateFormatDelimiter.SLASH,
    order: DateFormatOrder.MDY
  },
  slashDMY: {
    delimiter: DateFormatDelimiter.SLASH,
    order: DateFormatOrder.DMY
  },
  slashYMD: {
    delimiter: DateFormatDelimiter.SLASH,
    order: DateFormatOrder.YMD
  },
  periodDMY: {
    delimiter: DateFormatDelimiter.PERIOD,
    order: DateFormatOrder.DMY
  },
  dashYMD: {
    delimiter: DateFormatDelimiter.DASH,
    order: DateFormatOrder.YMD
  }
};
var dateFormatLocalizedRules = /* @__PURE__ */ new Map([
  ["en-US", formatRules.slashMDY],
  ["en-GB", formatRules.slashDMY],
  ["zh-CN", formatRules.slashYMD],
  ["de-DE", formatRules.periodDMY],
  ["sv-SE", formatRules.dashYMD]
]);
var LocaleNotSupportedError = class extends Error {
  constructor(locale) {
    super(`Locale not supported: ${locale}`);
  }
};
var InvalidDateFormatError = class extends Error {
  constructor(dateFormat, locale) {
    super(`Invalid date format: ${dateFormat} for locale: ${locale}`);
  }
};
var _getMatchesOrThrow = (format, matcher, locale) => {
  const matches = format.match(matcher);
  if (!matches)
    throw new InvalidDateFormatError(format, locale);
  return matches;
};
var toDateString = (format, locale) => {
  const internationalFormat = /^\d{4}-\d{2}-\d{2}$/;
  if (internationalFormat.test(format))
    return format;
  const localeDateFormatRule = dateFormatLocalizedRules.get(locale);
  if (!localeDateFormatRule)
    throw new LocaleNotSupportedError(locale);
  const { order, delimiter } = localeDateFormatRule;
  const pattern224Slashed = /^(\d{1,2})\/(\d{1,2})\/(\d{4})$/;
  const pattern224Dotted = /^(\d{1,2})\.(\d{1,2})\.(\d{4})$/;
  const pattern442Slashed = /^(\d{4})\/(\d{1,2})\/(\d{1,2})$/;
  if (order === DateFormatOrder.DMY && delimiter === DateFormatDelimiter.SLASH) {
    const matches = _getMatchesOrThrow(format, pattern224Slashed, locale);
    const [, day, month, year] = matches;
    return `${year}-${doubleDigit(+month)}-${doubleDigit(+day)}`;
  }
  if (order === DateFormatOrder.MDY && delimiter === DateFormatDelimiter.SLASH) {
    const matches = _getMatchesOrThrow(format, pattern224Slashed, locale);
    const [, month, day, year] = matches;
    return `${year}-${doubleDigit(+month)}-${doubleDigit(+day)}`;
  }
  if (order === DateFormatOrder.YMD && delimiter === DateFormatDelimiter.SLASH) {
    const matches = _getMatchesOrThrow(format, pattern442Slashed, locale);
    const [, year, month, day] = matches;
    return `${year}-${doubleDigit(+month)}-${doubleDigit(+day)}`;
  }
  if (order === DateFormatOrder.DMY && delimiter === DateFormatDelimiter.PERIOD) {
    const matches = _getMatchesOrThrow(format, pattern224Dotted, locale);
    const [, day, month, year] = matches;
    return `${year}-${doubleDigit(+month)}-${doubleDigit(+day)}`;
  }
  throw new InvalidDateFormatError(format, locale);
};
var createDatePickerState = (config2, selectedDateParam) => {
  var _a;
  const currentDayDateString = toDateString$1(/* @__PURE__ */ new Date());
  const initialSelectedDate = typeof selectedDateParam === "string" ? selectedDateParam : currentDayDateString;
  const isOpen = d3(false);
  const isDisabled = d3(config2.disabled || false);
  const datePickerView = d3(DatePickerView.MONTH_DAYS);
  const selectedDate = d3(initialSelectedDate);
  const datePickerDate = d3(initialSelectedDate || currentDayDateString);
  const isDark = d3(((_a = config2.style) === null || _a === void 0 ? void 0 : _a.dark) || false);
  const inputDisplayedValue = d3(selectedDateParam ? toLocalizedDateString(toJSDate(selectedDateParam), config2.locale.value) : "");
  const lastValidDisplayedValue = d3(inputDisplayedValue.value);
  E3(() => {
    try {
      const newValue = toDateString(inputDisplayedValue.value, config2.locale.value);
      if (newValue < config2.min || newValue > config2.max) {
        inputDisplayedValue.value = lastValidDisplayedValue.value;
        return;
      }
      selectedDate.value = newValue;
      datePickerDate.value = newValue;
      lastValidDisplayedValue.value = inputDisplayedValue.value;
    } catch (e4) {
      console.error("Error setting input value: ", e4);
    }
  });
  let wasInitialized = false;
  const handleOnChange = (selectedDate2) => {
    if (!wasInitialized)
      return wasInitialized = true;
    config2.listeners.onChange(selectedDate2);
  };
  E3(() => {
    var _a2;
    if ((_a2 = config2.listeners) === null || _a2 === void 0 ? void 0 : _a2.onChange)
      handleOnChange(selectedDate.value);
  });
  return {
    inputWrapperElement: d3(void 0),
    isOpen,
    isDisabled,
    datePickerView,
    selectedDate,
    datePickerDate,
    inputDisplayedValue,
    isDark,
    open: () => isOpen.value = true,
    close: () => isOpen.value = false,
    toggle: () => isOpen.value = !isOpen.value,
    setView: (view) => datePickerView.value = view
  };
};
var datePickerDeDE = {
  Date: "Datum",
  "MM/DD/YYYY": "TT.MM.JJJJ",
  "Next month": "Nächster Monat",
  "Previous month": "Vorheriger Monat",
  "Choose Date": "Datum auswählen"
};
var calendarDeDE = {
  Today: "Heute",
  Month: "Monat",
  Week: "Woche",
  Day: "Tag",
  "Select View": "Ansicht auswählen",
  events: "Ereignisse",
  event: "Ereignis",
  "No events": "Keine Ereignisse",
  "Next period": "Nächster Zeitraum",
  "Previous period": "Vorheriger Zeitraum",
  to: "bis",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Ganztägige und mehrtägige Ereignisse",
  "Link to {{n}} more events on {{date}}": "Link zu {{n}} weiteren Ereignissen am {{date}}",
  "Link to 1 more event on {{date}}": "Link zu 1 weiteren Ereignis am {{date}}",
  CW: "KW {{week}}"
};
var deDE = {
  ...datePickerDeDE,
  ...calendarDeDE
};
var datePickerEnUS = {
  Date: "Date",
  "MM/DD/YYYY": "MM/DD/YYYY",
  "Next month": "Next month",
  "Previous month": "Previous month",
  "Choose Date": "Choose Date"
};
var calendarEnUS = {
  Today: "Today",
  Month: "Month",
  Week: "Week",
  Day: "Day",
  "Select View": "Select View",
  events: "events",
  event: "event",
  "No events": "No events",
  "Next period": "Next period",
  "Previous period": "Previous period",
  to: "to",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Full day- and multiple day events",
  "Link to {{n}} more events on {{date}}": "Link to {{n}} more events on {{date}}",
  "Link to 1 more event on {{date}}": "Link to 1 more event on {{date}}",
  CW: "Week {{week}}"
};
var enUS = {
  ...datePickerEnUS,
  ...calendarEnUS
};
var datePickerItIT = {
  Date: "Data",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Mese successivo",
  "Previous month": "Mese precedente",
  "Choose Date": "Scegli la data"
};
var calendarItIT = {
  Today: "Oggi",
  Month: "Mese",
  Week: "Settimana",
  Day: "Giorno",
  "Select View": "Seleziona la vista",
  events: "eventi",
  event: "evento",
  "No events": "Nessun evento",
  "Next period": "Periodo successivo",
  "Previous period": "Periodo precedente",
  to: "a",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Eventi della giornata e plurigiornalieri",
  "Link to {{n}} more events on {{date}}": "Link a {{n}} eventi in più il {{date}}",
  "Link to 1 more event on {{date}}": "Link a 1 evento in più il {{date}}",
  CW: "Settimana {{week}}"
};
var itIT = {
  ...datePickerItIT,
  ...calendarItIT
};
var datePickerEnGB = {
  Date: "Date",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Next month",
  "Previous month": "Previous month",
  "Choose Date": "Choose Date"
};
var calendarEnGB = {
  Today: "Today",
  Month: "Month",
  Week: "Week",
  Day: "Day",
  "Select View": "Select View",
  events: "events",
  event: "event",
  "No events": "No events",
  "Next period": "Next period",
  "Previous period": "Previous period",
  to: "to",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Full day- and multiple day events",
  "Link to {{n}} more events on {{date}}": "Link to {{n}} more events on {{date}}",
  "Link to 1 more event on {{date}}": "Link to 1 more event on {{date}}",
  CW: "Week {{week}}"
};
var enGB = {
  ...datePickerEnGB,
  ...calendarEnGB
};
var datePickerSvSE = {
  Date: "Datum",
  "MM/DD/YYYY": "ÅÅÅÅ-MM-DD",
  "Next month": "Nästa månad",
  "Previous month": "Föregående månad",
  "Choose Date": "Välj datum"
};
var calendarSvSE = {
  Today: "Idag",
  Month: "Månad",
  Week: "Vecka",
  Day: "Dag",
  "Select View": "Välj vy",
  events: "händelser",
  event: "händelse",
  "No events": "Inga händelser",
  "Next period": "Nästa period",
  "Previous period": "Föregående period",
  to: "till",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Heldags- och flerdagshändelser",
  "Link to {{n}} more events on {{date}}": "Länk till {{n}} fler händelser den {{date}}",
  "Link to 1 more event on {{date}}": "Länk till 1 händelse till den {{date}}",
  CW: "Vecka {{week}}"
};
var svSE = {
  ...datePickerSvSE,
  ...calendarSvSE
};
var datePickerZhCN = {
  Date: "日期",
  "MM/DD/YYYY": "年/月/日",
  "Next month": "下个月",
  "Previous month": "上个月",
  "Choose Date": "选择日期"
};
var calendarZhCN = {
  Today: "今天",
  Month: "月",
  Week: "周",
  Day: "日",
  "Select View": "选择视图",
  events: "场活动",
  event: "活动",
  "No events": "没有活动",
  "Next period": "下一段时间",
  "Previous period": "上一段时间",
  to: "至",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "全天和多天活动",
  "Link to {{n}} more events on {{date}}": "链接到{{date}}上的{{n}}个更多活动",
  "Link to 1 more event on {{date}}": "链接到{{date}}上的1个更多活动",
  CW: "第{{week}}周"
};
var zhCN = {
  ...datePickerZhCN,
  ...calendarZhCN
};
var datePickerZhTW = {
  Date: "日期",
  "MM/DD/YYYY": "年/月/日",
  "Next month": "下個月",
  "Previous month": "上個月",
  "Choose Date": "選擇日期"
};
var calendarZhTW = {
  Today: "今天",
  Month: "月",
  Week: "周",
  Day: "日",
  "Select View": "選擇檢視模式",
  events: "場活動",
  event: "活動",
  "No events": "沒有活動",
  "Next period": "下一段時間",
  "Previous period": "上一段時間",
  to: "到",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "全天和多天活動",
  "Link to {{n}} more events on {{date}}": "連接到{{date}}上的{{n}}個更多活動",
  "Link to 1 more event on {{date}}": "連接到{{date}}上的1個更多活動",
  CW: "第{{week}}周"
};
var zhTW = {
  ...datePickerZhTW,
  ...calendarZhTW
};
var datePickerJaJP = {
  Date: "日付",
  "MM/DD/YYYY": "年/月/日",
  "Next month": "次の月",
  "Previous month": "前の月",
  "Choose Date": "日付を選択"
};
var calendarJaJP = {
  Today: "今日",
  Month: "月",
  Week: "週",
  Day: "日",
  "Select View": "ビューを選択",
  events: "イベント",
  event: "イベント",
  "No events": "イベントなし",
  "Next period": "次の期間",
  "Previous period": "前の期間",
  to: "から",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "終日および複数日イベント",
  "Link to {{n}} more events on {{date}}": "{{date}} に{{n}}件のイベントへのリンク",
  "Link to 1 more event on {{date}}": "{{date}} に1件のイベントへのリンク",
  CW: "週 {{week}}"
};
var jaJP = {
  ...datePickerJaJP,
  ...calendarJaJP
};
var datePickerRuRU = {
  Date: "Дата",
  "MM/DD/YYYY": "ММ/ДД/ГГГГ",
  "Next month": "Следующий месяц",
  "Previous month": "Прошлый месяц",
  "Choose Date": "Выберите дату"
};
var calendarRuRU = {
  Today: "Сегодня",
  Month: "Месяц",
  Week: "Неделя",
  Day: "День",
  "Select View": "Выберите вид",
  events: "события",
  event: "событие",
  "No events": "Нет событий",
  "Next period": "Следующий период",
  "Previous period": "Прошлый период",
  to: "по",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "События на целый день и несколько дней подряд",
  "Link to {{n}} more events on {{date}}": "Ссылка на {{n}} дополнительных событий на {{date}}",
  "Link to 1 more event on {{date}}": "Ссылка на 1 дополнительное событие на {{date}}",
  CW: "Неделя {{week}}"
};
var ruRU = {
  ...datePickerRuRU,
  ...calendarRuRU
};
var datePickerKoKR = {
  Date: "일자",
  "MM/DD/YYYY": "년/월/일",
  "Next month": "다음 달",
  "Previous month": "이전 달",
  "Choose Date": "날짜 선택"
};
var calendarKoKR = {
  Today: "오늘",
  Month: "월",
  Week: "주",
  Day: "일",
  "Select View": "보기 선택",
  events: "일정들",
  event: "일정",
  "No events": "일정 없음",
  "Next period": "다음",
  "Previous period": "이전",
  to: "부터",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "종일 및 복수일 일정",
  "Link to {{n}} more events on {{date}}": "{{date}}에 {{n}}개 이상의 이벤트로 이동",
  "Link to 1 more event on {{date}}": "{{date}}에 1개 이상의 이벤트로 이동",
  CW: "{{week}}주"
};
var koKR = {
  ...datePickerKoKR,
  ...calendarKoKR
};
var datePickerFrFR = {
  Date: "Date",
  "MM/DD/YYYY": "JJ/MM/AAAA",
  "Next month": "Mois suivant",
  "Previous month": "Mois précédent",
  "Choose Date": "Choisir une date"
};
var calendarFrFR = {
  Today: "Aujourd'hui",
  Month: "Mois",
  Week: "Semaine",
  Day: "Jour",
  "Select View": "Choisir la vue",
  events: "événements",
  event: "événement",
  "No events": "Aucun événement",
  "Next period": "Période suivante",
  "Previous period": "Période précédente",
  to: "à",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Événements d'une ou plusieurs journées",
  "Link to {{n}} more events on {{date}}": "Lien vers {{n}} autres événements le {{date}}",
  "Link to 1 more event on {{date}}": "Lien vers 1 autre événement le {{date}}",
  CW: "Semaine {{week}}"
};
var frFR = {
  ...datePickerFrFR,
  ...calendarFrFR
};
var datePickerDaDK = {
  Date: "Dato",
  "MM/DD/YYYY": "ÅÅÅÅ-MM-DD",
  "Next month": "Næste måned",
  "Previous month": "Foregående måned",
  "Choose Date": "Vælg dato"
};
var calendarDaDK = {
  Today: "I dag",
  Month: "Måned",
  Week: "Uge",
  Day: "Dag",
  "Select View": "Vælg visning",
  events: "begivenheder",
  event: "begivenhed",
  "No events": "Ingen begivenheder",
  "Next period": "Næste periode",
  "Previous period": "Forgående periode",
  to: "til",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Heldagsbegivenheder og flerdagsbegivenheder",
  "Link to {{n}} more events on {{date}}": "Link til {{n}} flere begivenheder den {{date}}",
  "Link to 1 more event on {{date}}": "Link til 1 mere begivenhed den {{date}}",
  CW: "Uge {{week}}"
};
var daDK = {
  ...datePickerDaDK,
  ...calendarDaDK
};
var datePickerPlPL = {
  Date: "Data",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Następny miesiąc",
  "Previous month": "Poprzedni miesiąc",
  "Choose Date": "Wybiewrz datę"
};
var calendarPlPL = {
  Today: "Dzisiaj",
  Month: "Miesiąc",
  Week: "Tydzień",
  Day: "Dzień",
  "Select View": "Wybierz widok",
  events: "wydarzenia",
  event: "wydarzenie",
  "No events": "Brak wydarzeń",
  "Next period": "Następny okres",
  "Previous period": "Poprzedni okres",
  to: "do",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Wydarzenia całodniowe i wielodniowe",
  "Link to {{n}} more events on {{date}}": "Link do {{n}} kolejnych wydarzeń w dniu {{date}}",
  "Link to 1 more event on {{date}}": "Link do 1 kolejnego wydarzenia w dniu {{date}}",
  CW: "Tydzień {{week}}"
};
var plPL = {
  ...datePickerPlPL,
  ...calendarPlPL
};
var datePickerEsES = {
  Date: "Fecha",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Siguiente mes",
  "Previous month": "Mes anterior",
  "Choose Date": "Seleccione una fecha"
};
var calendarEsES = {
  Today: "Hoy",
  Month: "Mes",
  Week: "Semana",
  Day: "Día",
  "Select View": "Seleccione una vista",
  events: "eventos",
  event: "evento",
  "No events": "Sin eventos",
  "Next period": "Siguiente período",
  "Previous period": "Período anterior",
  to: "a",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Día completo y eventos de múltiples días",
  "Link to {{n}} more events on {{date}}": "Enlace a {{n}} eventos más el {{date}}",
  "Link to 1 more event on {{date}}": "Enlace a 1 evento más el {{date}}",
  CW: "Semana {{week}}"
};
var esES = {
  ...datePickerEsES,
  ...calendarEsES
};
var calendarNlNL = {
  Today: "Vandaag",
  Month: "Maand",
  Week: "Week",
  Day: "Dag",
  "Select View": "Kies weergave",
  events: "gebeurtenissen",
  event: "gebeurtenis",
  "No events": "Geen gebeurtenissen",
  "Next period": "Volgende periode",
  "Previous period": "Vorige periode",
  to: "tot",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Evenementen van een hele dag en meerdere dagen",
  "Link to {{n}} more events on {{date}}": "Link naar {{n}} meer evenementen op {{date}}",
  "Link to 1 more event on {{date}}": "Link naar 1 meer evenement op {{date}}",
  CW: "Week {{week}}"
};
var datePickerNlNL = {
  Date: "Datum",
  "MM/DD/YYYY": "DD-MM-JJJJ",
  "Next month": "Volgende maand",
  "Previous month": "Vorige maand",
  "Choose Date": "Kies datum"
};
var nlNL = {
  ...datePickerNlNL,
  ...calendarNlNL
};
var datePickerPtBR = {
  Date: "Data",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Mês seguinte",
  "Previous month": "Mês anterior",
  "Choose Date": "Escolha uma data"
};
var calendarPtBR = {
  Today: "Hoje",
  Month: "Mês",
  Week: "Semana",
  Day: "Dia",
  "Select View": "Selecione uma visualização",
  events: "eventos",
  event: "evento",
  "No events": "Sem eventos",
  "Next period": "Período seguinte",
  "Previous period": "Período anterior",
  to: "a",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Dia inteiro e eventos de vários dias",
  "Link to {{n}} more events on {{date}}": "Link para mais {{n}} eventos em {{date}}",
  "Link to 1 more event on {{date}}": "Link para mais 1 evento em {{date}}",
  CW: "Semana {{week}}"
};
var ptBR = {
  ...datePickerPtBR,
  ...calendarPtBR
};
var datePickerSkSK = {
  Date: "Dátum",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Ďalší mesiac",
  "Previous month": "Predchádzajúci mesiac",
  "Choose Date": "Vyberte dátum"
};
var calendarSkSK = {
  Today: "Dnes",
  Month: "Mesiac",
  Week: "Týždeň",
  Day: "Deň",
  "Select View": "Vyberte zobrazenie",
  events: "udalosti",
  event: "udalosť",
  "No events": "Žiadne udalosti",
  "Next period": "Ďalšie obdobie",
  "Previous period": "Predchádzajúce obdobie",
  to: "do",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Celodenné a viacdňové udalosti",
  "Link to {{n}} more events on {{date}}": "Odkaz na {{n}} ďalších udalostí dňa {{date}}",
  "Link to 1 more event on {{date}}": "Odkaz na 1 ďalšiu udalosť dňa {{date}}",
  CW: "{{week}}. týždeň"
};
var skSK = {
  ...datePickerSkSK,
  ...calendarSkSK
};
var datePickerMkMK = {
  Date: "Датум",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Следен месец",
  "Previous month": "Претходен месец",
  "Choose Date": "Избери Датум"
};
var calendarMkMK = {
  Today: "Денес",
  Month: "Месец",
  Week: "Недела",
  Day: "Ден",
  "Select View": "Избери Преглед",
  events: "настани",
  event: "настан",
  "No events": "Нема настани",
  "Next period": "Следен период",
  "Previous period": "Претходен период",
  to: "до",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Целодневни и повеќедневни настани",
  "Link to {{n}} more events on {{date}}": "Линк до {{n}} повеќе настани на {{date}}",
  "Link to 1 more event on {{date}}": "Линк до 1 повеќе настан на {{date}}",
  CW: "Недела {{week}}"
};
var mkMK = {
  ...datePickerMkMK,
  ...calendarMkMK
};
var datePickerTrTR = {
  Date: "Tarih",
  "MM/DD/YYYY": "GG/AA/YYYY",
  "Next month": "Sonraki ay",
  "Previous month": "Önceki ay",
  "Choose Date": "Tarih Seç"
};
var calendarTrTR = {
  Today: "Bugün",
  Month: "Aylık",
  Week: "Haftalık",
  Day: "Günlük",
  "Select View": "Görünüm Seç",
  events: "etkinlikler",
  event: "etkinlik",
  "No events": "Etkinlik yok",
  "Next period": "Sonraki dönem",
  "Previous period": "Önceki dönem",
  to: "dan",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Tüm gün ve çoklu gün etkinlikleri",
  "Link to {{n}} more events on {{date}}": "{{date}} tarihinde {{n}} etkinliğe bağlantı",
  "Link to 1 more event on {{date}}": "{{date}} tarihinde 1 etkinliğe bağlantı",
  CW: "{{week}}. Hafta"
};
var trTR = {
  ...datePickerTrTR,
  ...calendarTrTR
};
var datePickerKyKG = {
  Date: "Датасы",
  "MM/DD/YYYY": "АА/КК/ЖЖЖЖ",
  "Next month": "Кийинки ай",
  "Previous month": "Өткөн ай",
  "Choose Date": "Күндү тандаңыз"
};
var calendarKyKG = {
  Today: "Бүгүн",
  Month: "Ай",
  Week: "Апта",
  Day: "Күн",
  "Select View": "Көрүнүштү тандаңыз",
  events: "Окуялар",
  event: "Окуя",
  "No events": "Окуя жок",
  "Next period": "Кийинки мезгил",
  "Previous period": "Өткөн мезгил",
  to: "чейин",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Күн бою жана бир нече күн катары менен болгон окуялар",
  "Link to {{n}} more events on {{date}}": "{{date}} күнүндө {{n}} окуяга байланыш",
  "Link to 1 more event on {{date}}": "{{date}} күнүндө 1 окуяга байланыш",
  CW: "Апта {{week}}"
};
var kyKG = {
  ...datePickerKyKG,
  ...calendarKyKG
};
var datePickerIdID = {
  Date: "Tanggal",
  "MM/DD/YYYY": "DD.MM.YYYY",
  "Next month": "Bulan depan",
  "Previous month": "Bulan sebelumnya",
  "Choose Date": "Pilih tanggal"
};
var calendarIdID = {
  Today: "Hari Ini",
  Month: "Bulan",
  Week: "Minggu",
  Day: "Hari",
  "Select View": "Pilih tampilan",
  events: "Acara",
  event: "Acara",
  "No events": "Tidak ada acara",
  "Next period": "Periode selanjutnya",
  "Previous period": "Periode sebelumnya",
  to: "sampai",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Sepanjang hari dan acara beberapa hari ",
  "Link to {{n}} more events on {{date}}": "Tautan ke {{n}} acara lainnya pada {{date}}",
  "Link to 1 more event on {{date}}": "Tautan ke 1 acara lainnya pada {{date}}",
  CW: "Minggu {{week}}"
};
var idID = {
  ...datePickerIdID,
  ...calendarIdID
};
var datePickerCsCZ = {
  Date: "Datum",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Další měsíc",
  "Previous month": "Předchozí měsíc",
  "Choose Date": "Vyberte datum"
};
var calendarCsCZ = {
  Today: "Dnes",
  Month: "Měsíc",
  Week: "Týden",
  Day: "Den",
  "Select View": "Vyberte zobrazení",
  events: "události",
  event: "událost",
  "No events": "Žádné události",
  "Next period": "Příští období",
  "Previous period": "Předchozí období",
  to: "do",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Celodenní a vícedenní události",
  "Link to {{n}} more events on {{date}}": "Odkaz na {{n}} dalších událostí dne {{date}}",
  "Link to 1 more event on {{date}}": "Odkaz na 1 další událost dne {{date}}",
  CW: "Týden {{week}}"
};
var csCZ = {
  ...datePickerCsCZ,
  ...calendarCsCZ
};
var datePickerEtEE = {
  Date: "Kuupäev",
  "MM/DD/YYYY": "PP.KK.AAAA",
  "Next month": "Järgmine kuu",
  "Previous month": "Eelmine kuu",
  "Choose Date": "Vali kuupäev"
};
var calendarEtEE = {
  Today: "Täna",
  Month: "Kuu",
  Week: "Nädal",
  Day: "Päev",
  "Select View": "Vali vaade",
  events: "sündmused",
  event: "sündmus",
  "No events": "Pole sündmusi",
  "Next period": "Järgmine periood",
  "Previous period": "Eelmine periood",
  to: "kuni",
  "Full day- and multiple day events": "Täispäeva- ja mitmepäevasündmused",
  "Link to {{n}} more events on {{date}}": "Link {{n}} rohkematele sündmustele kuupäeval {{date}}",
  "Link to 1 more event on {{date}}": "Link ühele lisasündmusele kuupäeval {{date}}",
  CW: "Nädala number {{week}}"
};
var etEE = {
  ...datePickerEtEE,
  ...calendarEtEE
};
var datePickerUkUA = {
  Date: "Дата",
  "MM/DD/YYYY": "ММ/ДД/РРРР",
  "Next month": "Наступний місяць",
  "Previous month": "Минулий місяць",
  "Choose Date": "Виберіть дату"
};
var calendarUkUA = {
  Today: "Сьогодні",
  Month: "Місяць",
  Week: "Тиждень",
  Day: "День",
  "Select View": "Виберіть вигляд",
  events: "події",
  event: "подія",
  "No events": "Немає подій",
  "Next period": "Наступний період",
  "Previous period": "Минулий період",
  to: "по",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Події на цілий день і кілька днів поспіль",
  "Link to {{n}} more events on {{date}}": "Посилання на {{n}} додаткові події на {{date}}",
  "Link to 1 more event on {{date}}": "Посилання на 1 додаткову подію на {{date}}",
  CW: "Тиждень {{week}}"
};
var ukUA = {
  ...datePickerUkUA,
  ...calendarUkUA
};
var datePickerSrLatnRS = {
  Date: "Datum",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Sledeći mesec",
  "Previous month": "Prethodni mesec",
  "Choose Date": "Izaberite datum"
};
var calendarSrLatnRS = {
  Today: "Danas",
  Month: "Mesec",
  Week: "Nedelja",
  Day: "Dan",
  "Select View": "Odaberite pregled",
  events: "Događaji",
  event: "Događaj",
  "No events": "Nema događaja",
  "Next period": "Naredni period",
  "Previous period": "Prethodni period",
  to: "do",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Celodnevni i višednevni događaji",
  "Link to {{n}} more events on {{date}}": "Link do još {{n}} događaja na {{date}}",
  "Link to 1 more event on {{date}}": "Link do jednog događaja na {{date}}",
  CW: "Nedelja {{week}}"
};
var srLatnRS = {
  ...datePickerSrLatnRS,
  ...calendarSrLatnRS
};
var datePickerCaES = {
  Date: "Data",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Següent mes",
  "Previous month": "Mes anterior",
  "Choose Date": "Selecciona una data"
};
var calendarCaES = {
  Today: "Avui",
  Month: "Mes",
  Week: "Setmana",
  Day: "Dia",
  "Select View": "Selecciona una vista",
  events: "Esdeveniments",
  event: "Esdeveniment",
  "No events": "Sense esdeveniments",
  "Next period": "Següent període",
  "Previous period": "Període anterior",
  to: "a",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Esdeveniments de dia complet i de múltiples dies",
  "Link to {{n}} more events on {{date}}": "Enllaç a {{n}} esdeveniments més el {{date}}",
  "Link to 1 more event on {{date}}": "Enllaç a 1 esdeveniment més el {{date}}",
  CW: "Setmana {{week}}"
};
var caES = {
  ...datePickerCaES,
  ...calendarCaES
};
var datePickerSrRS = {
  Date: "Датум",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Следећи месец",
  "Previous month": "Претходни месец",
  "Choose Date": "Изаберите Датум"
};
var calendarSrRS = {
  Today: "Данас",
  Month: "Месец",
  Week: "Недеља",
  Day: "Дан",
  "Select View": "Изаберите преглед",
  events: "Догађаји",
  event: "Догађај",
  "No events": "Нема догађаја",
  "Next period": "Следећи период",
  "Previous period": "Претходни период",
  to: "да",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Целодневни и вишедневни догађаји",
  "Link to {{n}} more events on {{date}}": "Линк до још {{n}} догађаја на {{date}}",
  "Link to 1 more event on {{date}}": "Линк до још 1 догађаја {{date}}",
  CW: "Недеља {{week}}"
};
var srRS = {
  ...datePickerSrRS,
  ...calendarSrRS
};
var datePickerLtLT = {
  Date: "Data",
  "MM/DD/YYYY": "MMMM-MM-DD",
  "Next month": "Kitas mėnuo",
  "Previous month": "Ankstesnis mėnuo",
  "Choose Date": "Pasirinkite datą"
};
var calendarLtLT = {
  Today: "Šiandien",
  Month: "Mėnuo",
  Week: "Savaitė",
  Day: "Diena",
  "Select View": "Pasirinkite vaizdą",
  events: "įvykiai",
  event: "įvykis",
  "No events": "Įvykių nėra",
  "Next period": "Kitas laikotarpis",
  "Previous period": "Ankstesnis laikotarpis",
  to: "iki",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Visos dienos ir kelių dienų įvykiai",
  "Link to {{n}} more events on {{date}}": "Nuoroda į dar {{n}} įvykius {{date}}",
  "Link to 1 more event on {{date}}": "Nuoroda į dar 1 vieną įvykį {{date}}",
  CW: "{{week}} savaitė"
};
var ltLT = {
  ...datePickerLtLT,
  ...calendarLtLT
};
var datePickerHrHR = {
  Date: "Datum",
  "MM/DD/YYYY": "DD/MM/YYYY",
  "Next month": "Sljedeći mjesec",
  "Previous month": "Prethodni mjesec",
  "Choose Date": "Izaberite datum"
};
var calendarHrHR = {
  Today: "Danas",
  Month: "Mjesec",
  Week: "Nedjelja",
  Day: "Dan",
  "Select View": "Odaberite pregled",
  events: "Događaji",
  event: "Događaj",
  "No events": "Nema događaja",
  "Next period": "Sljedeći period",
  "Previous period": "Prethodni period",
  to: "do",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Cjelodnevni i višednevni događaji",
  "Link to {{n}} more events on {{date}}": "Link do još {{n}} događaja na {{date}}",
  "Link to 1 more event on {{date}}": "Link do još jednog događaja na {{date}}",
  CW: "{{week}}. tjedan"
};
var hrHR = {
  ...datePickerHrHR,
  ...calendarHrHR
};
var datePickerSlSI = {
  Date: "Datum",
  "MM/DD/YYYY": "MM.DD.YYYY",
  "Next month": "Naslednji mesec",
  "Previous month": "Prejšnji mesec",
  "Choose Date": "Izberi datum"
};
var calendarSlSI = {
  Today: "Danes",
  Month: "Mesec",
  Week: "Teden",
  Day: "Dan",
  "Select View": "Izberi pogled",
  events: "dogodki",
  event: "dogodek",
  "No events": "Ni dogodkov",
  "Next period": "Naslednji dogodek",
  "Previous period": "Prejšnji dogodek",
  to: "do",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Celodnevni in večdnevni dogodki",
  "Link to {{n}} more events on {{date}}": "Povezava do {{n}} drugih dogodkov dne {{date}}",
  "Link to 1 more event on {{date}}": "Povezava do še enega dogodka dne {{date}}",
  CW: "Teden {{week}}"
};
var slSI = {
  ...datePickerSlSI,
  ...calendarSlSI
};
var datePickerFiFI = {
  Date: "Päivämäärä",
  "MM/DD/YYYY": "VVVV-KK-PP",
  "Next month": "Seuraava kuukausi",
  "Previous month": "Edellinen kuukausi",
  "Choose Date": "Valitse päivämäärä"
};
var calendarFiFI = {
  Today: "Tänään",
  Month: "Kuukausi",
  Week: "Viikko",
  Day: "Päivä",
  "Select View": "Valitse näkymä",
  events: "tapahtumaa",
  event: "tapahtuma",
  "No events": "Ei tapahtumia",
  "Next period": "Seuraava ajanjakso",
  "Previous period": "Edellinen ajanjakso",
  to: "-",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Koko ja usean päivän tapahtumat",
  "Link to {{n}} more events on {{date}}": "Linkki {{n}} lisätapahtumaan päivämäärällä {{date}}",
  "Link to 1 more event on {{date}}": "Linkki 1 lisätapahtumaan päivämäärällä {{date}}",
  CW: "Viikko {{week}}"
};
var fiFI = {
  ...datePickerFiFI,
  ...calendarFiFI
};
var datePickerRoRO = {
  Date: "Data",
  "MM/DD/YYYY": "LL/ZZ/AAAA",
  "Next month": "Luna următoare",
  "Previous month": "Luna anterioară",
  "Choose Date": "Alege data"
};
var calendarRoRO = {
  Today: "Astăzi",
  Month: "Lună",
  Week: "Săptămână",
  Day: "Zi",
  "Select View": "Selectează vizualizarea",
  events: "evenimente",
  event: "eveniment",
  "No events": "Fără evenimente",
  "Next period": "Perioada următoare",
  "Previous period": "Perioada anterioară",
  to: "până la",
  // as in 2/1/2020 to 2/2/2020
  "Full day- and multiple day events": "Evenimente pe durata întregii zile și pe durata mai multor zile",
  "Link to {{n}} more events on {{date}}": "Link către {{n}} evenimente suplimentare pe {{date}}",
  "Link to 1 more event on {{date}}": "Link către 1 eveniment suplimentar pe {{date}}",
  CW: "Săptămâna {{week}}"
};
var roRO = {
  ...datePickerRoRO,
  ...calendarRoRO
};
var InvalidLocaleError = class extends Error {
  constructor(locale) {
    super(`Invalid locale: ${locale}`);
  }
};
var translate = (locale, languages) => (key, translationVariables) => {
  if (!/^[a-z]{2}-[A-Z]{2}$/.test(locale.value) && "sr-Latn-RS" !== locale.value) {
    throw new InvalidLocaleError(locale.value);
  }
  const deHyphenatedLocale = locale.value.replaceAll("-", "");
  const language = languages.value[deHyphenatedLocale];
  if (!language)
    return key;
  let translation = language[key] || key;
  Object.keys(translationVariables || {}).forEach((variable) => {
    const value = String(translationVariables === null || translationVariables === void 0 ? void 0 : translationVariables[variable]);
    if (!value)
      return;
    translation = translation.replace(`{{${variable}}}`, value);
  });
  return translation;
};
var translations = {
  deDE,
  enUS,
  itIT,
  enGB,
  svSE,
  zhCN,
  zhTW,
  jaJP,
  ruRU,
  koKR,
  frFR,
  daDK,
  mkMK,
  plPL,
  esES,
  nlNL,
  ptBR,
  skSK,
  trTR,
  kyKG,
  idID,
  csCZ,
  etEE,
  ukUA,
  caES,
  srLatnRS,
  srRS,
  ltLT,
  hrHR,
  slSI,
  fiFI,
  roRO
};
var EventColors = class {
  constructor(config2) {
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: config2
    });
  }
  setLight() {
    Object.entries(this.config.calendars.value || {}).forEach(([calendarName, calendar]) => {
      if (!calendar.lightColors) {
        console.warn(`No light colors defined for calendar ${calendarName}`);
        return;
      }
      this.setColors(calendar.colorName, calendar.lightColors);
    });
  }
  setDark() {
    Object.entries(this.config.calendars.value || {}).forEach(([calendarName, calendar]) => {
      if (!calendar.darkColors) {
        console.warn(`No dark colors defined for calendar ${calendarName}`);
        return;
      }
      this.setColors(calendar.colorName, calendar.darkColors);
    });
  }
  setColors(colorName, colorDefinition) {
    document.documentElement.style.setProperty(`--sx-color-${colorName}`, colorDefinition.main);
    document.documentElement.style.setProperty(`--sx-color-${colorName}-container`, colorDefinition.container);
    document.documentElement.style.setProperty(`--sx-color-on-${colorName}-container`, colorDefinition.onContainer);
  }
};
var createCalendarState = (calendarConfig, timeUnitsImpl, selectedDate) => {
  var _a;
  const _view = d3(((_a = calendarConfig.views.value.find((view2) => view2.name === calendarConfig.defaultView)) === null || _a === void 0 ? void 0 : _a.name) || calendarConfig.views.value[0].name);
  const view = w3(() => {
    return _view.value;
  });
  const range = d3(null);
  let wasInitialized = false;
  let lastRangeEmitted__NEEDED_TO_PREVENT_RECURSION_IN_EVENT_RECURRENCE_PACKAGE_WHICH_CAUSES_RANGE_TO_UPDATE_AND_THUS_CAUSES_A_CYCLE = null;
  const callOnRangeUpdate = (_range) => {
    if (!wasInitialized)
      return wasInitialized = true;
    if (calendarConfig.callbacks.onRangeUpdate && _range.value) {
      calendarConfig.callbacks.onRangeUpdate(_range.value);
    }
    const lastRange = lastRangeEmitted__NEEDED_TO_PREVENT_RECURSION_IN_EVENT_RECURRENCE_PACKAGE_WHICH_CAUSES_RANGE_TO_UPDATE_AND_THUS_CAUSES_A_CYCLE;
    if (!_range.value)
      return;
    if ((lastRange === null || lastRange === void 0 ? void 0 : lastRange.start) === _range.value.start && (lastRange === null || lastRange === void 0 ? void 0 : lastRange.end) === _range.value.end)
      return;
    Object.values(calendarConfig.plugins || {}).forEach((plugin) => {
      var _a2;
      (_a2 = plugin === null || plugin === void 0 ? void 0 : plugin.onRangeUpdate) === null || _a2 === void 0 ? void 0 : _a2.call(plugin, _range.value);
      lastRangeEmitted__NEEDED_TO_PREVENT_RECURSION_IN_EVENT_RECURRENCE_PACKAGE_WHICH_CAUSES_RANGE_TO_UPDATE_AND_THUS_CAUSES_A_CYCLE = _range.value;
    });
  };
  E3(() => {
    if (range.value) {
      callOnRangeUpdate(range);
    }
  });
  const setRange = (date) => {
    var _a2, _b;
    const selectedView = calendarConfig.views.value.find((availableView) => availableView.name === _view.value);
    const newRange = selectedView.setDateRange({
      calendarConfig,
      date,
      range,
      timeUnitsImpl
    });
    if (newRange.start === ((_a2 = range.value) === null || _a2 === void 0 ? void 0 : _a2.start) && newRange.end === ((_b = range.value) === null || _b === void 0 ? void 0 : _b.end))
      return;
    range.value = newRange;
  };
  setRange(selectedDate || toDateString$1(/* @__PURE__ */ new Date()));
  const isCalendarSmall = d3(void 0);
  const isDark = d3(calendarConfig.isDark.value || false);
  E3(() => {
    const eventColors = new EventColors(calendarConfig);
    if (isDark.value) {
      eventColors.setDark();
    } else {
      eventColors.setLight();
    }
  });
  return {
    view,
    isDark,
    setRange,
    range,
    isCalendarSmall,
    setView: (newView, selectedDate2) => {
      r3(() => {
        _view.value = newView;
        setRange(selectedDate2);
      });
    }
  };
};
var createCalendarEventsImpl = (events, backgroundEvents, config2) => {
  const list = d3(events.map((event) => {
    return externalEventToInternal(event, config2);
  }));
  const filterPredicate = d3(void 0);
  return {
    list,
    filterPredicate,
    backgroundEvents: d3(backgroundEvents)
  };
};
var timePointsPerDay = (dayStart, dayEnd, isHybridDay) => {
  if (dayStart === dayEnd)
    return 2400;
  if (isHybridDay)
    return 2400 - dayStart + dayEnd;
  return dayEnd - dayStart;
};
var CalendarConfigImpl = class {
  constructor(locale = DEFAULT_LOCALE, firstDayOfWeek = DEFAULT_FIRST_DAY_OF_WEEK, defaultView = InternalViewName.Week, views = [], dayBoundaries = DEFAULT_DAY_BOUNDARIES, weekOptions, calendars = {}, plugins = {}, isDark = false, isResponsive = true, callbacks = {}, _customComponentFns = {}, minDate = void 0, maxDate = void 0, monthGridOptions = {
    nEventsPerDay: 4
  }, theme = void 0, translations2 = {}, showWeekNumbers = false) {
    Object.defineProperty(this, "defaultView", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: defaultView
    });
    Object.defineProperty(this, "plugins", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: plugins
    });
    Object.defineProperty(this, "isResponsive", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: isResponsive
    });
    Object.defineProperty(this, "callbacks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: callbacks
    });
    Object.defineProperty(this, "_customComponentFns", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: _customComponentFns
    });
    Object.defineProperty(this, "firstDayOfWeek", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "views", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "dayBoundaries", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "weekOptions", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "calendars", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "isDark", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "minDate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maxDate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "monthGridOptions", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "locale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: d3(DEFAULT_LOCALE)
    });
    Object.defineProperty(this, "theme", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "translations", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "showWeekNumbers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: d3(false)
    });
    this.locale = d3(locale);
    this.firstDayOfWeek = d3(firstDayOfWeek);
    this.views = d3(views);
    this.dayBoundaries = d3(dayBoundaries);
    this.weekOptions = d3(weekOptions);
    this.calendars = d3(calendars);
    this.isDark = d3(isDark);
    this.minDate = d3(minDate);
    this.maxDate = d3(maxDate);
    this.monthGridOptions = d3(monthGridOptions);
    this.theme = theme;
    this.translations = d3(translations2);
    this.showWeekNumbers = d3(showWeekNumbers);
  }
  get isHybridDay() {
    return this.dayBoundaries.value.start > this.dayBoundaries.value.end || this.dayBoundaries.value.start !== 0 && this.dayBoundaries.value.start === this.dayBoundaries.value.end;
  }
  get timePointsPerDay() {
    return timePointsPerDay(this.dayBoundaries.value.start, this.dayBoundaries.value.end, this.isHybridDay);
  }
};
var CalendarConfigBuilder = class {
  constructor() {
    Object.defineProperty(this, "locale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "firstDayOfWeek", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "defaultView", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "views", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "dayBoundaries", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "weekOptions", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {
        gridHeight: DEFAULT_WEEK_GRID_HEIGHT,
        nDays: 7,
        eventWidth: 100,
        timeAxisFormatOptions: { hour: "numeric" },
        eventOverlap: true
      }
    });
    Object.defineProperty(this, "monthGridOptions", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "calendars", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "plugins", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: {}
    });
    Object.defineProperty(this, "isDark", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: false
    });
    Object.defineProperty(this, "isResponsive", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: true
    });
    Object.defineProperty(this, "callbacks", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "minDate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "maxDate", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "backgroundEvents", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "theme", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "translations", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "showWeekNumbers", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
  }
  build() {
    return new CalendarConfigImpl(this.locale || DEFAULT_LOCALE, typeof this.firstDayOfWeek === "number" ? this.firstDayOfWeek : DEFAULT_FIRST_DAY_OF_WEEK, this.defaultView || InternalViewName.Week, this.views || [], this.dayBoundaries || DEFAULT_DAY_BOUNDARIES, this.weekOptions, this.calendars, this.plugins, this.isDark, this.isResponsive, this.callbacks, {}, this.minDate, this.maxDate, this.monthGridOptions, this.theme, this.translations, this.showWeekNumbers);
  }
  withLocale(locale) {
    this.locale = locale;
    return this;
  }
  withTranslations(translation) {
    this.translations = translation;
    return this;
  }
  withFirstDayOfWeek(firstDayOfWeek) {
    this.firstDayOfWeek = firstDayOfWeek;
    return this;
  }
  withDefaultView(defaultView) {
    this.defaultView = defaultView;
    return this;
  }
  withViews(views) {
    this.views = views;
    return this;
  }
  withDayBoundaries(dayBoundaries) {
    if (!dayBoundaries)
      return this;
    this.dayBoundaries = {
      start: timePointsFromString(dayBoundaries.start),
      end: timePointsFromString(dayBoundaries.end)
    };
    return this;
  }
  withWeekOptions(weekOptions) {
    this.weekOptions = {
      ...this.weekOptions,
      ...weekOptions
    };
    return this;
  }
  withCalendars(calendars) {
    this.calendars = calendars;
    return this;
  }
  withPlugins(plugins) {
    if (!plugins)
      return this;
    plugins.forEach((plugin) => {
      this.plugins[plugin.name] = plugin;
    });
    return this;
  }
  withIsDark(isDark) {
    this.isDark = isDark;
    return this;
  }
  withIsResponsive(isResponsive) {
    this.isResponsive = isResponsive;
    return this;
  }
  withCallbacks(listeners) {
    this.callbacks = listeners;
    return this;
  }
  withMinDate(minDate) {
    this.minDate = minDate;
    return this;
  }
  withMaxDate(maxDate) {
    this.maxDate = maxDate;
    return this;
  }
  withMonthGridOptions(monthOptions) {
    this.monthGridOptions = monthOptions;
    return this;
  }
  withBackgroundEvents(backgroundEvents) {
    this.backgroundEvents = backgroundEvents;
    return this;
  }
  withTheme(theme) {
    this.theme = theme;
    return this;
  }
  withWeekNumbers(showWeekNumbers) {
    this.showWeekNumbers = showWeekNumbers;
    return this;
  }
};
var createInternalConfig = (config2, plugins) => {
  return new CalendarConfigBuilder().withLocale(config2.locale).withFirstDayOfWeek(config2.firstDayOfWeek).withDefaultView(config2.defaultView).withViews(config2.views).withDayBoundaries(config2.dayBoundaries).withWeekOptions(config2.weekOptions).withCalendars(config2.calendars).withPlugins(plugins).withIsDark(config2.isDark).withIsResponsive(config2.isResponsive).withCallbacks(config2.callbacks).withMinDate(config2.minDate).withMaxDate(config2.maxDate).withMonthGridOptions(config2.monthGridOptions).withBackgroundEvents(config2.backgroundEvents).withTheme(config2.theme).withTranslations(config2.translations || translations).withWeekNumbers(config2.showWeekNumbers).build();
};
var Month;
(function(Month2) {
  Month2[Month2["JANUARY"] = 0] = "JANUARY";
  Month2[Month2["FEBRUARY"] = 1] = "FEBRUARY";
  Month2[Month2["MARCH"] = 2] = "MARCH";
  Month2[Month2["APRIL"] = 3] = "APRIL";
  Month2[Month2["MAY"] = 4] = "MAY";
  Month2[Month2["JUNE"] = 5] = "JUNE";
  Month2[Month2["JULY"] = 6] = "JULY";
  Month2[Month2["AUGUST"] = 7] = "AUGUST";
  Month2[Month2["SEPTEMBER"] = 8] = "SEPTEMBER";
  Month2[Month2["OCTOBER"] = 9] = "OCTOBER";
  Month2[Month2["NOVEMBER"] = 10] = "NOVEMBER";
  Month2[Month2["DECEMBER"] = 11] = "DECEMBER";
})(Month || (Month = {}));
var NoYearZeroError = class extends Error {
  constructor() {
    super("Year zero does not exist in the Gregorian calendar.");
  }
};
var ExtendedDateImpl = class extends Date {
  constructor(yearArg, monthArg, dateArg) {
    super(yearArg, monthArg, dateArg);
    if (yearArg === 0)
      throw new NoYearZeroError();
    this.setFullYear(yearArg);
  }
  get year() {
    return this.getFullYear();
  }
  get month() {
    return this.getMonth();
  }
  get date() {
    return this.getDate();
  }
};
var TimeUnitsImpl = class {
  constructor(config2) {
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: config2
    });
  }
  get firstDayOfWeek() {
    return this.config.firstDayOfWeek.value;
  }
  set firstDayOfWeek(firstDayOfWeek) {
    this.config.firstDayOfWeek.value = firstDayOfWeek;
  }
  getMonthWithTrailingAndLeadingDays(year, month) {
    if (year === 0)
      throw new NoYearZeroError();
    const firstDateOfMonth = new Date(year, month, 1);
    const monthWithDates = [this.getWeekFor(firstDateOfMonth)];
    let isInMonth = true;
    let first = monthWithDates[0][0];
    while (isInMonth) {
      const newFirstDayOfWeek = new Date(first.getFullYear(), first.getMonth(), first.getDate() + 7);
      if (newFirstDayOfWeek.getMonth() === month) {
        monthWithDates.push(this.getWeekFor(newFirstDayOfWeek));
        first = newFirstDayOfWeek;
      } else {
        isInMonth = false;
      }
    }
    return monthWithDates;
  }
  getWeekFor(date) {
    const week = [this.getFirstDateOfWeek(date)];
    while (week.length < 7) {
      const lastDateOfWeek = week[week.length - 1];
      const nextDateOfWeek = new Date(lastDateOfWeek);
      nextDateOfWeek.setDate(lastDateOfWeek.getDate() + 1);
      week.push(nextDateOfWeek);
    }
    return week;
  }
  getMonthsFor(year) {
    return Object.values(Month).filter((month) => !isNaN(Number(month))).map((month) => new ExtendedDateImpl(year, Number(month), 1));
  }
  getFirstDateOfWeek(date) {
    const dateIsNthDayOfWeek = date.getDay() - this.firstDayOfWeek;
    const firstDateOfWeek = date;
    if (dateIsNthDayOfWeek === 0) {
      return firstDateOfWeek;
    } else if (dateIsNthDayOfWeek > 0) {
      firstDateOfWeek.setDate(date.getDate() - dateIsNthDayOfWeek);
    } else {
      firstDateOfWeek.setDate(date.getDate() - (7 + dateIsNthDayOfWeek));
    }
    return firstDateOfWeek;
  }
};
var TimeUnitsBuilder = class {
  constructor() {
    Object.defineProperty(this, "config", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
  }
  build() {
    return new TimeUnitsImpl(this.config);
  }
  withConfig(config2) {
    this.config = config2;
    return this;
  }
};
var createTimeUnitsImpl = (internalConfig) => {
  return new TimeUnitsBuilder().withConfig(internalConfig).build();
};
var Placement;
(function(Placement2) {
  Placement2["TOP_START"] = "top-start";
  Placement2["TOP_END"] = "top-end";
  Placement2["BOTTOM_START"] = "bottom-start";
  Placement2["BOTTOM_END"] = "bottom-end";
})(Placement || (Placement = {}));
var ConfigImpl = class {
  constructor(locale = DEFAULT_LOCALE, firstDayOfWeek = DEFAULT_FIRST_DAY_OF_WEEK, min = toDateString$1(new Date(1970, 0, 1)), max = toDateString$1(new Date((/* @__PURE__ */ new Date()).getFullYear() + 50, 11, 31)), placement = Placement.BOTTOM_START, listeners = {}, style = {}, teleportTo, label, name, disabled) {
    Object.defineProperty(this, "min", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: min
    });
    Object.defineProperty(this, "max", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: max
    });
    Object.defineProperty(this, "placement", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: placement
    });
    Object.defineProperty(this, "listeners", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: listeners
    });
    Object.defineProperty(this, "style", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: style
    });
    Object.defineProperty(this, "teleportTo", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: teleportTo
    });
    Object.defineProperty(this, "label", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: label
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: name
    });
    Object.defineProperty(this, "disabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: disabled
    });
    Object.defineProperty(this, "locale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "firstDayOfWeek", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    this.locale = d3(locale);
    this.firstDayOfWeek = d3(firstDayOfWeek);
  }
};
var ConfigBuilder = class {
  constructor() {
    Object.defineProperty(this, "locale", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "firstDayOfWeek", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "min", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "max", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "placement", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "listeners", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "style", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "teleportTo", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "label", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "name", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
    Object.defineProperty(this, "disabled", {
      enumerable: true,
      configurable: true,
      writable: true,
      value: void 0
    });
  }
  build() {
    return new ConfigImpl(this.locale, this.firstDayOfWeek, this.min, this.max, this.placement, this.listeners, this.style, this.teleportTo, this.label, this.name, this.disabled);
  }
  withLocale(locale) {
    this.locale = locale;
    return this;
  }
  withFirstDayOfWeek(firstDayOfWeek) {
    this.firstDayOfWeek = firstDayOfWeek;
    return this;
  }
  withMin(min) {
    this.min = min;
    return this;
  }
  withMax(max) {
    this.max = max;
    return this;
  }
  withPlacement(placement) {
    this.placement = placement;
    return this;
  }
  withListeners(listeners) {
    this.listeners = listeners;
    return this;
  }
  withStyle(style) {
    this.style = style;
    return this;
  }
  withTeleportTo(teleportTo) {
    this.teleportTo = teleportTo;
    return this;
  }
  withLabel(label) {
    this.label = label;
    return this;
  }
  withName(name) {
    this.name = name;
    return this;
  }
  withDisabled(disabled) {
    this.disabled = disabled;
    return this;
  }
};
var createDatePickerConfig = (config2, dateSelectionCallback) => {
  var _a, _b;
  return new ConfigBuilder().withLocale(config2.locale).withFirstDayOfWeek(config2.firstDayOfWeek).withMin(config2.minDate).withMax(config2.maxDate).withTeleportTo((_a = config2.datePicker) === null || _a === void 0 ? void 0 : _a.teleportTo).withStyle((_b = config2.datePicker) === null || _b === void 0 ? void 0 : _b.style).withPlacement(Placement.BOTTOM_END).withListeners({ onChange: dateSelectionCallback }).build();
};
var createDateSelectionCallback = (calendarState, config2) => {
  let lastEmittedDate = null;
  return (date) => {
    var _a;
    calendarState.setRange(date);
    if (((_a = config2.callbacks) === null || _a === void 0 ? void 0 : _a.onSelectedDateUpdate) && date !== lastEmittedDate) {
      lastEmittedDate = date;
      config2.callbacks.onSelectedDateUpdate(date);
    }
  };
};
var validatePlugins = (configPlugins, pluginArg) => {
  if (configPlugins && pluginArg) {
    throw new Error("You cannot provide plugins over the config object and as an argument to createCalendar.");
  }
};
var validateConfig = (config2) => {
  var _a, _b, _c, _d;
  if (config2.selectedDate && !DateFormats.DATE_STRING.test(config2.selectedDate)) {
    throw new Error("[Schedule-X error]: selectedDate must have the format YYYY-MM-DD");
  }
  if (config2.minDate && !DateFormats.DATE_STRING.test(config2.minDate)) {
    throw new Error("[Schedule-X error]: minDate must have the format YYYY-MM-DD");
  }
  if (config2.maxDate && !DateFormats.DATE_STRING.test(config2.maxDate)) {
    throw new Error("[Schedule-X error]: maxDate must have the format YYYY-MM-DD");
  }
  if (typeof config2.firstDayOfWeek !== "undefined" && (config2.firstDayOfWeek < 0 || config2.firstDayOfWeek > 6)) {
    throw new Error("[Schedule-X error]: firstDayOfWeek must be a number between 0 and 6");
  }
  if (typeof ((_a = config2.weekOptions) === null || _a === void 0 ? void 0 : _a.gridHeight) !== "undefined" && config2.weekOptions.gridHeight < 0) {
    throw new Error("[Schedule-X error]: weekOptions.gridHeight must be a positive number");
  }
  if (typeof ((_b = config2.weekOptions) === null || _b === void 0 ? void 0 : _b.nDays) !== "undefined" && (config2.weekOptions.nDays < 1 || config2.weekOptions.nDays > 7)) {
    throw new Error("[Schedule-X error]: weekOptions.nDays must be a number between 1 and 7");
  }
  if (typeof ((_c = config2.weekOptions) === null || _c === void 0 ? void 0 : _c.eventWidth) !== "undefined" && (config2.weekOptions.eventWidth < 1 || config2.weekOptions.eventWidth > 100)) {
    throw new Error("[Schedule-X error]: weekOptions.eventWidth must be an integer between 1 and 100");
  }
  if (typeof ((_d = config2.monthGridOptions) === null || _d === void 0 ? void 0 : _d.nEventsPerDay) !== "undefined" && config2.monthGridOptions.nEventsPerDay < 0) {
    throw new Error("[Schedule-X error]: monthGridOptions.nEventsPerDay must be a positive number");
  }
  const dayBoundaryPattern = /^\d{2}:\d{2}$/;
  if (typeof config2.dayBoundaries !== "undefined") {
    const startFormatIsInvalid = !dayBoundaryPattern.test(config2.dayBoundaries.start);
    const endFormatIsInvalid = !dayBoundaryPattern.test(config2.dayBoundaries.end);
    if (startFormatIsInvalid || endFormatIsInvalid) {
      throw new Error('[Schedule-X error]: dayBoundaries must be an object with "start"- and "end" properties, each with the format HH:mm');
    }
  }
};
var validateEvents = (events = []) => {
  events === null || events === void 0 ? void 0 : events.forEach((event) => {
    if (!dateTimeStringRegex.test(event.start) && !dateStringRegex.test(event.start)) {
      throw new Error(`[Schedule-X error]: Event start time ${event.start} is not a valid time format. Please refer to the docs for more information.`);
    }
    if (!dateTimeStringRegex.test(event.end) && !dateStringRegex.test(event.end)) {
      throw new Error(`[Schedule-X error]: Event end time ${event.end} is not a valid time format. Please refer to the docs for more information.`);
    }
    const isIdDecimalNumber = typeof event.id === "number" && event.id % 1 !== 0;
    if (isIdDecimalNumber) {
      throw new Error(`[Schedule-X error]: Event id ${event.id} is not a valid id. Only non-unicode characters that can be used by document.querySelector is allowed, see: https://developer.mozilla.org/en-US/docs/Web/CSS/ident. We recommend using uuids or integers.`);
    }
    if (typeof event.id === "string" && !/^[a-zA-Z0-9_-]*$/.test(event.id)) {
      throw new Error(`[Schedule-X error]: Event id ${event.id} is not a valid id. Only non-unicode characters that can be used by document.querySelector is allowed, see: https://developer.mozilla.org/en-US/docs/Web/CSS/ident. We recommend using uuids or integers.`);
    }
    if (typeof event.id !== "string" && typeof event.id !== "number") {
      throw new Error(`[Schedule-X error]: Event id ${event.id} is not a valid id. Only non-unicode characters that can be used by document.querySelector is allowed, see: https://developer.mozilla.org/en-US/docs/Web/CSS/ident. We recommend using uuids or integers.`);
    }
  });
};
var createCalendarAppSingleton = (config2, plugins) => {
  var _a;
  const internalConfig = createInternalConfig(config2, plugins);
  const timeUnitsImpl = createTimeUnitsImpl(internalConfig);
  const calendarState = createCalendarState(internalConfig, timeUnitsImpl, config2.selectedDate);
  const dateSelectionCallback = createDateSelectionCallback(calendarState, config2);
  const datePickerConfig = createDatePickerConfig(config2, dateSelectionCallback);
  const datePickerState = createDatePickerState(datePickerConfig, config2.selectedDate || ((_a = config2.datePicker) === null || _a === void 0 ? void 0 : _a.selectedDate));
  const calendarEvents = createCalendarEventsImpl(config2.events || [], config2.backgroundEvents || [], internalConfig);
  return new CalendarAppSingletonBuilder().withConfig(internalConfig).withTimeUnitsImpl(timeUnitsImpl).withDatePickerState(datePickerState).withCalendarEvents(calendarEvents).withDatePickerConfig(datePickerConfig).withCalendarState(calendarState).withTranslate(translate(internalConfig.locale, internalConfig.translations)).build();
};
var createCalendar = (config2, plugins) => {
  validatePlugins(config2.plugins, plugins);
  if (config2.skipValidation !== true) {
    validateEvents(config2.events);
    validateConfig(config2);
  }
  return new CalendarApp(createCalendarAppSingleton(config2, plugins || config2.plugins || []));
};
var createWeekForMonth = (week, day) => {
  week.push({
    date: toDateString$1(day),
    events: {},
    backgroundEvents: []
  });
  return week;
};
var createMonth = (date, timeUnitsImpl) => {
  const { year, month: monthFromDate } = toIntegers(date);
  const monthWithDates = timeUnitsImpl.getMonthWithTrailingAndLeadingDays(year, monthFromDate);
  const month = [];
  for (const week of monthWithDates) {
    month.push(week.reduce(createWeekForMonth, []));
  }
  return month;
};
function MonthGridEvent({ gridRow, calendarEvent, date, isFirstWeek, isLastWeek }) {
  var _a, _b, _c, _d, _e;
  const $app = x2(AppContext);
  const hasOverflowLeft = isFirstWeek && ((_a = $app.calendarState.range.value) === null || _a === void 0 ? void 0 : _a.start) && dateFromDateTime(calendarEvent.start) < dateFromDateTime($app.calendarState.range.value.start);
  const hasOverflowRight = isLastWeek && ((_b = $app.calendarState.range.value) === null || _b === void 0 ? void 0 : _b.end) && dateFromDateTime(calendarEvent.end) > dateFromDateTime($app.calendarState.range.value.end);
  const { createDragStartTimeout, setClickedEventIfNotDragging, setClickedEvent } = useEventInteractions($app);
  const hasStartDate = dateFromDateTime(calendarEvent.start) === date;
  const nDays = calendarEvent._eventFragments[date];
  const eventCSSVariables = {
    borderLeft: hasStartDate ? `4px solid var(--sx-color-${calendarEvent._color})` : void 0,
    color: `var(--sx-color-on-${calendarEvent._color}-container)`,
    backgroundColor: `var(--sx-color-${calendarEvent._color}-container)`,
    // CORRELATION ID: 2 (10px subtracted from width)
    // nDays * 100% for the width of each day + 1px for border - 10 px for horizontal gap between events
    width: `calc(${nDays * 100 + "%"} + ${nDays}px - 10px)`
  };
  const handleStartDrag = (uiEvent) => {
    var _a2;
    if (isUIEventTouchEvent(uiEvent))
      uiEvent.preventDefault();
    if (!uiEvent.target)
      return;
    if (!$app.config.plugins.dragAndDrop || ((_a2 = calendarEvent._options) === null || _a2 === void 0 ? void 0 : _a2.disableDND))
      return;
    $app.config.plugins.dragAndDrop.createMonthGridDragHandler(calendarEvent, $app);
  };
  const customComponent = $app.config._customComponentFns.monthGridEvent;
  const customComponentId = customComponent ? "custom-month-grid-event-" + randomStringId() : void 0;
  y2(() => {
    if (!customComponent)
      return;
    customComponent(getElementByCCID(customComponentId), {
      calendarEvent: calendarEvent._getExternalEvent(),
      hasStartDate
    });
  }, [calendarEvent]);
  const handleOnClick = (e4) => {
    e4.stopPropagation();
    invokeOnEventClickCallback($app, calendarEvent, e4);
  };
  const handleOnDoubleClick = (e4) => {
    e4.stopPropagation();
    invokeOnEventDoubleClickCallback($app, calendarEvent, e4);
  };
  const handleKeyDown = (e4) => {
    if (e4.key === "Enter" || e4.key === " ") {
      e4.stopPropagation();
      setClickedEvent(e4, calendarEvent);
      invokeOnEventClickCallback($app, calendarEvent, e4);
      nextTick(() => {
        focusModal($app);
      });
    }
  };
  const classNames = [
    "sx__event",
    "sx__month-grid-event",
    "sx__month-grid-cell"
  ];
  if ((_c = calendarEvent._options) === null || _c === void 0 ? void 0 : _c.additionalClasses) {
    classNames.push(...calendarEvent._options.additionalClasses);
  }
  if (hasOverflowLeft)
    classNames.push("sx__month-grid-event--overflow-left");
  if (hasOverflowRight)
    classNames.push("sx__month-grid-event--overflow-right");
  const hasCustomContent = (_d = calendarEvent._customContent) === null || _d === void 0 ? void 0 : _d.monthGrid;
  return u2("div", { draggable: !!$app.config.plugins.dragAndDrop, "data-event-id": calendarEvent.id, "data-ccid": customComponentId, onMouseDown: (e4) => createDragStartTimeout(handleStartDrag, e4), onMouseUp: (e4) => setClickedEventIfNotDragging(calendarEvent, e4), onTouchStart: (e4) => createDragStartTimeout(handleStartDrag, e4), onTouchEnd: (e4) => setClickedEventIfNotDragging(calendarEvent, e4), onClick: handleOnClick, onDblClick: handleOnDoubleClick, onKeyDown: handleKeyDown, className: classNames.join(" "), style: {
    gridRow,
    width: eventCSSVariables.width,
    padding: customComponent ? "0px" : void 0,
    borderLeft: customComponent ? void 0 : eventCSSVariables.borderLeft,
    color: customComponent ? void 0 : eventCSSVariables.color,
    backgroundColor: customComponent ? void 0 : eventCSSVariables.backgroundColor
  }, tabIndex: 0, role: "button", children: [!customComponent && !hasCustomContent && u2(k, { children: [dateTimeStringRegex.test(calendarEvent.start) && u2("div", { className: "sx__month-grid-event-time", children: timeFn(calendarEvent.start, $app.config.locale.value) }), u2("div", { className: "sx__month-grid-event-title", children: calendarEvent.title })] }), hasCustomContent && u2("div", { dangerouslySetInnerHTML: {
    __html: ((_e = calendarEvent._customContent) === null || _e === void 0 ? void 0 : _e.monthGrid) || ""
  } })] });
}
function MonthGridDay({ day, isFirstWeek, isLastWeek }) {
  const $app = x2(AppContext);
  const nEventsInDay = Object.values(day.events).filter((event) => typeof event === "object" || event === DATE_GRID_BLOCKER).length;
  const getEventTranslationSingularOrPlural = (nOfAdditionalEvents) => {
    if (nOfAdditionalEvents === 1)
      return $app.translate("event");
    return $app.translate("events");
  };
  const getAriaLabelSingularOrPlural = (nOfAdditionalEvents) => {
    if (nOfAdditionalEvents === 1) {
      return $app.translate("Link to 1 more event on {{date}}", {
        date: getLocalizedDate(day.date, $app.config.locale.value)
      });
    }
    return $app.translate("Link to {{n}} more events on {{date}}", {
      date: getLocalizedDate(day.date, $app.config.locale.value),
      n: nEventsInDay - $app.config.monthGridOptions.value.nEventsPerDay
    });
  };
  const handleClickAdditionalEvents = (e4) => {
    e4.stopPropagation();
    if ($app.config.callbacks.onClickPlusEvents)
      $app.config.callbacks.onClickPlusEvents(day.date);
    if (!$app.config.views.value.find((view) => view.name === InternalViewName.Day))
      return;
    setTimeout(() => {
      $app.datePickerState.selectedDate.value = day.date;
      $app.calendarState.setView(InternalViewName.Day, day.date);
    }, 250);
  };
  const dateClassNames = ["sx__month-grid-day__header-date"];
  const jsDate = toJSDate(day.date);
  const dayDate = jsDate;
  if (isToday(dayDate))
    dateClassNames.push("sx__is-today");
  const { month: selectedDateMonth } = toIntegers($app.datePickerState.selectedDate.value);
  const { month: dayMonth } = toIntegers(day.date);
  const baseClasses = [
    "sx__month-grid-day",
    getClassNameForWeekday(jsDate.getDay())
  ];
  const [wrapperClasses, setWrapperClasses] = d2(baseClasses);
  y2(() => {
    const classes = [...baseClasses];
    if (dayMonth !== selectedDateMonth)
      classes.push("is-leading-or-trailing");
    if ($app.datePickerState.selectedDate.value === day.date)
      classes.push("is-selected");
    setWrapperClasses(classes);
  }, [$app.datePickerState.selectedDate.value]);
  const getNumberOfNonDisplayedEvents = () => {
    return Object.values(day.events).slice($app.config.monthGridOptions.value.nEventsPerDay).filter((event) => event === DATE_GRID_BLOCKER || typeof event === "object").length;
  };
  const numberOfNonDisplayedEvents = getNumberOfNonDisplayedEvents();
  const dayStartDateTime = day.date + " 00:00";
  const dayEndDateTime = day.date + " 23:59";
  const fullDayBackgroundEvent = day.backgroundEvents.find((event) => {
    const eventStartWithTime = dateStringRegex.test(event.start) ? event.start + " 00:00" : event.start;
    const eventEndWithTime = dateStringRegex.test(event.end) ? event.end + " 23:59" : event.end;
    return eventStartWithTime <= dayStartDateTime && eventEndWithTime >= dayEndDateTime;
  });
  const handleMouseDown = (e4) => {
    const target = e4.target;
    if (!target.classList.contains("sx__month-grid-day"))
      return;
    const callback = $app.config.callbacks.onMouseDownMonthGridDate;
    if (callback)
      callback(day.date, e4);
  };
  const monthGridDayNameCustomComponent = $app.config._customComponentFns.monthGridDayName;
  const monthGridDayNameCCID = d2(monthGridDayNameCustomComponent ? randomStringId() : "")[0];
  y2(() => {
    if (!monthGridDayNameCustomComponent)
      return;
    const dayNameEl = document.querySelector(`[data-ccid="${monthGridDayNameCCID}"]`);
    if (!(dayNameEl instanceof HTMLElement)) {
      return;
    }
    monthGridDayNameCustomComponent(dayNameEl, {
      day: toJSDate(day.date).getDay()
    });
  }, [day]);
  const monthGridDateCustomComponent = $app.config._customComponentFns.monthGridDate;
  const monthGridDateCCID = d2(monthGridDateCustomComponent ? randomStringId() : "")[0];
  y2(() => {
    if (!monthGridDateCustomComponent)
      return;
    const dateEl = document.querySelector(`[data-ccid="${monthGridDateCCID}"]`);
    if (!(dateEl instanceof HTMLElement))
      return;
    monthGridDateCustomComponent(dateEl, {
      date: toJSDate(day.date).getDate()
    });
  }, [day]);
  return u2("div", { className: wrapperClasses.join(" "), "data-date": day.date, onClick: () => $app.config.callbacks.onClickDate && $app.config.callbacks.onClickDate(day.date), "aria-label": getLocalizedDate(day.date, $app.config.locale.value), onDblClick: () => {
    var _a, _b;
    return (_b = (_a = $app.config.callbacks).onDoubleClickDate) === null || _b === void 0 ? void 0 : _b.call(_a, day.date);
  }, onMouseDown: handleMouseDown, children: [fullDayBackgroundEvent && u2(k, { children: u2("div", { className: "sx__month-grid-background-event", title: fullDayBackgroundEvent.title, style: {
    ...fullDayBackgroundEvent.style
  } }) }), u2("div", { className: "sx__month-grid-day__header", children: [isFirstWeek ? u2(k, { children: monthGridDayNameCustomComponent ? u2("div", { "data-ccid": monthGridDayNameCCID }) : u2("div", { className: "sx__month-grid-day__header-day-name", children: getDayNameShort(dayDate, $app.config.locale.value) }) }) : null, monthGridDateCCID ? u2("div", { "data-ccid": monthGridDateCCID }) : u2("div", { className: dateClassNames.join(" "), children: dayDate.getDate() })] }), u2("div", { className: "sx__month-grid-day__events", children: Object.values(day.events).slice(0, $app.config.monthGridOptions.value.nEventsPerDay).map((event, index) => {
    if (typeof event !== "object")
      return u2("div", { className: "sx__month-grid-blocker sx__month-grid-cell", style: { gridRow: index + 1 } });
    return u2(MonthGridEvent, { gridRow: index + 1, calendarEvent: event, date: day.date, isFirstWeek, isLastWeek });
  }) }), numberOfNonDisplayedEvents > 0 ? u2("button", { type: "button", className: "sx__month-grid-day__events-more sx__ripple--wide", "aria-label": getAriaLabelSingularOrPlural(numberOfNonDisplayedEvents), onClick: handleClickAdditionalEvents, children: `+ ${numberOfNonDisplayedEvents} ${getEventTranslationSingularOrPlural(numberOfNonDisplayedEvents)}` }) : null] });
}
function MonthGridWeek({ week, isFirstWeek, isLastWeek }) {
  const $app = x2(AppContext);
  return u2("div", { className: "sx__month-grid-week", children: [$app.config.showWeekNumbers.value && u2("div", { className: "sx__month-grid-week__week-number", children: getWeekNumber(toJSDate(week[0].date), $app.config.firstDayOfWeek.value) }), week.map((day) => {
    const dateKey = day.date;
    return u2(MonthGridDay, { day, isFirstWeek, isLastWeek }, dateKey);
  })] });
}
var positionInMonthWeek = (sortedEvents, week) => {
  const weekDates = Object.keys(week).sort();
  const firstDateOfWeek = weekDates[0];
  const lastDateOfWeek = weekDates[weekDates.length - 1];
  const occupiedLevels = /* @__PURE__ */ new Set();
  for (const event of sortedEvents) {
    const eventOriginalStartDate = dateFromDateTime(event.start);
    const eventOriginalEndDate = dateFromDateTime(event.end);
    const isEventStartInWeek = !!week[eventOriginalStartDate];
    let isEventInWeek = isEventStartInWeek;
    if (!isEventStartInWeek && eventOriginalStartDate < firstDateOfWeek && eventOriginalEndDate >= firstDateOfWeek) {
      isEventInWeek = true;
    }
    if (!isEventInWeek)
      continue;
    const firstDateOfEvent = isEventStartInWeek ? eventOriginalStartDate : firstDateOfWeek;
    const lastDateOfEvent = eventOriginalEndDate <= lastDateOfWeek ? eventOriginalEndDate : lastDateOfWeek;
    const eventDays = Object.values(week).filter((day) => {
      return day.date >= firstDateOfEvent && day.date <= lastDateOfEvent;
    });
    let levelInWeekForEvent;
    let testLevel = 0;
    while (levelInWeekForEvent === void 0) {
      const isLevelFree = eventDays.every((day) => {
        return !day.events[testLevel];
      });
      if (isLevelFree) {
        levelInWeekForEvent = testLevel;
        occupiedLevels.add(testLevel);
      } else
        testLevel++;
    }
    for (const [eventDayIndex, eventDay] of eventDays.entries()) {
      if (eventDayIndex === 0) {
        event._eventFragments[firstDateOfEvent] = eventDays.length;
        eventDay.events[levelInWeekForEvent] = event;
      } else {
        eventDay.events[levelInWeekForEvent] = DATE_GRID_BLOCKER;
      }
    }
  }
  for (const level of Array.from(occupiedLevels)) {
    for (const [, day] of Object.entries(week)) {
      if (!day.events[level]) {
        day.events[level] = void 0;
      }
    }
  }
  return week;
};
var positionInMonth = (month, sortedEvents) => {
  const weeks = [];
  month.forEach((week) => {
    const weekMap = {};
    week.forEach((day) => weekMap[day.date] = day);
    weeks.push(weekMap);
  });
  weeks.forEach((week) => positionInMonthWeek(sortedEvents, week));
  return month;
};
var MonthGridWrapper = ({ $app, id }) => {
  const [month, setMonth] = d2([]);
  useSignalEffect(() => {
    $app.calendarEvents.list.value.forEach((event) => {
      event._eventFragments = {};
    });
    const newMonth = createMonth($app.datePickerState.selectedDate.value, $app.timeUnitsImpl);
    newMonth.forEach((week) => {
      week.forEach((day) => {
        day.backgroundEvents = filterByRange($app.calendarEvents.backgroundEvents.value, {
          start: day.date,
          end: day.date
        });
      });
    });
    const filteredEvents = $app.calendarEvents.filterPredicate.value ? $app.calendarEvents.list.value.filter($app.calendarEvents.filterPredicate.value) : $app.calendarEvents.list.value;
    setMonth(positionInMonth(newMonth, filteredEvents.sort(sortEventsForMonthGrid)));
  });
  return u2(AppContext.Provider, { value: $app, children: u2("div", { id, className: "sx__month-grid-wrapper", children: month.map((week, index) => u2(MonthGridWeek, { week, isFirstWeek: index === 0, isLastWeek: index === month.length - 1 }, index)) }) });
};
var config$1 = {
  name: InternalViewName.MonthGrid,
  label: "Month",
  setDateRange: setRangeForMonth,
  Component: MonthGridWrapper,
  hasWideScreenCompat: true,
  hasSmallScreenCompat: false,
  backwardForwardFn: addMonths,
  backwardForwardUnits: 1
};
var viewMonthGrid = createPreactView(config$1);
var createViewMonthGrid = () => createPreactView(config$1);
var createAgendaMonth = (date, timeUnitsImpl) => {
  const { year, month } = toIntegers(date);
  const monthWithDates = timeUnitsImpl.getMonthWithTrailingAndLeadingDays(year, month);
  return {
    weeks: monthWithDates.map((week) => {
      return week.map((date2) => {
        return {
          date: toDateString$1(date2),
          events: []
        };
      });
    })
  };
};
function MonthAgendaDay({ day, isActive, setActiveDate }) {
  const $app = x2(AppContext);
  const { month: monthSelected } = toIntegers($app.datePickerState.selectedDate.value);
  const { month: monthOfDay } = toIntegers(day.date);
  const jsDate = toJSDate(day.date);
  const dayClasses = [
    "sx__month-agenda-day",
    getClassNameForWeekday(jsDate.getDay())
  ];
  if (isActive)
    dayClasses.push("sx__month-agenda-day--active");
  if (monthOfDay !== monthSelected)
    dayClasses.push("is-leading-or-trailing");
  const handleClick = (e4, callback) => {
    setActiveDate(day.date);
    if (!callback)
      return;
    callback(day.date);
  };
  const hasFocus = (weekDay) => weekDay.date === $app.datePickerState.selectedDate.value;
  const handleKeyDown = (event) => {
    const keyMapDaysToAdd = /* @__PURE__ */ new Map([
      ["ArrowDown", 7],
      ["ArrowUp", -7],
      ["ArrowLeft", -1],
      ["ArrowRight", 1]
    ]);
    $app.datePickerState.selectedDate.value = addDays($app.datePickerState.selectedDate.value, keyMapDaysToAdd.get(event.key) || 0);
  };
  const isBeforeMinDate = !!($app.config.minDate.value && day.date < $app.config.minDate.value);
  const isPastMaxDate = !!($app.config.maxDate.value && day.date > $app.config.maxDate.value);
  return u2("button", { type: "button", className: dayClasses.join(" "), onClick: (e4) => handleClick(e4, $app.config.callbacks.onClickAgendaDate), onDblClick: (e4) => handleClick(e4, $app.config.callbacks.onDoubleClickAgendaDate), disabled: isBeforeMinDate || isPastMaxDate, "aria-label": getLocalizedDate(day.date, $app.config.locale.value), tabIndex: hasFocus(day) ? 0 : -1, "data-agenda-focus": hasFocus(day) ? "true" : void 0, onKeyDown: handleKeyDown, children: [u2("div", { children: jsDate.getDate() }), u2("div", { className: "sx__month-agenda-day__event-icons", children: day.events.slice(0, 3).map((event) => u2("div", { style: {
    backgroundColor: `var(--sx-color-${event._color})`,
    filter: `brightness(1.6)`
  }, className: "sx__month-agenda-day__event-icon" })) })] });
}
function MonthAgendaWeek({ week, setActiveDate, activeDate }) {
  const $app = x2(AppContext);
  return u2("div", { className: "sx__month-agenda-week", children: [$app.config.showWeekNumbers.value && u2("div", { className: "sx__month-agenda-week__week-number", children: getWeekNumber(toJSDate(week[0].date), $app.config.firstDayOfWeek.value) }), week.map((day, index) => u2(MonthAgendaDay, { setActiveDate, day, isActive: activeDate === day.date }, index + day.date))] });
}
function MonthAgendaDayNames({ week }) {
  const $app = x2(AppContext);
  const localizedShortDayNames = getOneLetterOrShortDayNames(week.map((day) => toJSDate(day.date)), $app.config.locale.value);
  const classNames = T2(() => {
    const ret = ["sx__month-agenda-day-names"];
    if ($app.config.showWeekNumbers.value) {
      ret.push("sx__has-week-numbers");
    }
    return ret.join(" ");
  }, [$app.config.showWeekNumbers.value]);
  return u2("div", { className: classNames, children: localizedShortDayNames.map((oneLetterDayName) => u2("div", { className: "sx__month-agenda-day-name", children: oneLetterDayName })) });
}
var getAllEventDates = (startDate, endDate) => {
  let currentDate = startDate;
  const dates = [currentDate];
  while (currentDate < endDate) {
    currentDate = addDays(currentDate, 1);
    dates.push(currentDate);
  }
  return dates;
};
var placeEventInDay = (allDaysMap) => (event) => {
  getAllEventDates(dateFromDateTime(event.start), dateFromDateTime(event.end)).forEach((date) => {
    if (allDaysMap[date]) {
      allDaysMap[date].events.push(event);
    }
  });
};
var positionEventsInAgenda = (agendaMonth, eventsSortedByStart) => {
  const allDaysMap = agendaMonth.weeks.reduce((acc, week) => {
    week.forEach((day) => {
      acc[day.date] = day;
    });
    return acc;
  }, {});
  eventsSortedByStart.forEach(placeEventInDay(allDaysMap));
  return agendaMonth;
};
function MonthAgendaEvent({ calendarEvent }) {
  var _a, _b;
  const $app = x2(AppContext);
  const { setClickedEvent } = useEventInteractions($app);
  const eventCSSVariables = {
    backgroundColor: `var(--sx-color-${calendarEvent._color}-container)`,
    color: `var(--sx-color-on-${calendarEvent._color}-container)`,
    borderLeft: `4px solid var(--sx-color-${calendarEvent._color})`
  };
  const customComponent = $app.config._customComponentFns.monthAgendaEvent;
  const customComponentId = customComponent ? "custom-month-agenda-event-" + randomStringId() : void 0;
  y2(() => {
    if (!customComponent)
      return;
    customComponent(getElementByCCID(customComponentId), {
      calendarEvent: calendarEvent._getExternalEvent()
    });
  }, [calendarEvent]);
  const onClick = (e4) => {
    setClickedEvent(e4, calendarEvent);
    invokeOnEventClickCallback($app, calendarEvent, e4);
  };
  const onDoubleClick = (e4) => {
    setClickedEvent(e4, calendarEvent);
    invokeOnEventDoubleClickCallback($app, calendarEvent, e4);
  };
  const onKeyDown = (e4) => {
    if (e4.key === "Enter" || e4.key === " ") {
      e4.stopPropagation();
      setClickedEvent(e4, calendarEvent);
      invokeOnEventClickCallback($app, calendarEvent, e4);
      nextTick(() => {
        focusModal($app);
      });
    }
  };
  const hasCustomContent = (_a = calendarEvent._customContent) === null || _a === void 0 ? void 0 : _a.monthAgenda;
  return u2("div", { className: "sx__event sx__month-agenda-event", "data-ccid": customComponentId, "data-event-id": calendarEvent.id, style: {
    backgroundColor: customComponent ? void 0 : eventCSSVariables.backgroundColor,
    color: customComponent ? void 0 : eventCSSVariables.color,
    borderLeft: customComponent ? void 0 : eventCSSVariables.borderLeft,
    padding: customComponent ? "0px" : void 0
  }, onClick: (e4) => onClick(e4), onDblClick: (e4) => onDoubleClick(e4), onKeyDown, tabIndex: 0, role: "button", children: [!customComponent && !hasCustomContent && u2(k, { children: [u2("div", { className: "sx__month-agenda-event__title", children: calendarEvent.title }), u2("div", { className: "sx__month-agenda-event__time sx__month-agenda-event__has-icon", children: [u2(TimeIcon, { strokeColor: `var(--sx-color-on-${calendarEvent._color}-container)` }), u2("div", { dangerouslySetInnerHTML: {
    __html: getTimeStamp(calendarEvent, $app.config.locale.value)
  } })] })] }), hasCustomContent && u2("div", { dangerouslySetInnerHTML: {
    __html: ((_b = calendarEvent._customContent) === null || _b === void 0 ? void 0 : _b.monthAgenda) || ""
  } })] });
}
function MonthAgendaEvents({ events }) {
  const $app = x2(AppContext);
  return u2("div", { className: "sx__month-agenda-events", children: events.length ? events.map((event) => u2(MonthAgendaEvent, { calendarEvent: event }, event.id)) : u2("div", { className: "sx__month-agenda-events__empty", children: $app.translate("No events") }) });
}
var MonthAgendaWrapper = ({ $app, id }) => {
  var _a;
  const getMonth = () => {
    const filteredEvents = $app.calendarEvents.filterPredicate.value ? $app.calendarEvents.list.value.filter($app.calendarEvents.filterPredicate.value) : $app.calendarEvents.list.value;
    return positionEventsInAgenda(createAgendaMonth($app.datePickerState.selectedDate.value, $app.timeUnitsImpl), filteredEvents.sort(sortEventsByStartAndEnd));
  };
  const [agendaMonth, setAgendaMonth] = d2(getMonth());
  y2(() => {
    setAgendaMonth(getMonth());
  }, [
    $app.datePickerState.selectedDate.value,
    $app.calendarEvents.list.value,
    $app.calendarEvents.filterPredicate.value
  ]);
  y2(() => {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        const mutatedElement = mutation.target;
        if (mutatedElement.dataset.agendaFocus === "true")
          mutatedElement.focus();
      });
    });
    const monthViewElement = document.getElementById(id);
    observer.observe(monthViewElement, {
      childList: true,
      subtree: true,
      attributes: true
    });
    return () => observer.disconnect();
  }, []);
  return u2(AppContext.Provider, { value: $app, children: u2("div", { id, className: "sx__month-agenda-wrapper", children: [u2(MonthAgendaDayNames, { week: agendaMonth.weeks[0] }), u2("div", { className: "sx__month-agenda-weeks", children: agendaMonth.weeks.map((week, index) => u2(MonthAgendaWeek, { week, setActiveDate: (dateString) => $app.datePickerState.selectedDate.value = dateString, activeDate: $app.datePickerState.selectedDate.value }, index)) }), u2(MonthAgendaEvents, { events: ((_a = agendaMonth.weeks.flat().find((day) => day.date === $app.datePickerState.selectedDate.value)) === null || _a === void 0 ? void 0 : _a.events) || [] }, $app.datePickerState.selectedDate.value)] }) });
};
var config = {
  name: InternalViewName.MonthAgenda,
  label: "Month",
  setDateRange: setRangeForMonth,
  Component: MonthAgendaWrapper,
  hasSmallScreenCompat: true,
  hasWideScreenCompat: false,
  backwardForwardFn: addMonths,
  backwardForwardUnits: 1
};
var viewMonthAgenda = createPreactView(config);
var createViewMonthAgenda = () => createPreactView(config);
export {
  CalendarApp,
  createCalendar,
  createPreactView,
  createViewDay,
  createViewMonthAgenda,
  createViewMonthGrid,
  createViewWeek,
  externalEventToInternal,
  setRangeForDay,
  setRangeForMonth,
  setRangeForWeek,
  toDateString$1 as toDateString,
  toDateTimeString,
  toJSDate,
  toTimeString,
  viewDay,
  viewMonthAgenda,
  viewMonthGrid,
  viewWeek
};
//# sourceMappingURL=@schedule-x_calendar.js.map
